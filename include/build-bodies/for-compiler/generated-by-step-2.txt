----Swift.(file).ASCII.encodedReplacementCharacter
return _create(Unicode.ASCII.EncodedScalar, 'init', {}, 0x1a);
}
static get encodedReplacementCharacter() { return this.encodedReplacementCharacter$get()
----Swift.(file).ASCII.encode(_:Unicode.Scalar)
{
if(!((UInt32.infix_60({}, source.value, Int.infix_38_60_60({}, 1, 7))))) {
return Optional.none;
}
};
return _injectIntoOptional(_create(Unicode.ASCII.EncodedScalar, 'init', {}, _create(UInt8, 'initTruncatingIfNeeded', {}, source.value)))
----Swift.(file).ASCII.transcode(_:FromEncoding.EncodedScalar,from:FromEncoding.Type)
{
if((_fastPath({}, infix_61_61({}, _injectIntoOptional('!unclarifiedGeneric:FromEncoding'), _injectIntoOptional(UTF16))))) {
const c = _cloneStruct(_identityCastTo({}, content, UTF16.EncodedScalar));
{
if(!((UInt32.infix_61_61({}, UInt32.infix_38({}, c._storage, 0xFF80), 0)))) {
return Optional.none;
}
};
return _injectIntoOptional(_create(Unicode.ASCII.EncodedScalar, 'init', {}, _create(Unicode.ASCII.CodeUnit, 'init', {}, UInt32.infix_38({}, c._storage, 0x7f))));
}
else {
{
if((_fastPath({}, infix_61_61({}, _injectIntoOptional('!unclarifiedGeneric:FromEncoding'), _injectIntoOptional(UTF8))))) {
const c = _cloneStruct(_identityCastTo({}, content, UTF8.EncodedScalar));
const first = c.first.unsafelyUnwrapped;
{
if(!((UInt8.infix_60({}, first, 0x80)))) {
return Optional.none;
}
};
return _injectIntoOptional(_create(Unicode.ASCII.EncodedScalar, 'init', {}, _create(Unicode.ASCII.CodeUnit, 'init', {}, first)));
}
}
}
};
return this.encode({}, '!unclarifiedGeneric:FromEncoding'.decode({}, content))
----Swift.(file).Parser.parseScalar(from:I)
let input = input$inout.get()
const $result = (() => {
const n = input.next({$setThis: $val => input = $val}, );
{const $ifLet0 = n
if((_fastPath({}, Optional.infix_33_61({}, n, _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {})))) && $ifLet0.rawValue === 'some') {
let x = $ifLet0[0]
{
if(!((_fastPath({}, Int8.infix_62_61({}, _create(Int8, 'initTruncatingIfNeeded', {}, x), 0))))) {
return Unicode.ParseResult.error({}, 1);
}
};
return Unicode.ParseResult.valid({}, _create(Unicode.ASCII.EncodedScalar, 'init', {}, x));
}
};
return Unicode.ParseResult.emptyInput;})()
input$inout.set(input)
return $result
----Swift.(file).min(_:T,_:T)
return ((y).constructor.infix_60({}, y, x) ? y : x)
----Swift.(file).min(_:T,_:T,_:T,_:[T])
let minValue = min({}, min({}, x, y), z);
{
let $value$generator = _cloneStruct(rest.makeIterator({}, ));
while(true) {
const $ifLet0 = $value$generator.next({$setThis: $val => $value$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let value = $ifLet0[0]
if(!((value).constructor.infix_60({}, value, minValue))) break
minValue = value;
}
};
return minValue
----Swift.(file).max(_:T,_:T)
return ((y).constructor.infix_62_61({}, y, x) ? y : x)
----Swift.(file).max(_:T,_:T,_:T,_:[T])
let maxValue = max({}, max({}, x, y), z);
{
let $value$generator = _cloneStruct(rest.makeIterator({}, ));
while(true) {
const $ifLet0 = $value$generator.next({$setThis: $val => $value$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let value = $ifLet0[0]
if(!((value).constructor.infix_62_61({}, value, maxValue))) break
maxValue = value;
}
};
return maxValue
----Swift.(file).AnyHashable.description
return _create(String, 'initDescribing', {}, this.base)
----Swift.(file).AnyHashable.debugDescription
return String.infix_43({}, String.infix_43({}, "AnyHashable(", _create(String, 'initReflecting', {}, this.base)), ")")
----Swift.(file).AnyHashable.customMirror
return _create(Mirror, 'initChildrenKeyValuePairsDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, new Map([["value", this.base]]), nil/*!default_value*/, .generated/*!default_value*/)
----Swift.(file).Array.startIndex
return 0
----Swift.(file).Array.index(after:Int)
return Int.infix_43({}, i, 1)
----Swift.(file).Array.formIndex(after:Int)
let i = i$inout.get()
const $result = (() => {
Int.infix_43_61({}, {get: () => i, set: $val => i = $val}, 1);})()
i$inout.set(i)
return $result
----Swift.(file).Array.index(before:Int)
return Int.infix_45({}, i, 1)
----Swift.(file).Array.formIndex(before:Int)
let i = i$inout.get()
const $result = (() => {
Int.infix_45_61({}, {get: () => i, set: $val => i = $val}, 1);})()
i$inout.set(i)
return $result
----Swift.(file).Array.index(_:Int,offsetBy:Int)
return Int.infix_43({}, i, distance)
----Swift.(file).Array.index(_:Int,offsetBy:Int,limitedBy:Int)
const l = Int.infix_45({}, limit, i);
{
if(((Int.infix_62({}, distance, 0) ? Bool.infix_38_38({}, Int.infix_62_61({}, l, 0), () => Int.infix_60({}, l, distance)) : Bool.infix_38_38({}, Int.infix_60_61({}, l, 0), () => Int.infix_60({}, distance, l))))) {
return Optional.none;
}
};
return _injectIntoOptional(Int.infix_43({}, i, distance))
----Swift.(file).Array.distance(from:Int,to:Int)
return Int.infix_45({}, end, start)
----Swift.(file).Array.init(arrayLiteral:[Element])
$info.$setThis(_cloneStruct(_cloneStruct(_elements)));
return
----Swift.(file).Array.withContiguousMutableStorageIfAvailable(_:(inout UnsafeMutableBufferPointer<Element>) throws -> R)
return _injectIntoOptional(this.withUnsafeMutableBufferPointer({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (($info, bufferPointer$inout) => body({}, {get: () => bufferPointer, set: $val => bufferPointer = $val}))))
----Swift.(file).Array.withContiguousStorageIfAvailable(_:(UnsafeBufferPointer<Element>) throws -> R)
return _injectIntoOptional(this.withUnsafeBufferPointer({}, (($info, bufferPointer) => body({}, bufferPointer))))
----Swift.(file).Array.+infix(_:Array<Element>,_:Array<Element>)
let lhs_dupl = _cloneStruct(lhs);
lhs_dupl.appendContentsOf({$setThis: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).Array.+=infix(_:Array<Element>,_:Array<Element>)
let lhs = lhs$inout.get()
const $result = (() => {
lhs.appendContentsOf({$setThis: $val => lhs = $val}, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).Array.customMirror
return _create(Mirror, 'initUnlabeledChildrenDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, this, _injectIntoOptional(Mirror.DisplayStyle.collection), .generated/*!default_value*/)
----Swift.(file).Array.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.count);
{
let $element$generator = _cloneStruct(this.makeIterator({}, ));
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
hasher.combine({$setThis: $val => hasher = $val}, _element);
}
};})()
hasher$inout.set(hasher)
return $result
----Swift.(file).Array.withUnsafeMutableBytes(_:(UnsafeMutableRawBufferPointer) throws -> R)
return this.withUnsafeMutableBufferPointer({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (($info, $0$inout) => body({}, _create(UnsafeMutableRawBufferPointer, 'initUnsafeMutableBufferPointer', {}, $0))))
----Swift.(file).Array.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
return this.withUnsafeBufferPointer({}, (($info, $0) => body({}, _create(UnsafeRawBufferPointer, 'initUnsafeBufferPointer', {}, $0))))
----Swift.(file).ArraySlice.index(after:Int)
return Int.infix_43({}, i, 1)
----Swift.(file).ArraySlice.formIndex(after:Int)
let i = i$inout.get()
const $result = (() => {
Int.infix_43_61({}, {get: () => i, set: $val => i = $val}, 1);})()
i$inout.set(i)
return $result
----Swift.(file).ArraySlice.index(before:Int)
return Int.infix_45({}, i, 1)
----Swift.(file).ArraySlice.formIndex(before:Int)
let i = i$inout.get()
const $result = (() => {
Int.infix_45_61({}, {get: () => i, set: $val => i = $val}, 1);})()
i$inout.set(i)
return $result
----Swift.(file).ArraySlice.index(_:Int,offsetBy:Int)
return Int.infix_43({}, i, distance)
----Swift.(file).ArraySlice.index(_:Int,offsetBy:Int,limitedBy:Int)
const l = Int.infix_45({}, limit, i);
{
if(((Int.infix_62({}, distance, 0) ? Bool.infix_38_38({}, Int.infix_62_61({}, l, 0), () => Int.infix_60({}, l, distance)) : Bool.infix_38_38({}, Int.infix_60_61({}, l, 0), () => Int.infix_60({}, distance, l))))) {
return Optional.none;
}
};
return _injectIntoOptional(Int.infix_43({}, i, distance))
----Swift.(file).ArraySlice.distance(from:Int,to:Int)
return Int.infix_45({}, end, start)
----Swift.(file).ArraySlice.remove(at:Int)
const result = this.subscript$get({}, index);
this.replaceSubrangeWith({$setThis: $val => $info.$setThis(_cloneStruct($val))}, Int.infix_46_46_60({}, index, Int.infix_43({}, index, 1)), _create(EmptyCollection, 'init', {}, ));
return result
----Swift.(file).ArraySlice.withContiguousMutableStorageIfAvailable(_:(inout UnsafeMutableBufferPointer<Element>) throws -> R)
return _injectIntoOptional(this.withUnsafeMutableBufferPointer({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (($info, bufferPointer$inout) => body({}, {get: () => bufferPointer, set: $val => bufferPointer = $val}))))
----Swift.(file).ArraySlice.withContiguousStorageIfAvailable(_:(UnsafeBufferPointer<Element>) throws -> R)
return _injectIntoOptional(this.withUnsafeBufferPointer({}, (($info, bufferPointer) => body({}, bufferPointer))))
----Swift.(file).ArraySlice.customMirror
return _create(Mirror, 'initUnlabeledChildrenDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, this, _injectIntoOptional(Mirror.DisplayStyle.collection), .generated/*!default_value*/)
----Swift.(file).ArraySlice.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.count);
{
let $element$generator = _cloneStruct(this.makeIterator({}, ));
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
hasher.combine({$setThis: $val => hasher = $val}, _element);
}
};})()
hasher$inout.set(hasher)
return $result
----Swift.(file).ArraySlice.withUnsafeMutableBytes(_:(UnsafeMutableRawBufferPointer) throws -> R)
return this.withUnsafeMutableBufferPointer({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (($info, $0$inout) => body({}, _create(UnsafeMutableRawBufferPointer, 'initUnsafeMutableBufferPointer', {}, $0))))
----Swift.(file).ArraySlice.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
return this.withUnsafeBufferPointer({}, (($info, $0) => body({}, _create(UnsafeRawBufferPointer, 'initUnsafeBufferPointer', {}, $0))))
----Swift.(file).BidirectionalCollection.formIndex(before:Self.Index)
let i = i$inout.get()
const $result = (() => {
i = this.indexBefore({}, i);})()
i$inout.set(i)
return $result
----Swift.(file).BidirectionalCollection.popLast()
{
if(!((Bool.prefix_33({}, this.isEmpty)))) {
return Optional.none;
}
};
const _element = this.last[0];
$info.$setThis(_cloneStruct(this.subscriptRange$get({}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, this.indexBefore({}, this.endIndex)))));
return _injectIntoOptional(_element)
----Swift.(file).BidirectionalCollection.removeLast()
const _element = this.last[0];
$info.$setThis(_cloneStruct(this.subscriptRange$get({}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, this.indexBefore({}, this.endIndex)))));
return _element
----Swift.(file).BidirectionalCollection.removeLast(_:Int)
{
if((Int.infix_61_61({}, k, 0))) {
return ;
}
};
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Number of elements to remove should be non-negative", '?3', '?3');
preconditionFileLine({}, () => Int.infix_62_61({}, this.count, k), () => "Can't remove more items from a collection than it contains", '?3', '?3');
$info.$setThis(_cloneStruct(this.subscriptRange$get({}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, this.indexOffsetBy({}, this.endIndex, Int.prefix_45({}, k))))))
----Swift.(file).BidirectionalCollection.dropLast(_:Int)
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Can't drop a negative number of elements from a collection", '?3', '?3');
const end = infix_63_63({}, this.indexOffsetByLimitedBy({}, this.endIndex, Int.prefix_45({}, k), this.startIndex), () => this.startIndex);
return this.subscriptRange$get({}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, end))
----Swift.(file).BidirectionalCollection.suffix(_:Int)
preconditionFileLine({}, () => Int.infix_62_61({}, maxLength, 0), () => "Can't take a suffix of negative length from a collection", '?3', '?3');
const start = infix_63_63({}, this.indexOffsetByLimitedBy({}, this.endIndex, Int.prefix_45({}, maxLength), this.startIndex), () => this.startIndex);
return this.subscriptRange$get({}, (start).constructor.infix_46_46_60({}, start, this.endIndex))
----Swift.(file).Bool.init(_:Bool)
$info.$setThis(_cloneStruct(value));
return
----Swift.(file).Bool.random(using:T)
let generator = generator$inout.get()
const $result = (() => {
return UInt64.infix_61_61({}, UInt64.infix_38({}, UInt64.infix_62_62({}, generator.next({$setThis: $val => generator = $val}, ), 17), 1), 0);})()
generator$inout.set(generator)
return $result
----Swift.(file).Bool.random()
let g = _create(SystemRandomNumberGenerator, 'init', {}, );
return Bool.randomUsing({}, {get: () => g, set: $val => g = $val})
----Swift.(file).Bool.init(booleanLiteral:Bool)
$info.$setThis(_cloneStruct(value));
return
----Swift.(file).Bool.description
return (this ? "true" : "false")
----Swift.(file).Bool.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, (this ? 1 : 0));})()
hasher$inout.set(hasher)
return $result
----Swift.(file).Bool.&&infix(_:Bool,_:() throws -> Bool)
return (lhs ? rhs({}, ) : false)
----Swift.(file).Bool.||infix(_:Bool,_:() throws -> Bool)
return (lhs ? true : rhs({}, ))
----Swift.(file).Bool.toggle()
$info.$setThis(_cloneStruct(Bool.prefix_33({}, this)))
----Swift.(file).AutoreleasingUnsafeMutablePointer.subscript(_:Int)
/*yield*/
----Swift.(file).UnsafeMutableRawPointer.init(_:AutoreleasingUnsafeMutablePointer<T>?)
{const $ifLet0 = other
if(!($ifLet0.rawValue === 'some')) {
return (this.$failed = true);
}let unwrapped = $ifLet0[0]
};
this.initAutoreleasingUnsafeMutablePointer({}, unwrapped);
return
----Swift.(file).UnsafeRawPointer.init(_:AutoreleasingUnsafeMutablePointer<T>?)
{const $ifLet0 = other
if(!($ifLet0.rawValue === 'some')) {
return (this.$failed = true);
}let unwrapped = $ifLet0[0]
};
this.init({}, /*pointer_to_pointer*/unwrapped);
return
----Swift.(file).!=infix(_:Any.Type?,_:Any.Type?)
return Bool.prefix_33({}, infix_61_61({}, t0, t1))
----Swift.(file).OpaquePointer.init(_:UnsafePointer<T>?)
{const $ifLet0 = from
if(!($ifLet0.rawValue === 'some')) {
return (this.$failed = true);
}let unwrapped = $ifLet0[0]
};
this.initUnsafeRawPointer({}, /*pointer_to_pointer*/unwrapped);
return
----Swift.(file).OpaquePointer.init(_:UnsafeMutablePointer<T>?)
{const $ifLet0 = from
if(!($ifLet0.rawValue === 'some')) {
return (this.$failed = true);
}let unwrapped = $ifLet0[0]
};
this.initUnsafeMutablePointer({}, unwrapped);
return
----Swift.(file).Int.init(bitPattern:OpaquePointer?)
this.initBitPatternOptional({}, _create(UnsafeRawPointer, 'initOptional', {}, pointer));
return
----Swift.(file).UInt.init(bitPattern:OpaquePointer?)
this.initBitPatternOptional({}, _create(UnsafeRawPointer, 'initOptional', {}, pointer));
return
----Swift.(file).Character.isASCII
return Optional.infix_33_61({}, this.asciiValue, _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {}))
----Swift.(file).Character.isWholeNumber
return Optional.infix_33_61({}, this.wholeNumberValue, _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {}))
----Swift.(file).Character.isHexDigit
return Optional.infix_33_61({}, this.hexDigitValue, _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {}))
----Swift.(file).Character.uppercased()
return _create(String, 'initCharacter', {}, this).uppercased({}, )
----Swift.(file).Character.lowercased()
return _create(String, 'initCharacter', {}, this).lowercased({}, )
----Swift.(file).ClosedRange.isEmpty
return false
----Swift.(file).ClosedRange.relative(to:C)
return _create(Range, 'initUncheckedBoundstuple_type', {}, {0: this.lowerBound, 1: collection.indexAfter({}, this.upperBound)})
----Swift.(file).ClosedRange.contains(_:Bound)
return Bool.infix_38_38({}, (_element).constructor.infix_62_61({}, _element, this.lowerBound), () => (_element).constructor.infix_60_61({}, _element, this.upperBound))
----Swift.(file).Index.==infix(_:ClosedRange<Bound>.Index,_:ClosedRange<Bound>.Index)
const $match = {0: lhs, 1: rhs}
if((($match[0].rawValue == ClosedRange.Index.inRange().rawValue && $match[1].rawValue == ClosedRange.Index.inRange().rawValue))) {
const l = $match[0][0]
const r = $match[1][0]
return '!unclarifiedGeneric:Bound'.infix_61_61({}, l, r);
}
else if((($match[0].rawValue == ClosedRange.Index.pastEnd.rawValue && $match[1].rawValue == ClosedRange.Index.pastEnd.rawValue))) {
return true;
}
else if(((true))) {
return false;
}
----Swift.(file).Index.<infix(_:ClosedRange<Bound>.Index,_:ClosedRange<Bound>.Index)
const $match = {0: lhs, 1: rhs}
if((($match[0].rawValue == ClosedRange.Index.inRange().rawValue && $match[1].rawValue == ClosedRange.Index.inRange().rawValue))) {
const l = $match[0][0]
const r = $match[1][0]
return '!unclarifiedGeneric:Bound'.infix_60({}, l, r);
}
else if((($match[0].rawValue == ClosedRange.Index.inRange().rawValue && $match[1].rawValue == ClosedRange.Index.pastEnd.rawValue))) {
return true;
}
else if(((true))) {
return false;
}
----Swift.(file).Index.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
const $match = this
if((($match.rawValue == ClosedRange.Index.inRange().rawValue))) {
const value = $match[0]
hasher.combine({$setThis: $val => hasher = $val}, 0);
hasher.combine({$setThis: $val => hasher = $val}, value);
}
else if((($match.rawValue == ClosedRange.Index.pastEnd.rawValue))) {
hasher.combine({$setThis: $val => hasher = $val}, 1);
};})()
hasher$inout.set(hasher)
return $result
----Swift.(file).ClosedRange.startIndex
return ClosedRange.Index.inRange({}, this.lowerBound)
----Swift.(file).ClosedRange.endIndex
return ClosedRange.Index.pastEnd
----Swift.(file).ClosedRange.index(after:ClosedRange<Bound>.Index)
const $match = i
if((($match.rawValue == ClosedRange.Index.inRange().rawValue))) {
const x = $match[0]
return ((this.upperBound).constructor.infix_61_61({}, x, this.upperBound) ? ClosedRange.Index.pastEnd : ClosedRange.Index.inRange({}, x.advancedBy({}, _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, 1))));
}
else if((($match.rawValue == ClosedRange.Index.pastEnd.rawValue))) {
preconditionFailureFileLine({}, () => "Incrementing past end index", '?3', '?3');
}
----Swift.(file).ClosedRange.index(before:ClosedRange<Bound>.Index)
const $match = i
if((($match.rawValue == ClosedRange.Index.inRange().rawValue))) {
const x = $match[0]
preconditionFileLine({}, () => (this.lowerBound).constructor.infix_62({}, x, this.lowerBound), () => "Incrementing past start index", '?3', '?3');
return ClosedRange.Index.inRange({}, x.advancedBy({}, _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, -1)));
}
else if((($match.rawValue == ClosedRange.Index.pastEnd.rawValue))) {
preconditionFileLine({}, () => (this.upperBound).constructor.infix_62_61({}, this.upperBound, this.lowerBound), () => "Incrementing past start index", '?3', '?3');
return ClosedRange.Index.inRange({}, this.upperBound);
}
----Swift.(file).ClosedRange.index(_:ClosedRange<Bound>.Index,offsetBy:Int)
const $match = i
if((($match.rawValue == ClosedRange.Index.inRange().rawValue))) {
const x = $match[0]
const d = x.distanceTo({}, this.upperBound);
{
if((Int.infix_60_61({}, distance, d))) {
const newPosition = x.advancedBy({}, numericCast({}, distance));
preconditionFileLine({}, () => (this.lowerBound).constructor.infix_62_61({}, newPosition, this.lowerBound), () => "Advancing past start index", '?3', '?3');
return ClosedRange.Index.inRange({}, newPosition);
}
};
{
if((((d).constructor.infix_45({}, d, _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, -1))).constructor.infix_61_61({}, (d).constructor.infix_45({}, d, _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, -1)), distance))) {
return ClosedRange.Index.pastEnd;
}
};
preconditionFailureFileLine({}, () => "Advancing past end index", '?3', '?3');
}
else if((($match.rawValue == ClosedRange.Index.pastEnd.rawValue))) {
{
if((Int.infix_61_61({}, distance, 0))) {
return i;
}
};
{
if((Int.infix_60({}, distance, 0))) {
return this.indexOffsetBy({}, ClosedRange.Index.inRange({}, this.upperBound), numericCast({}, Int.infix_43({}, distance, 1)));
}
};
preconditionFailureFileLine({}, () => "Advancing past end index", '?3', '?3');
}
----Swift.(file).ClosedRange.distance(from:ClosedRange<Bound>.Index,to:ClosedRange<Bound>.Index)
const $match = {0: start, 1: end}
if((($match[0].rawValue == ClosedRange.Index.inRange().rawValue && $match[1].rawValue == ClosedRange.Index.inRange().rawValue))) {
const left = $match[0][0]
const right = $match[1][0]
return numericCast({}, left.distanceTo({}, right));
}
else if((($match[0].rawValue == ClosedRange.Index.inRange().rawValue && $match[1].rawValue == ClosedRange.Index.pastEnd.rawValue))) {
const left = $match[0][0]
return numericCast({}, (_create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, 1)).constructor.infix_43({}, _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, 1), left.distanceTo({}, this.upperBound)));
}
else if((($match[0].rawValue == ClosedRange.Index.pastEnd.rawValue && $match[1].rawValue == ClosedRange.Index.inRange().rawValue))) {
const right = $match[1][0]
return numericCast({}, (this.upperBound.distanceTo({}, right)).constructor.infix_45({}, this.upperBound.distanceTo({}, right), _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, 1)));
}
else if((($match[0].rawValue == ClosedRange.Index.pastEnd.rawValue && $match[1].rawValue == ClosedRange.Index.pastEnd.rawValue))) {
return 0;
}
----Swift.(file).ClosedRange.subscript(_:ClosedRange<Bound>.Index)
const $match = position
if((($match.rawValue == ClosedRange.Index.inRange().rawValue))) {
const x = $match[0]
return x;
}
else if((($match.rawValue == ClosedRange.Index.pastEnd.rawValue))) {
preconditionFailureFileLine({}, () => "Index out of range", '?3', '?3');
}
----Swift.(file).ClosedRange.subscript(_:Range<ClosedRange<Bound>.Index>)
return _create(Slice, 'initBaseBoundsRange', {}, this, bounds)
----Swift.(file).Comparable....infix(_:Self,_:Self)
preconditionFileLine({}, () => (minimum).constructor.infix_60_61({}, minimum, maximum), () => "Can't form Range with upperBound < lowerBound", '?3', '?3');
return _create(ClosedRange, 'initUncheckedBoundstuple_type', {}, {0: minimum, 1: maximum})
----Swift.(file).ClosedRange.==infix(_:ClosedRange<Bound>,_:ClosedRange<Bound>)
return Bool.infix_38_38({}, (lhs.lowerBound).constructor.infix_61_61({}, lhs.lowerBound, rhs.lowerBound), () => (lhs.upperBound).constructor.infix_61_61({}, lhs.upperBound, rhs.upperBound))
----Swift.(file).ClosedRange.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.lowerBound);
hasher.combine({$setThis: $val => hasher = $val}, this.upperBound);})()
hasher$inout.set(hasher)
return $result
----Swift.(file).ClosedRange.description
return (("") + (this.lowerBound) + ("...") + (this.upperBound) + (""))
----Swift.(file).ClosedRange.debugDescription
return String.infix_43({}, (("ClosedRange(") + (_create(String, 'initReflecting', {}, this.lowerBound)) + ("")), (("...") + (_create(String, 'initReflecting', {}, this.upperBound)) + (")")))
----Swift.(file).ClosedRange.customMirror
return _create(Mirror, 'initChildrenKeyValuePairsDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, new Map([["lowerBound", this.lowerBound], ["upperBound", this.upperBound]]), nil/*!default_value*/, .generated/*!default_value*/)
----Swift.(file).ClosedRange.clamped(to:ClosedRange<Bound>)
const lower = ((limits.lowerBound).constructor.infix_62({}, limits.lowerBound, this.lowerBound) ? limits.lowerBound : ((limits.upperBound).constructor.infix_60({}, limits.upperBound, this.lowerBound) ? limits.upperBound : this.lowerBound));
const upper = ((limits.upperBound).constructor.infix_60({}, limits.upperBound, this.upperBound) ? limits.upperBound : ((limits.lowerBound).constructor.infix_62({}, limits.lowerBound, this.upperBound) ? limits.lowerBound : this.upperBound));
return _create(ClosedRange, 'initUncheckedBoundstuple_type', {}, {0: lower, 1: upper})
----Swift.(file).ClosedRange.init(_:Range<Bound>)
preconditionFileLine({}, () => Bool.prefix_33({}, other.isEmpty), () => "Can't form an empty closed range", '?3', '?3');
const upperBound = other.upperBound.advancedBy({}, _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, -1));
this.initUncheckedBoundstuple_type({}, {0: other.lowerBound, 1: upperBound});
return
----Swift.(file).ClosedRange.overlaps(_:ClosedRange<Bound>)
return Bool.infix_124_124({}, this.contains({}, other.lowerBound), () => other.contains({}, this.lowerBound))
----Swift.(file).ClosedRange.overlaps(_:Range<Bound>)
return other.overlaps({}, this)
----Swift.(file).Collection.formIndex(after:Self.Index)
let i = i$inout.get()
const $result = (() => {
i = this.indexAfter({}, i);})()
i$inout.set(i)
return $result
----Swift.(file).Collection.formIndex(_:Self.Index,offsetBy:Int)
let i = i$inout.get()
const $result = (() => {
i = this.indexOffsetBy({}, i, distance);})()
i$inout.set(i)
return $result
----Swift.(file).Collection.formIndex(_:Self.Index,offsetBy:Int,limitedBy:Self.Index)
let i = i$inout.get()
const $result = (() => {
{const $ifLet0 = this.indexOffsetByLimitedBy({}, i, distance, limit)
if($ifLet0.rawValue === 'some') {
let advancedIndex = $ifLet0[0]
i = advancedIndex;
return true;
}
};
i = limit;
return false;})()
i$inout.set(i)
return $result
----Swift.(file).Collection.distance(from:Self.Index,to:Self.Index)
preconditionFileLine({}, () => (start).constructor.infix_60_61({}, start, end), () => "Only BidirectionalCollections can have end come before start", '?3', '?3');
let start_dupl = start;
let count = 0;
while(true){
if(!(((start_dupl).constructor.infix_33_61({}, start_dupl, end)))) break
count = Int.infix_43({}, count, 1);
this.formIndexAfter({}, {get: () => start_dupl, set: $val => start_dupl = $val});
};
return count
----Swift.(file).Collection.randomElement(using:T)
let generator = generator$inout.get()
const $result = (() => {
{
if(!((Bool.prefix_33({}, this.isEmpty)))) {
return Optional.none;
}
};
const random = Int.randomInUsing({}, Int.infix_46_46_60({}, 0, this.count), {get: () => generator, set: $val => generator = $val});
const idx = this.indexOffsetBy({}, this.startIndex, random);
return _injectIntoOptional(this.subscript$get({}, idx));})()
generator$inout.set(generator)
return $result
----Swift.(file).Collection.randomElement()
let g = _create(SystemRandomNumberGenerator, 'init', {}, );
return this.randomElementUsing({}, {get: () => g, set: $val => g = $val})
----Swift.(file).Collection.makeIterator()
return _create(IndexingIterator, 'init_elements', {}, this)
----Swift.(file).Collection.subscript(_:Range<Self.Index>)
this._failEarlyRangeCheckBounds({}, bounds, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, this.endIndex));
return _create(Slice, 'initBaseBoundsRange', {}, this, bounds)
----Swift.(file).Collection.popFirst()
{
if(!((Bool.prefix_33({}, this.isEmpty)))) {
return Optional.none;
}
};
const _element = this.first[0];
$info.$setThis(_cloneStruct(this.subscriptRange$get({}, (this.indexAfter({}, this.startIndex)).constructor.infix_46_46_60({}, this.indexAfter({}, this.startIndex), this.endIndex))));
return _injectIntoOptional(_element)
----Swift.(file).Collection.isEmpty
return (this.startIndex).constructor.infix_61_61({}, this.startIndex, this.endIndex)
----Swift.(file).Collection.first
const start = this.startIndex;
{
if(((start).constructor.infix_33_61({}, start, this.endIndex))) {
return _injectIntoOptional(this.subscript$get({}, start));
}
else {
return Optional.none;
}
}
----Swift.(file).Collection.underestimatedCount
return this.count
----Swift.(file).Collection.count
return this.distanceFromTo({}, this.startIndex, this.endIndex)
----Swift.(file).Collection.dropFirst(_:Int)
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Can't drop a negative number of elements from a collection", '?3', '?3');
const start = infix_63_63({}, this.indexOffsetByLimitedBy({}, this.startIndex, k, this.endIndex), () => this.endIndex);
return this.subscriptRange$get({}, (start).constructor.infix_46_46_60({}, start, this.endIndex))
----Swift.(file).Collection.dropLast(_:Int)
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Can't drop a negative number of elements from a collection", '?3', '?3');
const amount = /*dot_syntax_base_ignored*/max({}, 0, Int.infix_45({}, this.count, k));
const end = infix_63_63({}, this.indexOffsetByLimitedBy({}, this.startIndex, amount, this.endIndex), () => this.endIndex);
return this.subscriptRange$get({}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, end))
----Swift.(file).Collection.drop(while:(Self.Element) throws -> Bool)
let start = this.startIndex;
while(true){
if(!((Bool.infix_38_38({}, (start).constructor.infix_33_61({}, start, this.endIndex), () => predicate({}, this.subscript$get({}, start)))))) break
this.formIndexAfter({}, {get: () => start, set: $val => start = $val});
};
return this.subscriptRange$get({}, (start).constructor.infix_46_46_60({}, start, this.endIndex))
----Swift.(file).Collection.prefix(_:Int)
preconditionFileLine({}, () => Int.infix_62_61({}, maxLength, 0), () => "Can't take a prefix of negative length from a collection", '?3', '?3');
const end = infix_63_63({}, this.indexOffsetByLimitedBy({}, this.startIndex, maxLength, this.endIndex), () => this.endIndex);
return this.subscriptRange$get({}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, end))
----Swift.(file).Collection.prefix(while:(Self.Element) throws -> Bool)
let end = this.startIndex;
while(true){
if(!((Bool.infix_38_38({}, (end).constructor.infix_33_61({}, end, this.endIndex), () => predicate({}, this.subscript$get({}, end)))))) break
this.formIndexAfter({}, {get: () => end, set: $val => end = $val});
};
return this.subscriptRange$get({}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, end))
----Swift.(file).Collection.suffix(_:Int)
preconditionFileLine({}, () => Int.infix_62_61({}, maxLength, 0), () => "Can't take a suffix of negative length from a collection", '?3', '?3');
const amount = /*dot_syntax_base_ignored*/max({}, 0, Int.infix_45({}, this.count, maxLength));
const start = infix_63_63({}, this.indexOffsetByLimitedBy({}, this.startIndex, amount, this.endIndex), () => this.endIndex);
return this.subscriptRange$get({}, (start).constructor.infix_46_46_60({}, start, this.endIndex))
----Swift.(file).Collection.prefix(upTo:Self.Index)
return this.subscriptRange$get({}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, end))
----Swift.(file).Collection.suffix(from:Self.Index)
return this.subscriptRange$get({}, (start).constructor.infix_46_46_60({}, start, this.endIndex))
----Swift.(file).Collection.prefix(through:Self.Index)
return this.prefixUpTo({}, this.indexAfter({}, position))
----Swift.(file).Collection.split(maxSplits:Int,omittingEmptySubsequences:Bool,whereSeparator:(Self.Element) throws -> Bool)
preconditionFileLine({}, () => Int.infix_62_61({}, maxSplits, 0), () => "Must take zero or more splits", '?3', '?3');
let result = _create(Array, 'initBuffer', {}, []);
let subSequenceStart = this.startIndex;
function appendSubsequenceEnd($info, end){
{
if((Bool.infix_38_38({}, (subSequenceStart).constructor.infix_61_61({}, subSequenceStart, end), () => omittingEmptySubsequences))) {
return false;
}
};
result.append({$setThis: $val => result = $val}, this.subscriptRange$get({}, (subSequenceStart).constructor.infix_46_46_60({}, subSequenceStart, end)));
return true;
}
{
if((Bool.infix_124_124({}, Int.infix_61_61({}, maxSplits, 0), () => this.isEmpty))) {
_.discardAssignment = appendSubsequenceEnd({}, this.endIndex);
return result;
}
};
let subSequenceEnd = subSequenceStart;
const cachedEndIndex = this.endIndex;
while(true){
if(!(((subSequenceEnd).constructor.infix_33_61({}, subSequenceEnd, cachedEndIndex)))) break
{
if((isSeparator({}, this.subscript$get({}, subSequenceEnd)))) {
const didAppend = appendSubsequenceEnd({}, subSequenceEnd);
this.formIndexAfter({}, {get: () => subSequenceEnd, set: $val => subSequenceEnd = $val});
subSequenceStart = subSequenceEnd;
{
if((Bool.infix_38_38({}, didAppend, () => Int.infix_61_61({}, result.count, maxSplits)))) {
break;
}
};
continue;
}
};
this.formIndexAfter({}, {get: () => subSequenceEnd, set: $val => subSequenceEnd = $val});
};
{
if((Bool.infix_124_124({}, (subSequenceStart).constructor.infix_33_61({}, subSequenceStart, cachedEndIndex), () => Bool.prefix_33({}, omittingEmptySubsequences)))) {
result.append({$setThis: $val => result = $val}, this.subscriptRange$get({}, (subSequenceStart).constructor.infix_46_46_60({}, subSequenceStart, cachedEndIndex)));
}
};
return result
----Swift.(file).Collection.split(separator:Self.Element,maxSplits:Int,omittingEmptySubsequences:Bool)
return this.splitMaxSplitsOmittingEmptySubsequencesWhereSeparator({}, maxSplits, omittingEmptySubsequences, (($info, $0) => ($0).constructor.infix_61_61({}, $0, separator)))
----Swift.(file).Collection.removeFirst()
preconditionFileLine({}, () => Bool.prefix_33({}, this.isEmpty), () => "Can't remove items from an empty collection", '?3', '?3');
const _element = this.first[0];
$info.$setThis(_cloneStruct(this.subscriptRange$get({}, (this.indexAfter({}, this.startIndex)).constructor.infix_46_46_60({}, this.indexAfter({}, this.startIndex), this.endIndex))));
return _element
----Swift.(file).Collection.removeFirst(_:Int)
{
if((Int.infix_61_61({}, k, 0))) {
return ;
}
};
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Number of elements to remove should be non-negative", '?3', '?3');
preconditionFileLine({}, () => Int.infix_62_61({}, this.count, k), () => "Can't remove more items from a collection than it contains", '?3', '?3');
$info.$setThis(_cloneStruct(this.subscriptRange$get({}, (this.indexOffsetBy({}, this.startIndex, k)).constructor.infix_46_46_60({}, this.indexOffsetBy({}, this.startIndex, k), this.endIndex))))
----Swift.(file).BidirectionalCollection.last
return (this.isEmpty ? Optional.none : _injectIntoOptional(this.subscript$get({}, this.indexBefore({}, this.endIndex))))
----Swift.(file).Collection.firstIndex(of:Self.Element)
{const $ifLet0 = this._customIndexOfEquatableElement({}, _element)
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return result;
}
};
let i = this.startIndex;
while(true){
if(!(((i).constructor.infix_33_61({}, i, this.endIndex)))) break
{
if(((this.subscript$get({}, i)).constructor.infix_61_61({}, this.subscript$get({}, i), _element))) {
return _injectIntoOptional(i);
}
};
this.formIndexAfter({}, {get: () => i, set: $val => i = $val});
};
return Optional.none
----Swift.(file).Collection.firstIndex(where:(Self.Element) throws -> Bool)
let i = this.startIndex;
while(true){
if(!(((i).constructor.infix_33_61({}, i, this.endIndex)))) break
{
if((predicate({}, this.subscript$get({}, i)))) {
return _injectIntoOptional(i);
}
};
this.formIndexAfter({}, {get: () => i, set: $val => i = $val});
};
return Optional.none
----Swift.(file).BidirectionalCollection.last(where:(Self.Element) throws -> Bool)
return this.lastIndexWhere({}, predicate).mapSwift({}, (($info, $0) => this.subscript$get({}, $0)))
----Swift.(file).BidirectionalCollection.lastIndex(where:(Self.Element) throws -> Bool)
let i = this.endIndex;
while(true){
if(!(((i).constructor.infix_33_61({}, i, this.startIndex)))) break
this.formIndexBefore({}, {get: () => i, set: $val => i = $val});
{
if((predicate({}, this.subscript$get({}, i)))) {
return _injectIntoOptional(i);
}
};
};
return Optional.none
----Swift.(file).BidirectionalCollection.lastIndex(of:Self.Element)
{const $ifLet0 = this._customLastIndexOfEquatableElement({}, _element)
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return result;
}
};
return this.lastIndexWhere({}, (($info, $0) => ($0).constructor.infix_61_61({}, $0, _element)))
----Swift.(file).Sequence.shuffled(using:T)
let generator = generator$inout.get()
const $result = (() => {
let result = _create(ContiguousArray, 'initBuffer', {}, this);
result.shuffleUsing({$setThis: $val => result = $val}, {get: () => generator, set: $val => generator = $val});
return _create(Array, 'initBuffer', {}, result);})()
generator$inout.set(generator)
return $result
----Swift.(file).Sequence.shuffled()
let g = _create(SystemRandomNumberGenerator, 'init', {}, );
return this.shuffledUsing({}, {get: () => g, set: $val => g = $val})
----Swift.(file).MutableCollection.shuffle(using:T)
let generator = generator$inout.get()
const $result = (() => {
{
if(!((Int.infix_62({}, this.count, 1)))) {
return ;
}
};
let amount = this.count;
let currentIndex = this.startIndex;
while(true){
if(!((Int.infix_62({}, amount, 1)))) break
const random = Int.randomInUsing({}, Int.infix_46_46_60({}, 0, amount), {get: () => generator, set: $val => generator = $val});
Int.infix_45_61({}, {get: () => amount, set: $val => amount = $val}, 1);
this.swapAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, currentIndex, this.indexOffsetBy({}, currentIndex, random));
this.formIndexAfter({}, {get: () => currentIndex, set: $val => currentIndex = $val});
};})()
generator$inout.set(generator)
return $result
----Swift.(file).MutableCollection.shuffle()
let g = _create(SystemRandomNumberGenerator, 'init', {}, );
this.shuffleUsing({$setThis: $val => $info.$setThis(_cloneStruct($val))}, {get: () => g, set: $val => g = $val})
----Swift.(file).CollectionOfOne.startIndex
return 0
----Swift.(file).CollectionOfOne.endIndex
return 1
----Swift.(file).CollectionOfOne.index(after:CollectionOfOne<Element>.Index)
preconditionFileLine({}, () => Int.infix_61_61({}, i, this.startIndex), () => String()/*!default_value*/, '?3', '?3');
return 1
----Swift.(file).CollectionOfOne.index(before:CollectionOfOne<Element>.Index)
preconditionFileLine({}, () => Int.infix_61_61({}, i, this.endIndex), () => String()/*!default_value*/, '?3', '?3');
return 0
----Swift.(file).CollectionOfOne.subscript(_:Range<Int>)#ASS

this._failEarlyRangeCheckBounds({}, bounds, CollectionOfOne.Index.infix_46_46_60({}, 0, 1));
const n = newValue.count;
preconditionFileLine({}, () => Int.infix_61_61({}, bounds.count, n), () => "CollectionOfOne can't be resized", '?3', '?3');
{
if((Int.infix_61_61({}, n, 1))) {
$info.$setThis(_cloneStruct(_cloneStruct(newValue.base)));
}
}
----Swift.(file).CollectionOfOne.subscript(_:Range<Int>)
this._failEarlyRangeCheckBounds({}, bounds, CollectionOfOne.Index.infix_46_46_60({}, 0, 1));
return _create(Slice, 'initBaseBoundsRange', {}, this, bounds);

----Swift.(file).CollectionOfOne.count
return 1
----Swift.(file).Comparable.>infix(_:Self,_:Self)
return (rhs).constructor.infix_60({}, rhs, lhs)
----Swift.(file).Comparable.<=infix(_:Self,_:Self)
return Bool.prefix_33({}, (rhs).constructor.infix_60({}, rhs, lhs))
----Swift.(file).Comparable.>=infix(_:Self,_:Self)
return Bool.prefix_33({}, (lhs).constructor.infix_60({}, lhs, rhs))
----Swift.(file).==infix(_:T,_:T)
return (lhs.rawValue).constructor.infix_61_61({}, lhs.rawValue, rhs.rawValue)
----Swift.(file).!=infix(_:T,_:T)
return (lhs.rawValue).constructor.infix_33_61({}, lhs.rawValue, rhs.rawValue)
----Swift.(file).!=infix(_:T,_:T)
return (lhs.rawValue).constructor.infix_33_61({}, lhs.rawValue, rhs.rawValue)
----Swift.(file).RawRepresentable.hashValue
return this.rawValue.hashValue
----Swift.(file).RawRepresentable.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.rawValue);})()
hasher$inout.set(hasher)
return $result
----Swift.(file).ExpressibleByExtendedGraphemeClusterLiteral.init(unicodeScalarLiteral:Self.ExtendedGraphemeClusterLiteralType)
this.initExtendedGraphemeClusterLiteral({}, value);
return
----Swift.(file).ExpressibleByStringLiteral.init(extendedGraphemeClusterLiteral:Self.StringLiteralType)
this.initStringLiteral({}, value);
return
----Swift.(file).ContiguousArray.startIndex
return 0
----Swift.(file).ContiguousArray.index(after:Int)
return Int.infix_43({}, i, 1)
----Swift.(file).ContiguousArray.formIndex(after:Int)
let i = i$inout.get()
const $result = (() => {
Int.infix_43_61({}, {get: () => i, set: $val => i = $val}, 1);})()
i$inout.set(i)
return $result
----Swift.(file).ContiguousArray.index(before:Int)
return Int.infix_45({}, i, 1)
----Swift.(file).ContiguousArray.formIndex(before:Int)
let i = i$inout.get()
const $result = (() => {
Int.infix_45_61({}, {get: () => i, set: $val => i = $val}, 1);})()
i$inout.set(i)
return $result
----Swift.(file).ContiguousArray.index(_:Int,offsetBy:Int)
return Int.infix_43({}, i, distance)
----Swift.(file).ContiguousArray.index(_:Int,offsetBy:Int,limitedBy:Int)
const l = Int.infix_45({}, limit, i);
{
if(((Int.infix_62({}, distance, 0) ? Bool.infix_38_38({}, Int.infix_62_61({}, l, 0), () => Int.infix_60({}, l, distance)) : Bool.infix_38_38({}, Int.infix_60_61({}, l, 0), () => Int.infix_60({}, distance, l))))) {
return Optional.none;
}
};
return _injectIntoOptional(Int.infix_43({}, i, distance))
----Swift.(file).ContiguousArray.distance(from:Int,to:Int)
return Int.infix_45({}, end, start)
----Swift.(file).ContiguousArray.withContiguousMutableStorageIfAvailable(_:(inout UnsafeMutableBufferPointer<Element>) throws -> R)
return _injectIntoOptional(this.withUnsafeMutableBufferPointer({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (($info, bufferPointer$inout) => body({}, {get: () => bufferPointer, set: $val => bufferPointer = $val}))))
----Swift.(file).ContiguousArray.withContiguousStorageIfAvailable(_:(UnsafeBufferPointer<Element>) throws -> R)
return _injectIntoOptional(this.withUnsafeBufferPointer({}, (($info, bufferPointer) => body({}, bufferPointer))))
----Swift.(file).ContiguousArray.customMirror
return _create(Mirror, 'initUnlabeledChildrenDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, this, _injectIntoOptional(Mirror.DisplayStyle.collection), .generated/*!default_value*/)
----Swift.(file).ContiguousArray.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.count);
{
let $element$generator = _cloneStruct(this.makeIterator({}, ));
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
hasher.combine({$setThis: $val => hasher = $val}, _element);
}
};})()
hasher$inout.set(hasher)
return $result
----Swift.(file).ContiguousArray.withUnsafeMutableBytes(_:(UnsafeMutableRawBufferPointer) throws -> R)
return this.withUnsafeMutableBufferPointer({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (($info, $0$inout) => body({}, _create(UnsafeMutableRawBufferPointer, 'initUnsafeMutableBufferPointer', {}, $0))))
----Swift.(file).ContiguousArray.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
return this.withUnsafeBufferPointer({}, (($info, $0) => body({}, _create(UnsafeRawBufferPointer, 'initUnsafeBufferPointer', {}, $0))))
----Swift.(file).Dictionary.isEmpty
return Int.infix_61_61({}, this.count, 0)
----Swift.(file).Dictionary.merging(_:[Key : Value],uniquingKeysWith:(Value, Value) throws -> Value)
let result = _cloneStruct(this);
result.mergeUniquingKeysWith({$setThis: $val => result = $val}, other, combine);
return result
----Swift.(file).Dictionary.customMirror
const style = Mirror.DisplayStyle.dictionary;
return _create(Mirror, 'initUnlabeledChildrenDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, this, _injectIntoOptional(style), .generated/*!default_value*/)
----Swift.(file).Dictionary.popFirst()
{
if(!((Bool.prefix_33({}, this.isEmpty)))) {
return Optional.none;
}
};
return _injectIntoOptional(this.removeAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, this.startIndex))
----Swift.(file).EmptyCollection.init()
return
----Swift.(file).Iterator.next()
return Optional.none
----Swift.(file).EmptyCollection.makeIterator()
return _create(EmptyCollection.Iterator, 'init', {}, )
----Swift.(file).EmptyCollection.startIndex
return 0
----Swift.(file).EmptyCollection.endIndex
return 0
----Swift.(file).EmptyCollection.index(after:EmptyCollection<Element>.Index)
preconditionFailureFileLine({}, () => "EmptyCollection can't advance indices", '?3', '?3')
----Swift.(file).EmptyCollection.index(before:EmptyCollection<Element>.Index)
preconditionFailureFileLine({}, () => "EmptyCollection can't advance indices", '?3', '?3')
----Swift.(file).EmptyCollection.subscript(_:EmptyCollection<Element>.Index)#ASS

preconditionFailureFileLine({}, () => "Index out of range", '?3', '?3')
----Swift.(file).EmptyCollection.subscript(_:EmptyCollection<Element>.Index)
preconditionFailureFileLine({}, () => "Index out of range", '?3', '?3');

----Swift.(file).EmptyCollection.subscript(_:Range<EmptyCollection<Element>.Index>)#ASS

preconditionFileLine({}, () => Bool.infix_38_38({}, Int.infix_61_61({}, bounds.lowerBound, 0), () => Int.infix_61_61({}, bounds.upperBound, 0)), () => "Index out of range", '?3', '?3')
----Swift.(file).EmptyCollection.subscript(_:Range<EmptyCollection<Element>.Index>)
preconditionFileLine({}, () => Bool.infix_38_38({}, Int.infix_61_61({}, bounds.lowerBound, 0), () => Int.infix_61_61({}, bounds.upperBound, 0)), () => "Index out of range", '?3', '?3');
return this;

----Swift.(file).EmptyCollection.count
return 0
----Swift.(file).EmptyCollection.index(_:EmptyCollection<Element>.Index,offsetBy:Int)
preconditionFileLine({}, () => Bool.infix_38_38({}, Int.infix_61_61({}, i, this.startIndex), () => Int.infix_61_61({}, n, 0)), () => "Index out of range", '?3', '?3');
return i
----Swift.(file).EmptyCollection.index(_:EmptyCollection<Element>.Index,offsetBy:Int,limitedBy:EmptyCollection<Element>.Index)
preconditionFileLine({}, () => Bool.infix_38_38({}, Int.infix_61_61({}, i, this.startIndex), () => Int.infix_61_61({}, limit, this.startIndex)), () => "Index out of range", '?3', '?3');
return (Int.infix_61_61({}, n, 0) ? _injectIntoOptional(i) : Optional.none)
----Swift.(file).EmptyCollection.distance(from:EmptyCollection<Element>.Index,to:EmptyCollection<Element>.Index)
preconditionFileLine({}, () => Int.infix_61_61({}, start, 0), () => "From must be startIndex (or endIndex)", '?3', '?3');
preconditionFileLine({}, () => Int.infix_61_61({}, end, 0), () => "To must be endIndex (or startIndex)", '?3', '?3');
return 0
----Swift.(file).EmptyCollection.==infix(_:EmptyCollection<Element>,_:EmptyCollection<Element>)
return true
----Swift.(file).Equatable.!=infix(_:Self,_:Self)
return Bool.prefix_33({}, (lhs).constructor.infix_61_61({}, lhs, rhs))
----Swift.(file).===infix(_:AnyObject?,_:AnyObject?)
const $match = {0: lhs, 1: rhs}
if(((true))) {
const l = $match[0]
const r = $match[1]
return ObjectIdentifier.infix_61_61({}, _create(ObjectIdentifier, 'initAnyObject', {}, l), _create(ObjectIdentifier, 'initAnyObject', {}, r));
}
else if((($match[0].rawValue == Optional.none.rawValue && $match[1].rawValue == Optional.none.rawValue))) {
return true;
}
else if(((true))) {
return false;
}
----Swift.(file).!==infix(_:AnyObject?,_:AnyObject?)
return Bool.prefix_33({}, infix_61_61_61({}, lhs, rhs))
----Swift.(file).LazyFilterSequence.underestimatedCount
return 0
----Swift.(file).LazyFilterSequence.index(after:LazyFilterSequence<Base>.Index)
let i_dupl = i;
this.formIndexAfter({}, {get: () => i_dupl, set: $val => i_dupl = $val});
return i_dupl
----Swift.(file).LazyFilterSequence.formIndex(_:LazyFilterSequence<Base>.Index,offsetBy:Int)
let i = i$inout.get()
const $result = (() => {
i = this.indexOffsetBy({}, i, n);})()
i$inout.set(i)
return $result
----Swift.(file).LazyFilterSequence.formIndex(_:LazyFilterSequence<Base>.Index,offsetBy:Int,limitedBy:LazyFilterSequence<Base>.Index)
let i = i$inout.get()
const $result = (() => {
{const $ifLet0 = this.indexOffsetByLimitedBy({}, i, n, limit)
if($ifLet0.rawValue === 'some') {
let advancedIndex = $ifLet0[0]
i = advancedIndex;
return true;
}
};
i = limit;
return false;})()
i$inout.set(i)
return $result
----Swift.(file).LazyFilterSequence.index(before:LazyFilterSequence<Base>.Index)
let i_dupl = i;
this.formIndexBefore({}, {get: () => i_dupl, set: $val => i_dupl = $val});
return i_dupl
----Swift.(file).LazySequenceProtocol.filter(_:(Self.Elements.Element) -> Bool)
return _create(LazyFilterSequence, 'init_basefunction_type', {}, this._elements, isIncluded)
----Swift.(file).LazySequenceProtocol.flatMap(_:(Self.Elements.Element) -> SegmentOfResult)
return this.mapSwift({}, transform).joined({}, )
----Swift.(file).LazySequenceProtocol.compactMap(_:(Self.Elements.Element) -> ElementOfResult?)
return this.mapSwift({}, transform).filterSwift({}, (($info, $0) => Optional.infix_33_61({}, $0, _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {})))).mapSwift({}, (($info, $0) => $0[0]))
----Swift.(file).FlattenSequence.formIndex(after:FlattenSequence<Base>.Index)
let i = i$inout.get()
const $result = (() => {
i = _cloneStruct(this.indexAfter({}, i));})()
i$inout.set(i)
return $result
----Swift.(file).FlattenSequence.formIndex(_:FlattenSequence<Base>.Index,offsetBy:Int)
let i = i$inout.get()
const $result = (() => {
i = _cloneStruct(this.indexOffsetBy({}, i, n));})()
i$inout.set(i)
return $result
----Swift.(file).FlattenSequence.formIndex(_:FlattenSequence<Base>.Index,offsetBy:Int,limitedBy:FlattenSequence<Base>.Index)
let i = i$inout.get()
const $result = (() => {
{const $ifLet0 = this.indexOffsetByLimitedBy({}, i, n, limit)
if($ifLet0.rawValue === 'some') {
let advancedIndex = $ifLet0[0]
i = _cloneStruct(advancedIndex);
return true;
}
};
i = _cloneStruct(limit);
return false;})()
i$inout.set(i)
return $result
----Swift.(file).FlattenSequence.subscript(_:Range<FlattenSequence<Base>.Index>)
return _create(Slice, 'initBaseBoundsRange', {}, this, bounds)
----Swift.(file).FlattenSequence.formIndex(before:FlattenSequence<Base>.Index)
let i = i$inout.get()
const $result = (() => {
i = _cloneStruct(this.indexBefore({}, i));})()
i$inout.set(i)
return $result
----Swift.(file).FloatingPointSign.rawValue
const $match = this
if((($match.rawValue == FloatingPointSign.plus.rawValue))) {
return 0;
}
else if((($match.rawValue == FloatingPointSign.minus.rawValue))) {
return 1;
}
----Swift.(file).FloatingPointSign.==infix(_:FloatingPointSign,_:FloatingPointSign)
return Int.infix_61_61({}, a.rawValue, b.rawValue)
----Swift.(file).FloatingPointSign.hashValue
return this.rawValue.hashValue
----Swift.(file).FloatingPointSign.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.rawValue);})()
hasher$inout.set(hasher)
return $result
----Swift.(file).FloatingPoint.==infix(_:Self,_:Self)
return lhs.isEqualTo({}, rhs)
----Swift.(file).FloatingPoint.<infix(_:Self,_:Self)
return lhs.isLessThan({}, rhs)
----Swift.(file).FloatingPoint.<=infix(_:Self,_:Self)
return lhs.isLessThanOrEqualTo({}, rhs)
----Swift.(file).FloatingPoint.>infix(_:Self,_:Self)
return rhs.isLessThan({}, lhs)
----Swift.(file).FloatingPoint.>=infix(_:Self,_:Self)
return rhs.isLessThanOrEqualTo({}, lhs)
----Swift.(file).FloatingPoint.ulpOfOne
return _create(this.constructor, 'initIntegerLiteral', {}, 1).ulp;
}
static get ulpOfOne() { return this.ulpOfOne$get()
----Swift.(file).FloatingPoint.rounded(_:FloatingPointRoundingRule)
let lhs = this;
lhs.round({$setThis: $val => lhs = $val}, rule);
return lhs
----Swift.(file).FloatingPoint.rounded()
return this.rounded({}, FloatingPointRoundingRule.toNearestOrAwayFromZero)
----Swift.(file).FloatingPoint.round()
this.round({$setThis: $val => $info.$setThis(_cloneStruct($val))}, FloatingPointRoundingRule.toNearestOrAwayFromZero)
----Swift.(file).FloatingPoint.nextDown
return this.constructor.prefix_45({}, this.constructor.prefix_45({}, this).nextUp)
----Swift.(file).FloatingPoint.truncatingRemainder(dividingBy:Self)
let lhs = this;
lhs.formTruncatingRemainderDividingBy({$setThis: $val => lhs = $val}, other);
return lhs
----Swift.(file).FloatingPoint.remainder(dividingBy:Self)
let lhs = this;
lhs.formRemainderDividingBy({$setThis: $val => lhs = $val}, other);
return lhs
----Swift.(file).FloatingPoint.squareRoot()
let lhs = this;
lhs.formSquareRoot({$setThis: $val => lhs = $val}, );
return lhs
----Swift.(file).FloatingPoint.addingProduct(_:Self,_:Self)
let addend = this;
addend.addProduct({$setThis: $val => addend = $val}, lhs, rhs);
return addend
----Swift.(file).FloatingPoint.minimum(_:Self,_:Self)
{
if((Bool.infix_124_124({}, x.isSignalingNaN, () => y.isSignalingNaN))) {
return (x).constructor.infix_43({}, x, y);
}
};
{
if((Bool.infix_124_124({}, (x).constructor.infix_60_61({}, x, y), () => y._isNaN))) {
return x;
}
};
return y
----Swift.(file).FloatingPoint.maximum(_:Self,_:Self)
{
if((Bool.infix_124_124({}, x.isSignalingNaN, () => y.isSignalingNaN))) {
return (x).constructor.infix_43({}, x, y);
}
};
{
if((Bool.infix_124_124({}, (x).constructor.infix_62({}, x, y), () => y._isNaN))) {
return x;
}
};
return y
----Swift.(file).FloatingPoint.minimumMagnitude(_:Self,_:Self)
{
if((Bool.infix_124_124({}, x.isSignalingNaN, () => y.isSignalingNaN))) {
return (x).constructor.infix_43({}, x, y);
}
};
{
if((Bool.infix_124_124({}, (x.magnitude).constructor.infix_60_61({}, x.magnitude, y.magnitude), () => y._isNaN))) {
return x;
}
};
return y
----Swift.(file).FloatingPoint.maximumMagnitude(_:Self,_:Self)
{
if((Bool.infix_124_124({}, x.isSignalingNaN, () => y.isSignalingNaN))) {
return (x).constructor.infix_43({}, x, y);
}
};
{
if((Bool.infix_124_124({}, (x.magnitude).constructor.infix_62({}, x.magnitude, y.magnitude), () => y._isNaN))) {
return x;
}
};
return y
----Swift.(file).FloatingPoint.floatingPointClass
{
if((this.isSignalingNaN)) {
return FloatingPointClassification.signalingNaN;
}
};
{
if((this._isNaN)) {
return FloatingPointClassification.quietNaN;
}
};
{
if((this.isInfinite)) {
return (FloatingPointSign.infix_61_61({}, this.sign, FloatingPointSign.minus) ? FloatingPointClassification.negativeInfinity : FloatingPointClassification.positiveInfinity);
}
};
{
if((this.isNormal)) {
return (FloatingPointSign.infix_61_61({}, this.sign, FloatingPointSign.minus) ? FloatingPointClassification.negativeNormal : FloatingPointClassification.positiveNormal);
}
};
{
if((this.isSubnormal)) {
return (FloatingPointSign.infix_61_61({}, this.sign, FloatingPointSign.minus) ? FloatingPointClassification.negativeSubnormal : FloatingPointClassification.positiveSubnormal);
}
};
return (FloatingPointSign.infix_61_61({}, this.sign, FloatingPointSign.minus) ? FloatingPointClassification.negativeZero : FloatingPointClassification.positiveZero)
----Swift.(file).BinaryFloatingPoint.radix
return 2;
}
static get radix() { return this.radix$get()
----Swift.(file).BinaryFloatingPoint.init(signOf:Self,magnitudeOf:Self)
this.initSignFloatingPointSignExponentBitPatternSignificandBitPattern({}, signOf.sign, magnitudeOf.exponentBitPattern, magnitudeOf.significandBitPattern);
return
----Swift.(file).BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:Self)
{
if(((this).constructor.infix_60({}, this, other))) {
return true;
}
};
{
if(((other).constructor.infix_62({}, other, this))) {
return false;
}
};
{
if((FloatingPointSign.infix_33_61({}, this.sign, other.sign))) {
return FloatingPointSign.infix_61_61({}, this.sign, FloatingPointSign.minus);
}
};
{
if(((this.exponentBitPattern).constructor.infix_62({}, this.exponentBitPattern, other.exponentBitPattern))) {
return FloatingPointSign.infix_61_61({}, this.sign, FloatingPointSign.minus);
}
};
{
if(((this.exponentBitPattern).constructor.infix_60({}, this.exponentBitPattern, other.exponentBitPattern))) {
return FloatingPointSign.infix_61_61({}, this.sign, FloatingPointSign.plus);
}
};
{
if(((this.significandBitPattern).constructor.infix_62({}, this.significandBitPattern, other.significandBitPattern))) {
return FloatingPointSign.infix_61_61({}, this.sign, FloatingPointSign.minus);
}
};
{
if(((this.significandBitPattern).constructor.infix_60({}, this.significandBitPattern, other.significandBitPattern))) {
return FloatingPointSign.infix_61_61({}, this.sign, FloatingPointSign.plus);
}
};
return true
----Swift.(file).BinaryFloatingPoint.random(in:Range<Self>,using:T)
let generator = generator$inout.get()
const $result = (() => {
preconditionFileLine({}, () => Bool.prefix_33({}, range.isEmpty), () => "Can't get random value with an empty range", '?3', '?3');
const delta = (range.upperBound).constructor.infix_45({}, range.upperBound, range.lowerBound);
preconditionFileLine({}, () => delta._isFinite, () => "There is no uniform distribution on an infinite range", '?3', '?3');
const rand;
{
if((Int.infix_61_61({}, '!unclarifiedGeneric:Self.RawSignificand'.bitWidth, Int.infix_43({}, this.constructor.significandBitCount, 1)))) {
rand = generator.next({$setThis: $val => generator = $val}, );
}
else {
const significandCount = Int.infix_43({}, this.constructor.significandBitCount, 1);
const maxSignificand = (_create('!unclarifiedGeneric:Self.RawSignificand', 'initIntegerLiteral', {}, 1)).constructor.infix_60_60({}, _create('!unclarifiedGeneric:Self.RawSignificand', 'initIntegerLiteral', {}, 1), significandCount);
rand = (generator.next({$setThis: $val => generator = $val}, )).constructor.infix_38({}, generator.next({$setThis: $val => generator = $val}, ), (maxSignificand).constructor.infix_45({}, maxSignificand, _create('!unclarifiedGeneric:Self.RawSignificand', 'initIntegerLiteral', {}, 1)));
}
};
const unitRandom = (_create(this.constructor, 'init', {}, rand)).constructor.infix_42({}, _create(this.constructor, 'init', {}, rand), (this.constructor.ulpOfOne).constructor.infix_47({}, this.constructor.ulpOfOne, _create(this.constructor, 'initIntegerLiteral', {}, 2)));
const randFloat = ((delta).constructor.infix_42({}, delta, unitRandom)).constructor.infix_43({}, (delta).constructor.infix_42({}, delta, unitRandom), range.lowerBound);
{
if(((randFloat).constructor.infix_61_61({}, randFloat, range.upperBound))) {
return this.constructor.randomInUsing({}, range, {get: () => generator, set: $val => generator = $val});
}
};
return randFloat;})()
generator$inout.set(generator)
return $result
----Swift.(file).BinaryFloatingPoint.random(in:Range<Self>)
let g = _create(SystemRandomNumberGenerator, 'init', {}, );
return this.constructor.randomInUsing({}, range, {get: () => g, set: $val => g = $val})
----Swift.(file).BinaryFloatingPoint.random(in:ClosedRange<Self>,using:T)
let generator = generator$inout.get()
const $result = (() => {
preconditionFileLine({}, () => Bool.prefix_33({}, range.isEmpty), () => "Can't get random value with an empty range", '?3', '?3');
const delta = (range.upperBound).constructor.infix_45({}, range.upperBound, range.lowerBound);
preconditionFileLine({}, () => delta._isFinite, () => "There is no uniform distribution on an infinite range", '?3', '?3');
const rand;
{
if((Int.infix_61_61({}, '!unclarifiedGeneric:Self.RawSignificand'.bitWidth, Int.infix_43({}, this.constructor.significandBitCount, 1)))) {
rand = generator.next({$setThis: $val => generator = $val}, );
const tmp = UInt8.infix_38({}, generator.next({$setThis: $val => generator = $val}, ), 1);
{
if((Bool.infix_38_38({}, (rand).constructor.infix_61_61({}, rand, '!unclarifiedGeneric:Self.RawSignificand'.max), () => UInt8.infix_61_61({}, tmp, 1)))) {
return range.upperBound;
}
};
}
else {
const significandCount = Int.infix_43({}, this.constructor.significandBitCount, 1);
const maxSignificand = (_create('!unclarifiedGeneric:Self.RawSignificand', 'initIntegerLiteral', {}, 1)).constructor.infix_60_60({}, _create('!unclarifiedGeneric:Self.RawSignificand', 'initIntegerLiteral', {}, 1), significandCount);
rand = generator.nextUpperBound({$setThis: $val => generator = $val}, (maxSignificand).constructor.infix_43({}, maxSignificand, _create('!unclarifiedGeneric:Self.RawSignificand', 'initIntegerLiteral', {}, 1)));
{
if(((rand).constructor.infix_61_61({}, rand, maxSignificand))) {
return range.upperBound;
}
};
}
};
const unitRandom = (_create(this.constructor, 'init', {}, rand)).constructor.infix_42({}, _create(this.constructor, 'init', {}, rand), (this.constructor.ulpOfOne).constructor.infix_47({}, this.constructor.ulpOfOne, _create(this.constructor, 'initIntegerLiteral', {}, 2)));
const randFloat = ((delta).constructor.infix_42({}, delta, unitRandom)).constructor.infix_43({}, (delta).constructor.infix_42({}, delta, unitRandom), range.lowerBound);
return randFloat;})()
generator$inout.set(generator)
return $result
----Swift.(file).BinaryFloatingPoint.random(in:ClosedRange<Self>)
let g = _create(SystemRandomNumberGenerator, 'init', {}, );
return this.constructor.randomInUsing({}, range, {get: () => g, set: $val => g = $val})
----Swift.(file).Hasher.combine(_:H)
value.hashInto({}, {get: () => this, set: $val => $info.$setThis(_cloneStruct($val))})
----Swift.(file).DefaultIndices.subscript(_:DefaultIndices<Elements>.Index)
return i
----Swift.(file).DefaultIndices.indices
return this
----Swift.(file).FixedWidthInteger.init(_:String)
this.initRadixInt({}, description, 10);
return
----Swift.(file).ExpressibleByIntegerLiteral.init(integerLiteral:Self)
$info.$setThis(_cloneStruct(value));
return
----Swift.(file).AdditiveArithmetic.zero
return _create(this.constructor, 'initIntegerLiteral', {}, 0);
}
static get zero() { return this.zero$get()
----Swift.(file).SignedNumeric.-prefix(_:Self)
let result = operand;
result.negate({$setThis: $val => result = $val}, );
return result
----Swift.(file).SignedNumeric.negate()
$info.$setThis(_cloneStruct((_create(this.constructor, 'initIntegerLiteral', {}, 0)).constructor.infix_45({}, _create(this.constructor, 'initIntegerLiteral', {}, 0), this)))
----Swift.(file).abs(_:T)
{
if((infix_61_61({}, _injectIntoOptional('!unclarifiedGeneric:T'), _injectIntoOptional('!unclarifiedGeneric:T.Magnitude')))) {
return unsafeBitCastTo({}, x.magnitude, '!unclarifiedGeneric:T');
}
};
return ((x).constructor.infix_60({}, x, _create('!unclarifiedGeneric:T', 'initIntegerLiteral', {}, 0)) ? '!unclarifiedGeneric:T'.prefix_45({}, x) : x)
----Swift.(file).AdditiveArithmetic.+prefix(_:Self)
return x
----Swift.(file).BinaryInteger.init()
$info.$setThis(_cloneStruct(_create(this.constructor, 'initIntegerLiteral', {}, 0)));
return
----Swift.(file).BinaryInteger.signum()
return this.constructor.infix_45({}, ((this).constructor.infix_62({}, this, _create(this.constructor, 'initIntegerLiteral', {}, 0)) ? _create(this.constructor, 'initIntegerLiteral', {}, 1) : _create(this.constructor, 'initIntegerLiteral', {}, 0)), ((this).constructor.infix_60({}, this, _create(this.constructor, 'initIntegerLiteral', {}, 0)) ? _create(this.constructor, 'initIntegerLiteral', {}, 1) : _create(this.constructor, 'initIntegerLiteral', {}, 0)))
----Swift.(file).BinaryInteger.quotientAndRemainder(dividingBy:Self)
return {0: (this).constructor.infix_47({}, this, rhs), 1: (this).constructor.infix_37({}, this, rhs)}
----Swift.(file).BinaryInteger.isMultiple(of:Self)
{
if(((other).constructor.infix_61_61({}, other, 0))) {
return (this).constructor.infix_61_61({}, this, 0);
}
};
return ((this.magnitude).constructor.infix_37({}, this.magnitude, other.magnitude)).constructor.infix_61_61({}, (this.magnitude).constructor.infix_37({}, this.magnitude, other.magnitude), 0)
----Swift.(file).BinaryInteger.&infix(_:Self,_:Self)
let lhs_dupl = lhs;
(rhs).constructor.infix_38_61({}, {get: () => lhs_dupl, set: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).BinaryInteger.|infix(_:Self,_:Self)
let lhs_dupl = lhs;
(rhs).constructor.infix_124_61({}, {get: () => lhs_dupl, set: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).BinaryInteger.^infix(_:Self,_:Self)
let lhs_dupl = lhs;
(rhs).constructor.infix_94_61({}, {get: () => lhs_dupl, set: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).BinaryInteger.>>infix(_:Self,_:RHS)
let r = lhs;
this.constructor.infix_62_62_61({}, {get: () => r, set: $val => r = $val}, rhs);
return r
----Swift.(file).BinaryInteger.<<infix(_:Self,_:RHS)
let r = lhs;
this.constructor.infix_60_60_61({}, {get: () => r, set: $val => r = $val}, rhs);
return r
----Swift.(file).BinaryInteger.distance(to:Self)
{
if((Bool.prefix_33({}, this.constructor.isSigned))) {
{
if(((this).constructor.infix_62({}, this, other))) {
{const $ifLet0 = _create(Int, 'initExactly', {}, (this).constructor.infix_45({}, this, other))
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return Int.prefix_45({}, result);
}
};
}
else {
{const $ifLet0 = _create(Int, 'initExactly', {}, (other).constructor.infix_45({}, other, this))
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return result;
}
};
}
};
}
else {
const isNegative = (this).constructor.infix_60({}, this, _create(this.constructor, 'initIntegerLiteral', {}, 0));
{
if((Bool.infix_61_61({}, isNegative, (other).constructor.infix_60({}, other, _create(this.constructor, 'initIntegerLiteral', {}, 0))))) {
{const $ifLet0 = _create(Int, 'initExactly', {}, (other).constructor.infix_45({}, other, this))
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return result;
}
};
}
else {
{const $ifLet0 = _create(Int, 'initExactly', {}, (this.magnitude).constructor.infix_43({}, this.magnitude, other.magnitude))
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return (isNegative ? result : Int.prefix_45({}, result));
}
};
}
};
}
};
preconditionFailureFileLine({}, () => "Distance is not representable in Int", '?3', '?3')
----Swift.(file).BinaryInteger.advanced(by:Int)
{
if((Bool.prefix_33({}, this.constructor.isSigned))) {
return (Int.infix_60({}, n, 0) ? (this).constructor.infix_45({}, this, _create(this.constructor, 'init', {}, Int.prefix_45({}, n))) : (this).constructor.infix_43({}, this, _create(this.constructor, 'init', {}, n)));
}
};
{
if((Bool.infix_61_61({}, (this).constructor.infix_60({}, this, _create(this.constructor, 'initIntegerLiteral', {}, 0)), Int.infix_60({}, n, _create(this.constructor, 'initIntegerLiteral', {}, 0))))) {
return (this).constructor.infix_43({}, this, _create(this.constructor, 'init', {}, n));
}
};
return ((this.magnitude).constructor.infix_60({}, this.magnitude, n.magnitude) ? _create(this.constructor, 'init', {}, Int.infix_43({}, _create(Int, 'init', {}, this), n)) : (this).constructor.infix_43({}, this, _create(this.constructor, 'init', {}, n)))
----Swift.(file).BinaryInteger.==infix(_:Self,_:Other)
const lhsNegative = Bool.infix_38_38({}, this.constructor.isSigned, () => (lhs).constructor.infix_60({}, lhs, _create(this.constructor, 'initIntegerLiteral', {}, 0)));
const rhsNegative = Bool.infix_38_38({}, '!unclarifiedGeneric:Other'.isSigned, () => (rhs).constructor.infix_60({}, rhs, _create('!unclarifiedGeneric:Other', 'initIntegerLiteral', {}, 0)));
{
if((Bool.infix_33_61({}, lhsNegative, rhsNegative))) {
return false;
}
};
{
if((Int.infix_60({}, lhs.bitWidth, rhs.bitWidth))) {
return (_create('!unclarifiedGeneric:Other', 'initTruncatingIfNeeded', {}, lhs)).constructor.infix_61_61({}, _create('!unclarifiedGeneric:Other', 'initTruncatingIfNeeded', {}, lhs), rhs);
}
};
{
if((Int.infix_62({}, lhs.bitWidth, rhs.bitWidth))) {
return (lhs).constructor.infix_61_61({}, lhs, _create(this.constructor, 'initTruncatingIfNeeded', {}, rhs));
}
};
{
if((this.constructor.isSigned)) {
return (_create('!unclarifiedGeneric:Other', 'initTruncatingIfNeeded', {}, lhs)).constructor.infix_61_61({}, _create('!unclarifiedGeneric:Other', 'initTruncatingIfNeeded', {}, lhs), rhs);
}
};
return (lhs).constructor.infix_61_61({}, lhs, _create(this.constructor, 'initTruncatingIfNeeded', {}, rhs))
----Swift.(file).BinaryInteger.!=infix(_:Self,_:Other)
return Bool.prefix_33({}, (lhs).constructor.infix_61_61({}, lhs, rhs))
----Swift.(file).BinaryInteger.<infix(_:Self,_:Other)
const lhsNegative = Bool.infix_38_38({}, this.constructor.isSigned, () => (lhs).constructor.infix_60({}, lhs, _create(this.constructor, 'initIntegerLiteral', {}, 0)));
const rhsNegative = Bool.infix_38_38({}, '!unclarifiedGeneric:Other'.isSigned, () => (rhs).constructor.infix_60({}, rhs, _create('!unclarifiedGeneric:Other', 'initIntegerLiteral', {}, 0)));
{
if((Bool.infix_33_61({}, lhsNegative, rhsNegative))) {
return lhsNegative;
}
};
{
if((Bool.infix_38_38({}, (lhs).constructor.infix_61_61({}, lhs, _create(this.constructor, 'initIntegerLiteral', {}, 0)), () => (rhs).constructor.infix_61_61({}, rhs, _create('!unclarifiedGeneric:Other', 'initIntegerLiteral', {}, 0))))) {
return false;
}
};
const rhsAsSelf = _create(this.constructor, 'initTruncatingIfNeeded', {}, rhs);
const rhsAsSelfNegative = (rhsAsSelf).constructor.infix_60({}, rhsAsSelf, _create(this.constructor, 'initIntegerLiteral', {}, 0));
{
if((Bool.infix_38_38({}, (_create('!unclarifiedGeneric:Other', 'initTruncatingIfNeeded', {}, rhsAsSelf)).constructor.infix_61_61({}, _create('!unclarifiedGeneric:Other', 'initTruncatingIfNeeded', {}, rhsAsSelf), rhs), () => Bool.infix_61_61({}, rhsNegative, rhsAsSelfNegative)))) {
return (lhs).constructor.infix_60({}, lhs, rhsAsSelf);
}
};
return (_create('!unclarifiedGeneric:Other', 'initTruncatingIfNeeded', {}, lhs)).constructor.infix_60({}, _create('!unclarifiedGeneric:Other', 'initTruncatingIfNeeded', {}, lhs), rhs)
----Swift.(file).BinaryInteger.<=infix(_:Self,_:Other)
return Bool.prefix_33({}, (rhs).constructor.infix_60({}, rhs, lhs))
----Swift.(file).BinaryInteger.>=infix(_:Self,_:Other)
return Bool.prefix_33({}, (lhs).constructor.infix_60({}, lhs, rhs))
----Swift.(file).BinaryInteger.>infix(_:Self,_:Other)
return (rhs).constructor.infix_60({}, rhs, lhs)
----Swift.(file).BinaryInteger.!=infix(_:Self,_:Self)
return Bool.prefix_33({}, (lhs).constructor.infix_61_61({}, lhs, rhs))
----Swift.(file).BinaryInteger.<=infix(_:Self,_:Self)
return Bool.prefix_33({}, (rhs).constructor.infix_60({}, rhs, lhs))
----Swift.(file).BinaryInteger.>=infix(_:Self,_:Self)
return Bool.prefix_33({}, (lhs).constructor.infix_60({}, lhs, rhs))
----Swift.(file).BinaryInteger.>infix(_:Self,_:Self)
return (rhs).constructor.infix_60({}, rhs, lhs)
----Swift.(file).FixedWidthInteger.bitWidth
return this.constructor.bitWidth
----Swift.(file).FixedWidthInteger.init(littleEndian:Self)
$info.$setThis(_cloneStruct(value));
return
----Swift.(file).FixedWidthInteger.init(bigEndian:Self)
$info.$setThis(_cloneStruct(value.byteSwapped));
return
----Swift.(file).FixedWidthInteger.littleEndian
return this
----Swift.(file).FixedWidthInteger.bigEndian
return this.byteSwapped
----Swift.(file).FixedWidthInteger.&>>infix(_:Self,_:Self)
let lhs_dupl = lhs;
(rhs).constructor.infix_38_62_62_61({}, {get: () => lhs_dupl, set: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).FixedWidthInteger.&>>infix(_:Self,_:Other)
return (lhs).constructor.infix_38_62_62({}, lhs, _create(this.constructor, 'initTruncatingIfNeeded', {}, rhs))
----Swift.(file).FixedWidthInteger.&>>=infix(_:Self,_:Other)
let lhs = lhs$inout.get()
const $result = (() => {
lhs = (lhs).constructor.infix_38_62_62({}, lhs, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).FixedWidthInteger.&<<infix(_:Self,_:Self)
let lhs_dupl = lhs;
(rhs).constructor.infix_38_60_60_61({}, {get: () => lhs_dupl, set: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).FixedWidthInteger.&<<infix(_:Self,_:Other)
return (lhs).constructor.infix_38_60_60({}, lhs, _create(this.constructor, 'initTruncatingIfNeeded', {}, rhs))
----Swift.(file).FixedWidthInteger.&<<=infix(_:Self,_:Other)
let lhs = lhs$inout.get()
const $result = (() => {
lhs = (lhs).constructor.infix_38_60_60({}, lhs, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).FixedWidthInteger.random(in:Range<Self>,using:T)
let generator = generator$inout.get()
const $result = (() => {
preconditionFileLine({}, () => Bool.prefix_33({}, range.isEmpty), () => "Can't get random value with an empty range", '?3', '?3');
const delta = _create('!unclarifiedGeneric:Self.Magnitude', 'initTruncatingIfNeeded', {}, (range.upperBound).constructor.infix_38_45({}, range.upperBound, range.lowerBound));
return _create(this.constructor, 'initTruncatingIfNeeded', {}, (_create('!unclarifiedGeneric:Self.Magnitude', 'initTruncatingIfNeeded', {}, range.lowerBound)).constructor.infix_38_43({}, _create('!unclarifiedGeneric:Self.Magnitude', 'initTruncatingIfNeeded', {}, range.lowerBound), generator.nextUpperBound({$setThis: $val => generator = $val}, delta)));})()
generator$inout.set(generator)
return $result
----Swift.(file).FixedWidthInteger.random(in:Range<Self>)
let g = _create(SystemRandomNumberGenerator, 'init', {}, );
return this.constructor.randomInUsing({}, range, {get: () => g, set: $val => g = $val})
----Swift.(file).FixedWidthInteger.random(in:ClosedRange<Self>,using:T)
let generator = generator$inout.get()
const $result = (() => {
preconditionFileLine({}, () => Bool.prefix_33({}, range.isEmpty), () => "Can't get random value with an empty range", '?3', '?3');
let delta = _create('!unclarifiedGeneric:Self.Magnitude', 'initTruncatingIfNeeded', {}, (range.upperBound).constructor.infix_38_45({}, range.upperBound, range.lowerBound));
{
if(((delta).constructor.infix_61_61({}, delta, '!unclarifiedGeneric:Self.Magnitude'.max))) {
return _create(this.constructor, 'initTruncatingIfNeeded', {}, generator.next({$setThis: $val => generator = $val}, ));
}
};
(_create('!unclarifiedGeneric:Self.Magnitude', 'initIntegerLiteral', {}, 1)).constructor.infix_43_61({}, {get: () => delta, set: $val => delta = $val}, _create('!unclarifiedGeneric:Self.Magnitude', 'initIntegerLiteral', {}, 1));
return _create(this.constructor, 'initTruncatingIfNeeded', {}, (_create('!unclarifiedGeneric:Self.Magnitude', 'initTruncatingIfNeeded', {}, range.lowerBound)).constructor.infix_38_43({}, _create('!unclarifiedGeneric:Self.Magnitude', 'initTruncatingIfNeeded', {}, range.lowerBound), generator.nextUpperBound({$setThis: $val => generator = $val}, delta)));})()
generator$inout.set(generator)
return $result
----Swift.(file).FixedWidthInteger.random(in:ClosedRange<Self>)
let g = _create(SystemRandomNumberGenerator, 'init', {}, );
return this.constructor.randomInUsing({}, range, {get: () => g, set: $val => g = $val})
----Swift.(file).FixedWidthInteger.~prefix(_:Self)
return ((_create(this.constructor, 'initIntegerLiteral', {}, 0)).constructor.infix_38_45({}, _create(this.constructor, 'initIntegerLiteral', {}, 0), x)).constructor.infix_38_45({}, (_create(this.constructor, 'initIntegerLiteral', {}, 0)).constructor.infix_38_45({}, _create(this.constructor, 'initIntegerLiteral', {}, 0), x), _create(this.constructor, 'initIntegerLiteral', {}, 1))
----Swift.(file).FixedWidthInteger.>>infix(_:Self,_:Other)
let lhs_dupl = lhs;
this._nonMaskingRightShiftGeneric({}, {get: () => lhs_dupl, set: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).FixedWidthInteger.>>=infix(_:Self,_:Other)
let lhs = lhs$inout.get()
const $result = (() => {
this._nonMaskingRightShiftGeneric({}, {get: () => lhs, set: $val => lhs = $val}, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).FixedWidthInteger.<<infix(_:Self,_:Other)
let lhs_dupl = lhs;
this._nonMaskingLeftShiftGeneric({}, {get: () => lhs_dupl, set: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).FixedWidthInteger.<<=infix(_:Self,_:Other)
let lhs = lhs$inout.get()
const $result = (() => {
this._nonMaskingLeftShiftGeneric({}, {get: () => lhs, set: $val => lhs = $val}, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).FixedWidthInteger.init(truncatingIfNeeded:T)
{
if((Int.infix_60_61({}, this.constructor.bitWidth, Int.bitWidth))) {
$info.$setThis(_cloneStruct(_create(this.constructor, 'init_truncatingBitsUInt', {}, source._lowWord)));
}
else {
const neg = (source).constructor.infix_60({}, source, _create('!unclarifiedGeneric:T', 'initIntegerLiteral', {}, 0));
let result = (neg ? this.constructor.prefix_126({}, _create(this.constructor, 'initIntegerLiteral', {}, 0)) : _create(this.constructor, 'initIntegerLiteral', {}, 0));
let shift = _create(this.constructor, 'initIntegerLiteral', {}, 0);
const width = _create(this.constructor, 'init_truncatingBitsUInt', {}, this.constructor.bitWidth._lowWord);
{
let $word$generator = source.words.makeIterator({}, );
while(true) {
const $ifLet0 = $word$generator.next({$setThis: $val => $word$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let word = $ifLet0[0]
{
if(!(((shift).constructor.infix_60({}, shift, width)))) {
break;
}
};
((_create(this.constructor, 'init_truncatingBitsUInt', {}, (neg ? UInt.prefix_126({}, word) : word))).constructor.infix_38_60_60({}, _create(this.constructor, 'init_truncatingBitsUInt', {}, (neg ? UInt.prefix_126({}, word) : word)), shift)).constructor.infix_94_61({}, {get: () => result, set: $val => result = $val}, (_create(this.constructor, 'init_truncatingBitsUInt', {}, (neg ? UInt.prefix_126({}, word) : word))).constructor.infix_38_60_60({}, _create(this.constructor, 'init_truncatingBitsUInt', {}, (neg ? UInt.prefix_126({}, word) : word)), shift));
(_create(this.constructor, 'init_truncatingBitsUInt', {}, Int.bitWidth._lowWord)).constructor.infix_43_61({}, {get: () => shift, set: $val => shift = $val}, _create(this.constructor, 'init_truncatingBitsUInt', {}, Int.bitWidth._lowWord));
}
};
$info.$setThis(_cloneStruct(result));
}
};
return
----Swift.(file).FixedWidthInteger.&+infix(_:Self,_:Self)
return lhs.addingReportingOverflow({}, rhs)["0"]
----Swift.(file).FixedWidthInteger.&+=infix(_:Self,_:Self)
let lhs = lhs$inout.get()
const $result = (() => {
lhs = (lhs).constructor.infix_38_43({}, lhs, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).FixedWidthInteger.&-infix(_:Self,_:Self)
return lhs.subtractingReportingOverflow({}, rhs)["0"]
----Swift.(file).FixedWidthInteger.&-=infix(_:Self,_:Self)
let lhs = lhs$inout.get()
const $result = (() => {
lhs = (lhs).constructor.infix_38_45({}, lhs, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).FixedWidthInteger.&*infix(_:Self,_:Self)
return lhs.multipliedReportingOverflowBy({}, rhs)["0"]
----Swift.(file).FixedWidthInteger.&*=infix(_:Self,_:Self)
let lhs = lhs$inout.get()
const $result = (() => {
lhs = (lhs).constructor.infix_38_42({}, lhs, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).UnsignedInteger.magnitude
return this
----Swift.(file).UnsignedInteger.isSigned
return false;
}
static get isSigned() { return this.isSigned$get()
----Swift.(file).UnsignedInteger.init(_:T)
{
if(('!unclarifiedGeneric:T'.isSigned)) {
preconditionFileLine({}, () => (source).constructor.infix_62_61({}, source, _create('!unclarifiedGeneric:T', 'initIntegerLiteral', {}, 0)), () => "Negative value is not representable", '?3', '?3');
}
};
{
if((Int.infix_62_61({}, source.bitWidth, this.constructor.bitWidth))) {
preconditionFileLine({}, () => (source).constructor.infix_60_61({}, source, this.constructor.max), () => "Not enough bits to represent the passed value", '?3', '?3');
}
};
this.initTruncatingIfNeeded({}, source);
return
----Swift.(file).UnsignedInteger.init(exactly:T)
{
if((Bool.infix_38_38({}, '!unclarifiedGeneric:T'.isSigned, () => (source).constructor.infix_60({}, source, _create('!unclarifiedGeneric:T', 'initIntegerLiteral', {}, 0))))) {
return (this.$failed = true);
}
};
{
if((Bool.infix_38_38({}, Int.infix_62_61({}, source.bitWidth, this.constructor.bitWidth), () => (source).constructor.infix_62({}, source, this.constructor.max)))) {
return (this.$failed = true);
}
};
this.initTruncatingIfNeeded({}, source);
return
----Swift.(file).UnsignedInteger.max
return this.constructor.prefix_126({}, _create(this.constructor, 'initIntegerLiteral', {}, 0));
}
static get max() { return this.max$get()
----Swift.(file).UnsignedInteger.min
return _create(this.constructor, 'initIntegerLiteral', {}, 0);
}
static get min() { return this.min$get()
----Swift.(file).SignedInteger.isSigned
return true;
}
static get isSigned() { return this.isSigned$get()
----Swift.(file).SignedInteger.init(_:T)
{
if((Bool.infix_38_38({}, '!unclarifiedGeneric:T'.isSigned, () => Int.infix_62({}, source.bitWidth, this.constructor.bitWidth)))) {
preconditionFileLine({}, () => (source).constructor.infix_62_61({}, source, this.constructor.min), () => "Not enough bits to represent a signed value", '?3', '?3');
}
};
{
if((Bool.infix_124_124({}, Int.infix_62({}, source.bitWidth, this.constructor.bitWidth), () => Bool.infix_38_38({}, Int.infix_61_61({}, source.bitWidth, this.constructor.bitWidth), () => Bool.prefix_33({}, '!unclarifiedGeneric:T'.isSigned))))) {
preconditionFileLine({}, () => (source).constructor.infix_60_61({}, source, this.constructor.max), () => "Not enough bits to represent the passed value", '?3', '?3');
}
};
this.initTruncatingIfNeeded({}, source);
return
----Swift.(file).SignedInteger.init(exactly:T)
{
if((Bool.infix_38_38({}, Bool.infix_38_38({}, '!unclarifiedGeneric:T'.isSigned, () => Int.infix_62({}, source.bitWidth, this.constructor.bitWidth)), () => (source).constructor.infix_60({}, source, this.constructor.min)))) {
return (this.$failed = true);
}
};
{
if((Bool.infix_38_38({}, Bool.infix_124_124({}, Int.infix_62({}, source.bitWidth, this.constructor.bitWidth), () => Bool.infix_38_38({}, Int.infix_61_61({}, source.bitWidth, this.constructor.bitWidth), () => Bool.prefix_33({}, '!unclarifiedGeneric:T'.isSigned))), () => (source).constructor.infix_62({}, source, this.constructor.max)))) {
return (this.$failed = true);
}
};
this.initTruncatingIfNeeded({}, source);
return
----Swift.(file).SignedInteger.max
return this.constructor.prefix_126({}, this.min);
}
static get max() { return this.max$get()
----Swift.(file).SignedInteger.min
return (this.constructor._highBitIndex).constructor.infix_38_60_60({}, _create(this.constructor, 'initIntegerLiteral', {}, -1), this.constructor._highBitIndex);
}
static get min() { return this.min$get()
----Swift.(file).SignedInteger.isMultiple(of:Self)
{
if(((other).constructor.infix_61_61({}, other, 0))) {
return (this).constructor.infix_61_61({}, this, 0);
}
};
{
if(((other).constructor.infix_61_61({}, other, -1))) {
return true;
}
};
return ((this).constructor.infix_37({}, this, other)).constructor.infix_61_61({}, (this).constructor.infix_37({}, this, other), 0)
----Swift.(file).numericCast(_:T)
return _create('!unclarifiedGeneric:U', 'init', {}, x)
----Swift.(file).FixedWidthInteger.>>infix(_:Self,_:Self)
let lhs_dupl = lhs;
this._nonMaskingRightShiftGeneric({}, {get: () => lhs_dupl, set: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).FixedWidthInteger.>>=infix(_:Self,_:Self)
let lhs = lhs$inout.get()
const $result = (() => {
this._nonMaskingRightShiftGeneric({}, {get: () => lhs, set: $val => lhs = $val}, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).FixedWidthInteger.<<infix(_:Self,_:Self)
let lhs_dupl = lhs;
this._nonMaskingLeftShiftGeneric({}, {get: () => lhs_dupl, set: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).FixedWidthInteger.<<=infix(_:Self,_:Self)
let lhs = lhs$inout.get()
const $result = (() => {
this._nonMaskingLeftShiftGeneric({}, {get: () => lhs, set: $val => lhs = $val}, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).FixedWidthInteger.addWithOverflow(_:Self,_:Self)
const $tuple = lhs.addingReportingOverflow({}, rhs), partialValue = $tuple && $tuple[0], overflow = $tuple && $tuple[1];
return {0: partialValue, 1: overflow}
----Swift.(file).FixedWidthInteger.subtractWithOverflow(_:Self,_:Self)
const $tuple = lhs.subtractingReportingOverflow({}, rhs), partialValue = $tuple && $tuple[0], overflow = $tuple && $tuple[1];
return {0: partialValue, 1: overflow}
----Swift.(file).FixedWidthInteger.multiplyWithOverflow(_:Self,_:Self)
const $tuple = lhs.multipliedReportingOverflowBy({}, rhs), partialValue = $tuple && $tuple[0], overflow = $tuple && $tuple[1];
return {0: partialValue, 1: overflow}
----Swift.(file).FixedWidthInteger.divideWithOverflow(_:Self,_:Self)
const $tuple = lhs.dividedReportingOverflowBy({}, rhs), partialValue = $tuple && $tuple[0], overflow = $tuple && $tuple[1];
return {0: partialValue, 1: overflow}
----Swift.(file).FixedWidthInteger.remainderWithOverflow(_:Self,_:Self)
const $tuple = lhs.remainderReportingOverflowDividingBy({}, rhs), partialValue = $tuple && $tuple[0], overflow = $tuple && $tuple[1];
return {0: partialValue, 1: overflow}
----Swift.(file).BinaryInteger.addWithOverflow(_:Self,_:Self)
fatalErrorFileLine({}, () => "Unavailable", '?3', '?3')
----Swift.(file).BinaryInteger.subtractWithOverflow(_:Self,_:Self)
fatalErrorFileLine({}, () => "Unavailable", '?3', '?3')
----Swift.(file).BinaryInteger.multiplyWithOverflow(_:Self,_:Self)
fatalErrorFileLine({}, () => "Unavailable", '?3', '?3')
----Swift.(file).BinaryInteger.divideWithOverflow(_:Self,_:Self)
fatalErrorFileLine({}, () => "Unavailable", '?3', '?3')
----Swift.(file).BinaryInteger.remainderWithOverflow(_:Self,_:Self)
fatalErrorFileLine({}, () => "Unavailable", '?3', '?3')
----Swift.(file).SignedInteger.&+infix(_:Self,_:Self)
return this._maskingAdd({}, lhs, rhs)
----Swift.(file).SignedInteger.&-infix(_:Self,_:Self)
return this._maskingSubtract({}, lhs, rhs)
----Swift.(file).SignedInteger.&+infix(_:Self,_:Self)
return this._maskingAdd({}, lhs, rhs)
----Swift.(file).SignedInteger.&-infix(_:Self,_:Self)
return this._maskingSubtract({}, lhs, rhs)
----Swift.(file).Sequence.joined(separator:Separator)
return _create(JoinedSequence, 'initBaseSeparator', {}, this, separator)
----Swift.(file).AnyKeyPath.hashValue
return _hashValueFor({}, this)
----Swift.(file).KeyValuePairs.startIndex
return 0
----Swift.(file).LazyCollectionProtocol.lazy
return this._elements.lazy
----Swift.(file).LazyCollectionProtocol.lazy
return this._elements
----Swift.(file).LazySequenceProtocol.lazy
return this._elements.lazy
----Swift.(file).LazySequenceProtocol.lazy
return this._elements
----Swift.(file).withExtendedLifetime(_:T,_:() throws -> Result)
let $defer = () => {
_fixLifetime({}, x);
}
try {;
return body({}, );}catch($error){$defer({}, );throw $error}$defer({}, )
----Swift.(file).withExtendedLifetime(_:T,_:(T) throws -> Result)
let $defer = () => {
_fixLifetime({}, x);
}
try {;
return body({}, x);}catch($error){$defer({}, );throw $error}$defer({}, )
----Swift.(file).ManagedBuffer.withUnsafeMutablePointerToHeader(_:(UnsafeMutablePointer<Header>) throws -> R)
return this.withUnsafeMutablePointers({}, (($info, v, _) => body({}, v)))
----Swift.(file).ManagedBuffer.withUnsafeMutablePointerToElements(_:(UnsafeMutablePointer<Element>) throws -> R)
return this.withUnsafeMutablePointers({}, (($info, $0, $1) => body({}, $1)))
----Swift.(file).ManagedBufferPointer.withUnsafeMutablePointerToHeader(_:(UnsafeMutablePointer<Header>) throws -> R)
return this.withUnsafeMutablePointers({}, (($info, v, _) => body({}, v)))
----Swift.(file).ManagedBufferPointer.withUnsafeMutablePointerToElements(_:(UnsafeMutablePointer<Element>) throws -> R)
return this.withUnsafeMutablePointers({}, (($info, $0, $1) => body({}, $1)))
----Swift.(file).MemoryLayout.size(ofValue:T)
return MemoryLayout.size
----Swift.(file).MemoryLayout.stride(ofValue:T)
return MemoryLayout.stride
----Swift.(file).MemoryLayout.alignment(ofValue:T)
return MemoryLayout.alignment
----Swift.(file).Range.init(_:Range<Bound>)
$info.$setThis(_cloneStruct(_cloneStruct(other)));
return
----Swift.(file).ClosedRange.init(_:ClosedRange<Bound>)
$info.$setThis(_cloneStruct(_cloneStruct(other)));
return
----Swift.(file).LazySequenceProtocol.flatMap(_:(Self.Elements.Element) -> ElementOfResult?)
return this.compactMap({}, transform)
----Swift.(file).String.characters
return this
----Swift.(file).String.withMutableCharacters(_:(inout String) -> R)
return body({}, {get: () => this, set: $val => $info.$setThis(_cloneStruct($val))})
----Swift.(file).UnicodeScalarView.customPlaygroundQuickLook
return _PlaygroundQuickLook._text({}, this.description)
----Swift.(file).UTF16View.customPlaygroundQuickLook
return _PlaygroundQuickLook._text({}, this.description)
----Swift.(file).UTF8View.customPlaygroundQuickLook
return _PlaygroundQuickLook._text({}, this.description)
----Swift.(file).Substring.characters
return this
----Swift.(file).Substring.withMutableCharacters(_:(inout Substring) -> R)
return body({}, {get: () => this, set: $val => $info.$setThis(_cloneStruct($val))})
----Swift.(file).Substring.customPlaygroundQuickLook
return _create(String, 'initSubstring', {}, this).customPlaygroundQuickLook
----Swift.(file).Collection.index(_:Self.Index,offsetBy:T)
return this.indexOffsetBy({}, i, _create(Int, 'init', {}, n))
----Swift.(file).Collection.formIndex(_:Self.Index,offsetBy:T)
let i = i$inout.get()
const $result = (() => {
return this.formIndexOffsetBy({}, {get: () => i, set: $val => i = $val}, _create(Int, 'init', {}, n));})()
i$inout.set(i)
return $result
----Swift.(file).Collection.index(_:Self.Index,offsetBy:T,limitedBy:Self.Index)
return this.indexOffsetByLimitedBy({}, i, _create(Int, 'init', {}, n), limit)
----Swift.(file).Collection.formIndex(_:Self.Index,offsetBy:T,limitedBy:Self.Index)
let i = i$inout.get()
const $result = (() => {
return this.formIndexOffsetByLimitedBy({}, {get: () => i, set: $val => i = $val}, _create(Int, 'init', {}, n), limit);})()
i$inout.set(i)
return $result
----Swift.(file).Collection.distance(from:Self.Index,to:Self.Index)
return numericCast({}, this.distanceFromTo({}, start, end))
----Swift.(file).UnsafeMutablePointer.initialize(to:Pointee,count:Int)
this.initializeRepeatingCount({}, newValue, count)
----Swift.(file).UnsafeMutablePointer.deinitialize()
return this.deinitializeCount({}, 1)
----Swift.(file).UnsafeMutablePointer.deallocate(capacity:Int)
this.deallocate({}, )
----Swift.(file).UnsafeMutablePointer.initialize(from:C)
const buf = _create(UnsafeMutableBufferPointer, 'initStartOptionalCountInt', {}, _injectIntoOptional(/*pointer_to_pointer*/this), numericCast({}, source.count));
let $tuple = source._copyContentsInitializing({}, buf), remainders = $tuple && $tuple[0], writtenUpTo = $tuple && $tuple[1];
preconditionFileLine({}, () => Optional.infix_61_61({}, remainders.next({$setThis: $val => remainders = $val}, ), _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {})), () => "rhs underreported its count", '?3', '?3');
preconditionFileLine({}, () => Int.infix_61_61({}, writtenUpTo, buf.endIndex), () => "rhs overreported its count", '?3', '?3')
----Swift.(file).UnsafeMutableRawPointer.allocate(bytes:Int,alignedTo:Int)
return UnsafeMutableRawPointer.allocateByteCountAlignment({}, size, alignment)
----Swift.(file).UnsafeMutableRawPointer.deallocate(bytes:Int,alignedTo:Int)
this.deallocate({}, )
----Swift.(file).UnsafeMutableRawPointer.copyBytes(from:UnsafeRawPointer,count:Int)
this.copyMemoryFromByteCount({}, source, count)
----Swift.(file).UnsafeMutableRawPointer.initializeMemory(as:T.Type,at:Int,count:Int,to:T)
return UnsafeMutableRawPointer.infix_43({}, this, Int.infix_42({}, offset, MemoryLayout.stride)).initializeMemoryAsRepeatingCount({}, type, repeatedValue, count)
----Swift.(file).UnsafeMutableRawPointer.initializeMemory(as:C.Element.Type,from:C)
let ptr = _cloneStruct(this);
{
let $element$generator = source.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
ptr.initializeMemoryAsRepeatingCount({}, '!unclarifiedGeneric:C.Element', _element, 1);
UnsafeMutableRawPointer.infix_43_61({}, {get: () => ptr, set: $val => ptr = $val}, MemoryLayout.stride);
}
};
return _create(UnsafeMutablePointer, 'initRawPointer', {}, this._rawValue)
----Swift.(file).UnsafeMutableRawBufferPointer.allocate(count:Int)
return UnsafeMutableRawBufferPointer.allocateByteCountAlignment({}, count, MemoryLayout.alignment)
----Swift.(file).UnsafeMutableRawBufferPointer.copyBytes(from:UnsafeRawBufferPointer)
this.copyMemoryFrom({}, source)
----Swift.(file).Sequence.flatMap(_:(Self.Element) throws -> ElementOfResult?)
return this._compactMap({}, transform)
----Swift.(file).Sequence.flatMap(_:(Self.Element) throws -> String)
return this.mapSwift({}, transform)
----Swift.(file).Collection.flatMap(_:(Self.Element) throws -> String?)
return this._compactMap({}, transform)
----Swift.(file).Collection.index(where:(Self.Element) throws -> Bool)
return this.firstIndexWhere({}, _predicate)
----Swift.(file).Collection.index(of:Self.Element)
return this.firstIndexOf({}, _element)
----Swift.(file).MutableCollection.withContiguousMutableStorageIfAvailable(_:(inout UnsafeMutableBufferPointer<Self.Element>) throws -> R)
return Optional.none
----Swift.(file).MutableCollection.swapAt(_:Self.Index,_:Self.Index)
{
if(!(((i).constructor.infix_33_61({}, i, j)))) {
return ;
}
};
const tmp = this.subscript$get({}, i);
this.subscript$set({$setThis: $val => $info.$setThis(_cloneStruct($val))}, this.subscript$get({}, j), i);
this.subscript$set({$setThis: $val => $info.$setThis(_cloneStruct($val))}, tmp, j)
----Swift.(file)._SwiftNewtypeWrapper.hashValue
return this.rawValue.hashValue
----Swift.(file)._SwiftNewtypeWrapper.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.rawValue);})()
hasher$inout.set(hasher)
return $result
----Swift.(file).ObjectIdentifier.<infix(_:ObjectIdentifier,_:ObjectIdentifier)
return UInt.infix_60({}, _create(UInt, 'initBitPatternObjectIdentifier', {}, lhs), _create(UInt, 'initBitPatternObjectIdentifier', {}, rhs))
----Swift.(file).Int.init(bitPattern:ObjectIdentifier)
this.initBitPatternUInt({}, _create(UInt, 'initBitPatternObjectIdentifier', {}, objectID));
return
----Swift.(file).OptionSet.union(_:Self)
let r = _create(this.constructor, 'initRawValue', {}, this.rawValue);
r.formUnion({$setThis: $val => r = $val}, other);
return r
----Swift.(file).OptionSet.intersection(_:Self)
let r = _create(this.constructor, 'initRawValue', {}, this.rawValue);
r.formIntersection({$setThis: $val => r = $val}, other);
return r
----Swift.(file).OptionSet.symmetricDifference(_:Self)
let r = _create(this.constructor, 'initRawValue', {}, this.rawValue);
r.formSymmetricDifference({$setThis: $val => r = $val}, other);
return r
----Swift.(file).OptionSet.contains(_:Self)
return this.isSupersetOf({}, member)
----Swift.(file).OptionSet.insert(_:Self.Element)
const oldMember = this.intersection({}, newMember);
const shouldInsert = (oldMember).constructor.infix_33_61({}, oldMember, newMember);
const result = {0: shouldInsert, 1: (shouldInsert ? newMember : oldMember)};
{
if((shouldInsert)) {
this.formUnion({$setThis: $val => $info.$setThis(_cloneStruct($val))}, newMember);
}
};
return result
----Swift.(file).OptionSet.remove(_:Self.Element)
const r = (this.isSupersetOf({}, member) ? _create(Optional, 'init', {}, member) : Optional.none);
this.subtract({$setThis: $val => $info.$setThis(_cloneStruct($val))}, member);
return r
----Swift.(file).OptionSet.update(with:Self.Element)
const r = this.intersection({}, newMember);
this.formUnion({$setThis: $val => $info.$setThis(_cloneStruct($val))}, newMember);
return (r.isEmpty ? Optional.none : _injectIntoOptional(r))
----Swift.(file).OptionSet.init()
this.initRawValue({}, _create('!unclarifiedGeneric:Self.RawValue', 'initIntegerLiteral', {}, 0));
return
----Swift.(file).OptionSet.formUnion(_:Self)
$info.$setThis(_cloneStruct(_create(this.constructor, 'initRawValue', {}, (this.rawValue).constructor.infix_124({}, this.rawValue, other.rawValue))))
----Swift.(file).OptionSet.formIntersection(_:Self)
$info.$setThis(_cloneStruct(_create(this.constructor, 'initRawValue', {}, (this.rawValue).constructor.infix_38({}, this.rawValue, other.rawValue))))
----Swift.(file).OptionSet.formSymmetricDifference(_:Self)
$info.$setThis(_cloneStruct(_create(this.constructor, 'initRawValue', {}, (this.rawValue).constructor.infix_94({}, this.rawValue, other.rawValue))))
----Swift.(file).Optional.init(_:Wrapped)
$info.$setThis(_cloneStruct(Optional.some({}, some)));
return
----Swift.(file).Optional.map(_:(Wrapped) throws -> U)
const $match = this
if((($match.rawValue == Optional.some().rawValue))) {
const y = $match[0]
return Optional.some({}, transform({}, y));
}
else if((($match.rawValue == Optional.none.rawValue))) {
return Optional.none;
}
----Swift.(file).Optional.flatMap(_:(Wrapped) throws -> U?)
const $match = this
if((($match.rawValue == Optional.some().rawValue))) {
const y = $match[0]
return transform({}, y);
}
else if((($match.rawValue == Optional.none.rawValue))) {
return Optional.none;
}
----Swift.(file).Optional.init(nilLiteral:())
$info.$setThis(_cloneStruct(Optional.none));
return
----Swift.(file).Optional.unsafelyUnwrapped
{const $ifLet0 = this
if($ifLet0.rawValue === 'some') {
let x = $ifLet0[0]
return x;
}
};
preconditionFailureFileLine({}, () => "unsafelyUnwrapped of nil optional", '?3', '?3')
----Swift.(file).Optional.debugDescription
const $match = this
if((($match.rawValue == Optional.some().rawValue))) {
const value = $match[0]
let result = "Optional(";
debugPrintSeparatorTerminatorTo({}, _create(Array, 'initBuffer', {}, [value]), " "/*!default_value*/, "", {get: () => result, set: $val => result = $val});
String.infix_43_61({}, {get: () => result, set: $val => result = $val}, ")");
return result;
}
else if((($match.rawValue == Optional.none.rawValue))) {
return "nil";
}
----Swift.(file).Optional.customMirror
const $match = this
if((($match.rawValue == Optional.some().rawValue))) {
const value = $match[0]
return _create(Mirror, 'initChildrenKeyValuePairsDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, new Map([["some", value]]), _injectIntoOptional(Mirror.DisplayStyle.optional), .generated/*!default_value*/);
}
else if((($match.rawValue == Optional.none.rawValue))) {
return _create(Mirror, 'initChildrenKeyValuePairsDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, new Map([]), _injectIntoOptional(Mirror.DisplayStyle.optional), .generated/*!default_value*/);
}
----Swift.(file).Optional.==infix(_:Wrapped?,_:Wrapped?)
const $match = {0: lhs, 1: rhs}
if(((true))) {
const l = $match[0]
const r = $match[1]
return (l).constructor.infix_61_61({}, l, r);
}
else if((($match[0].rawValue == Optional.none.rawValue && $match[1].rawValue == Optional.none.rawValue))) {
return true;
}
else if(((true))) {
return false;
}
----Swift.(file).Optional.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
const $match = this
if((($match.rawValue == Optional.none.rawValue))) {
hasher.combine({$setThis: $val => hasher = $val}, 0);
}
else if((($match.rawValue == Optional.some().rawValue))) {
const wrapped = $match[0]
hasher.combine({$setThis: $val => hasher = $val}, 1);
hasher.combine({$setThis: $val => hasher = $val}, wrapped);
};})()
hasher$inout.set(hasher)
return $result
----Swift.(file).Optional.~=infix(_:_OptionalNilComparisonType,_:Wrapped?)
const $match = rhs
if((($match.rawValue == Optional.some().rawValue))) {
return false;
}
else if((($match.rawValue == Optional.none.rawValue))) {
return true;
}
----Swift.(file).Optional.==infix(_:Wrapped?,_:_OptionalNilComparisonType)
const $match = lhs
if((($match.rawValue == Optional.some().rawValue))) {
return false;
}
else if((($match.rawValue == Optional.none.rawValue))) {
return true;
}
----Swift.(file).Optional.!=infix(_:Wrapped?,_:_OptionalNilComparisonType)
const $match = lhs
if((($match.rawValue == Optional.some().rawValue))) {
return true;
}
else if((($match.rawValue == Optional.none.rawValue))) {
return false;
}
----Swift.(file).Optional.==infix(_:_OptionalNilComparisonType,_:Wrapped?)
const $match = rhs
if((($match.rawValue == Optional.some().rawValue))) {
return false;
}
else if((($match.rawValue == Optional.none.rawValue))) {
return true;
}
----Swift.(file).Optional.!=infix(_:_OptionalNilComparisonType,_:Wrapped?)
const $match = rhs
if((($match.rawValue == Optional.some().rawValue))) {
return true;
}
else if((($match.rawValue == Optional.none.rawValue))) {
return false;
}
----Swift.(file).??infix(_:T?,_:() throws -> T)
const $match = optional
if((($match.rawValue == Optional.some().rawValue))) {
const value = $match[0]
return value;
}
else if((($match.rawValue == Optional.none.rawValue))) {
return defaultValue({}, );
}
----Swift.(file).??infix(_:T?,_:() throws -> T?)
const $match = optional
if((($match.rawValue == Optional.some().rawValue))) {
const value = $match[0]
return _injectIntoOptional(value);
}
else if((($match.rawValue == Optional.none.rawValue))) {
return defaultValue({}, );
}
----Swift.(file).String.write(_:String)
String.infix_43_61({}, {get: () => this, set: $val => $info.$setThis(_cloneStruct($val))}, other)
----Swift.(file).String.write(to:Target)
let target = target$inout.get()
const $result = (() => {
target.write({$setThis: $val => target = $val}, this);})()
target$inout.set(target)
return $result
----Swift.(file).Character.write(to:Target)
let target = target$inout.get()
const $result = (() => {
target.write({$setThis: $val => target = $val}, _create(String, 'initCharacter', {}, this));})()
target$inout.set(target)
return $result
----Swift.(file).Scalar.write(to:Target)
let target = target$inout.get()
const $result = (() => {
target.write({$setThis: $val => target = $val}, _create(String, 'initCharacter', {}, _create(Character, 'initUnicodeScalar', {}, this)));})()
target$inout.set(target)
return $result
----Swift.(file)._Pointer.init(_:OpaquePointer?)
{const $ifLet0 = from
if(!($ifLet0.rawValue === 'some')) {
return (this.$failed = true);
}let unwrapped = $ifLet0[0]
};
this.initOpaquePointer({}, unwrapped);
return
----Swift.(file)._Pointer.init(_:Self)
this.initRawPointer({}, other._rawValue);
return
----Swift.(file)._Pointer.init(_:Self?)
{const $ifLet0 = other
if(!($ifLet0.rawValue === 'some')) {
return (this.$failed = true);
}let unwrapped = $ifLet0[0]
};
this.initRawPointer({}, unwrapped._rawValue);
return
----Swift.(file)._Pointer.init(_:UnsafeMutablePointer<T>)
this.initRawPointer({}, other._rawValue);
return
----Swift.(file)._Pointer.init(_:UnsafeMutablePointer<T>?)
{const $ifLet0 = other
if(!($ifLet0.rawValue === 'some')) {
return (this.$failed = true);
}let unwrapped = $ifLet0[0]
};
this.initUnsafeMutablePointer({}, unwrapped);
return
----Swift.(file)._Pointer.successor()
return this.advancedBy({}, 1)
----Swift.(file)._Pointer.predecessor()
return this.advancedBy({}, -1)
----Swift.(file)._Pointer.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, _create(UInt, 'initBitPatternOptional', {}, _injectIntoOptional(this)));})()
hasher$inout.set(hasher)
return $result
----Swift.(file).Strideable.+infix(_:Self,_:Self.Stride)
return lhs.advancedBy({}, rhs)
----Swift.(file).Strideable.+infix(_:Self.Stride,_:Self)
return rhs.advancedBy({}, lhs)
----Swift.(file).Strideable.-infix(_:Self,_:Self.Stride)
return lhs.advancedBy({}, '!unclarifiedGeneric:Self.Stride'.prefix_45({}, rhs))
----Swift.(file).Strideable.-infix(_:Self,_:Self)
return rhs.distanceTo({}, lhs)
----Swift.(file).Strideable.+=infix(_:Self,_:Self.Stride)
let lhs = lhs$inout.get()
const $result = (() => {
lhs = lhs.advancedBy({}, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).Strideable.-=infix(_:Self,_:Self.Stride)
let lhs = lhs$inout.get()
const $result = (() => {
lhs = lhs.advancedBy({}, '!unclarifiedGeneric:Self.Stride'.prefix_45({}, rhs));})()
lhs$inout.set(lhs)
return $result
----Swift.(file).Never.<infix(_:Never,_:Never)

----Swift.(file).~=infix(_:T,_:T)
return (a).constructor.infix_61_61({}, a, b)
----Swift.(file).RandomNumberGenerator.next()
return '!unclarifiedGeneric:T'._randomUsing({}, {get: () => this, set: $val => $info.$setThis(_cloneStruct($val))})
----Swift.(file).RandomNumberGenerator.next(upperBound:T)
preconditionFileLine({}, () => (upperBound).constructor.infix_33_61({}, upperBound, 0), () => "upperBound cannot be zero.", '?3', '?3');
const tmp = (_create('!unclarifiedGeneric:T', 'initIntegerLiteral', {}, 1)).constructor.infix_43({}, ('!unclarifiedGeneric:T'.max).constructor.infix_37({}, '!unclarifiedGeneric:T'.max, upperBound), _create('!unclarifiedGeneric:T', 'initIntegerLiteral', {}, 1));
const range = ((tmp).constructor.infix_61_61({}, tmp, upperBound) ? _create('!unclarifiedGeneric:T', 'initIntegerLiteral', {}, 0) : tmp);
let random = _create('!unclarifiedGeneric:T', 'initIntegerLiteral', {}, 0);
do {
random = this.next({$setThis: $val => $info.$setThis(_cloneStruct($val))}, );
} while((random).constructor.infix_60({}, random, range));
return (random).constructor.infix_37({}, random, upperBound)
----Swift.(file).SystemRandomNumberGenerator.init()
return
----Swift.(file).RandomAccessCollection.index(_:Self.Index,offsetBy:Int,limitedBy:Self.Index)
const l = this.distanceFromTo({}, i, limit);
{
if(((Int.infix_62({}, distance, 0) ? Bool.infix_38_38({}, Int.infix_62_61({}, l, 0), () => Int.infix_60({}, l, distance)) : Bool.infix_38_38({}, Int.infix_60_61({}, l, 0), () => Int.infix_60({}, distance, l))))) {
return Optional.none;
}
};
return _injectIntoOptional(this.indexOffsetBy({}, i, distance))
----Swift.(file).RandomAccessCollection.indices
return (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, this.endIndex)
----Swift.(file).RandomAccessCollection.index(after:Self.Index)
this._failEarlyRangeCheckBounds({}, i, _create(Range, 'initUncheckedBoundstuple_type', {}, {0: this.startIndex, 1: this.endIndex}));
return i.advancedBy({}, 1)
----Swift.(file).RandomAccessCollection.index(before:Self.Index)
const result = i.advancedBy({}, -1);
this._failEarlyRangeCheckBounds({}, result, _create(Range, 'initUncheckedBoundstuple_type', {}, {0: this.startIndex, 1: this.endIndex}));
return result
----Swift.(file).RandomAccessCollection.index(_:Self.Index,offsetBy:Self.Index.Stride)
const result = i.advancedBy({}, distance);
this._failEarlyRangeCheckBounds({}, result, _create(ClosedRange, 'initUncheckedBoundstuple_type', {}, {0: this.startIndex, 1: this.endIndex}));
return result
----Swift.(file).RandomAccessCollection.distance(from:Self.Index,to:Self.Index)
this._failEarlyRangeCheckBounds({}, start, _create(ClosedRange, 'initUncheckedBoundstuple_type', {}, {0: this.startIndex, 1: this.endIndex}));
this._failEarlyRangeCheckBounds({}, end, _create(ClosedRange, 'initUncheckedBoundstuple_type', {}, {0: this.startIndex, 1: this.endIndex}));
return start.distanceTo({}, end)
----Swift.(file).RangeExpression.~=infix(_:Self,_:Self.Bound)
return pattern.contains({}, value)
----Swift.(file).Range.contains(_:Bound)
return Bool.infix_38_38({}, (this.lowerBound).constructor.infix_60_61({}, this.lowerBound, _element), () => (_element).constructor.infix_60({}, _element, this.upperBound))
----Swift.(file).Range.isEmpty
return (this.lowerBound).constructor.infix_61_61({}, this.lowerBound, this.upperBound)
----Swift.(file).Range.startIndex
return this.lowerBound
----Swift.(file).Range.endIndex
return this.upperBound
----Swift.(file).Range.index(after:Range<Bound>.Index)
this._failEarlyRangeCheckBounds({}, i, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, this.endIndex));
return i.advancedBy({}, _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, 1))
----Swift.(file).Range.index(before:Range<Bound>.Index)
preconditionFileLine({}, () => (i).constructor.infix_62({}, i, this.lowerBound), () => String()/*!default_value*/, '?3', '?3');
preconditionFileLine({}, () => (i).constructor.infix_60_61({}, i, this.upperBound), () => String()/*!default_value*/, '?3', '?3');
return i.advancedBy({}, _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, -1))
----Swift.(file).Range.index(_:Range<Bound>.Index,offsetBy:Int)
const r = i.advancedBy({}, numericCast({}, n));
preconditionFileLine({}, () => (r).constructor.infix_62_61({}, r, this.lowerBound), () => String()/*!default_value*/, '?3', '?3');
preconditionFileLine({}, () => (r).constructor.infix_60_61({}, r, this.upperBound), () => String()/*!default_value*/, '?3', '?3');
return r
----Swift.(file).Range.distance(from:Range<Bound>.Index,to:Range<Bound>.Index)
return numericCast({}, start.distanceTo({}, end))
----Swift.(file).Range.subscript(_:Range<Range<Bound>.Index>)
return bounds
----Swift.(file).Range.indices
return this
----Swift.(file).Range.subscript(_:Range<Bound>.Index)
preconditionFileLine({}, () => this.contains({}, position), () => "Index out of range", '?3', '?3');
return position
----Swift.(file).Range.init(_:ClosedRange<Bound>)
const upperBound = other.upperBound.advancedBy({}, _create('!unclarifiedGeneric:Bound.Stride', 'initIntegerLiteral', {}, 1));
this.initUncheckedBoundstuple_type({}, {0: other.lowerBound, 1: upperBound});
return
----Swift.(file).Range.relative(to:C)
return _create(Range, 'initUncheckedBoundstuple_type', {}, {0: this.lowerBound, 1: this.upperBound})
----Swift.(file).Range.clamped(to:Range<Bound>)
const lower = ((limits.lowerBound).constructor.infix_62({}, limits.lowerBound, this.lowerBound) ? limits.lowerBound : ((limits.upperBound).constructor.infix_60({}, limits.upperBound, this.lowerBound) ? limits.upperBound : this.lowerBound));
const upper = ((limits.upperBound).constructor.infix_60({}, limits.upperBound, this.upperBound) ? limits.upperBound : ((limits.lowerBound).constructor.infix_62({}, limits.lowerBound, this.upperBound) ? limits.lowerBound : this.upperBound));
return _create(Range, 'initUncheckedBoundstuple_type', {}, {0: lower, 1: upper})
----Swift.(file).Range.description
return (("") + (this.lowerBound) + ("..<") + (this.upperBound) + (""))
----Swift.(file).Range.debugDescription
return String.infix_43({}, (("Range(") + (_create(String, 'initReflecting', {}, this.lowerBound)) + ("")), (("..<") + (_create(String, 'initReflecting', {}, this.upperBound)) + (")")))
----Swift.(file).Range.customMirror
return _create(Mirror, 'initChildrenKeyValuePairsDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, new Map([["lowerBound", this.lowerBound], ["upperBound", this.upperBound]]), nil/*!default_value*/, .generated/*!default_value*/)
----Swift.(file).Range.==infix(_:Range<Bound>,_:Range<Bound>)
return Bool.infix_38_38({}, (lhs.lowerBound).constructor.infix_61_61({}, lhs.lowerBound, rhs.lowerBound), () => (lhs.upperBound).constructor.infix_61_61({}, lhs.upperBound, rhs.upperBound))
----Swift.(file).Range.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.lowerBound);
hasher.combine({$setThis: $val => hasher = $val}, this.upperBound);})()
hasher$inout.set(hasher)
return $result
----Swift.(file).PartialRangeUpTo.relative(to:C)
return (collection.startIndex).constructor.infix_46_46_60({}, collection.startIndex, this.upperBound)
----Swift.(file).PartialRangeUpTo.contains(_:Bound)
return (_element).constructor.infix_60({}, _element, this.upperBound)
----Swift.(file).PartialRangeThrough.relative(to:C)
return (collection.startIndex).constructor.infix_46_46_60({}, collection.startIndex, collection.indexAfter({}, this.upperBound))
----Swift.(file).PartialRangeThrough.contains(_:Bound)
return (_element).constructor.infix_60_61({}, _element, this.upperBound)
----Swift.(file).PartialRangeFrom.relative(to:C)
return (this.lowerBound).constructor.infix_46_46_60({}, this.lowerBound, collection.endIndex)
----Swift.(file).PartialRangeFrom.contains(_:Bound)
return (this.lowerBound).constructor.infix_60_61({}, this.lowerBound, _element)
----Swift.(file).PartialRangeFrom.makeIterator()
return _create(PartialRangeFrom.Iterator, 'init_current', {}, this.lowerBound)
----Swift.(file).Comparable...<infix(_:Self,_:Self)
preconditionFileLine({}, () => (minimum).constructor.infix_60_61({}, minimum, maximum), () => "Can't form Range with upperBound < lowerBound", '?3', '?3');
return _create(Range, 'initUncheckedBoundstuple_type', {}, {0: minimum, 1: maximum})
----Swift.(file).Comparable...<prefix(_:Self)
return _create(PartialRangeUpTo, 'init', {}, maximum)
----Swift.(file).Comparable....prefix(_:Self)
return _create(PartialRangeThrough, 'init', {}, maximum)
----Swift.(file).Comparable....postfix(_:Self)
return _create(PartialRangeFrom, 'init', {}, minimum)
----Swift.(file).UnboundedRange_....postfix(_:UnboundedRange_)

----Swift.(file).Collection.subscript(_:(UnboundedRange_) -> ())
return this.subscript$get({}, '!unclarifiedGeneric:Self.Index'.postfix_46_46_46({}, this.startIndex))
----Swift.(file).MutableCollection.subscript(_:(UnboundedRange_) -> ())#ASS

this.subscript$set({$setThis: $val => $info.$setThis(_cloneStruct($val))}, newValue, '!unclarifiedGeneric:Self.Index'.postfix_46_46_46({}, this.startIndex))
----Swift.(file).MutableCollection.subscript(_:(UnboundedRange_) -> ())
return this.subscript$get({}, '!unclarifiedGeneric:Self.Index'.postfix_46_46_46({}, this.startIndex));

----Swift.(file).Range.overlaps(_:Range<Bound>)
return Bool.infix_124_124({}, Bool.infix_38_38({}, Bool.prefix_33({}, other.isEmpty), () => this.contains({}, other.lowerBound)), () => Bool.infix_38_38({}, Bool.prefix_33({}, this.isEmpty), () => other.contains({}, this.lowerBound)))
----Swift.(file).Range.overlaps(_:ClosedRange<Bound>)
return Bool.infix_124_124({}, this.contains({}, other.lowerBound), () => Bool.infix_38_38({}, Bool.prefix_33({}, this.isEmpty), () => other.contains({}, this.lowerBound)))
----Swift.(file).RangeReplaceableCollection.init(_:S)
this.init({}, );
this.appendContentsOf({$setThis: $val => $info.$setThis(_cloneStruct($val))}, _elements);
return
----Swift.(file).RangeReplaceableCollection.append(_:Self.Element)
this.insertAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, newElement, this.endIndex)
----Swift.(file).RangeReplaceableCollection.append(contentsOf:S)
const approximateCapacity = Int.infix_43({}, this.count, numericCast({}, newElements.underestimatedCount));
this.reserveCapacity({$setThis: $val => $info.$setThis(_cloneStruct($val))}, approximateCapacity);
{
let $element$generator = newElements.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
this.append({$setThis: $val => $info.$setThis(_cloneStruct($val))}, _element);
}
}
----Swift.(file).RangeReplaceableCollection.insert(_:Self.Element,at:Self.Index)
this.replaceSubrangeWith({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (i).constructor.infix_46_46_60({}, i, i), _create(CollectionOfOne, 'init', {}, newElement))
----Swift.(file).RangeReplaceableCollection.insert(contentsOf:C,at:Self.Index)
this.replaceSubrangeWith({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (i).constructor.infix_46_46_60({}, i, i), newElements)
----Swift.(file).RangeReplaceableCollection.remove(at:Self.Index)
preconditionFileLine({}, () => Bool.prefix_33({}, this.isEmpty), () => "Can't remove from an empty collection", '?3', '?3');
const result = this.subscript$get({}, position);
this.replaceSubrangeWith({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (position).constructor.infix_46_46_60({}, position, this.indexAfter({}, position)), _create(EmptyCollection, 'init', {}, ));
return result
----Swift.(file).RangeReplaceableCollection.removeSubrange(_:Range<Self.Index>)
this.replaceSubrangeWith({$setThis: $val => $info.$setThis(_cloneStruct($val))}, bounds, _create(EmptyCollection, 'init', {}, ))
----Swift.(file).RangeReplaceableCollection.removeFirst(_:Int)
{
if((Int.infix_61_61({}, k, 0))) {
return ;
}
};
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Number of elements to remove should be non-negative", '?3', '?3');
preconditionFileLine({}, () => Int.infix_62_61({}, this.count, k), () => "Can't remove more items from a collection than it has", '?3', '?3');
const end = this.indexOffsetBy({}, this.startIndex, k);
this.removeSubrange({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, end))
----Swift.(file).RangeReplaceableCollection.removeFirst()
preconditionFileLine({}, () => Bool.prefix_33({}, this.isEmpty), () => "Can't remove first element from an empty collection", '?3', '?3');
const firstElement = this.first[0];
this.removeFirstMultiple({$setThis: $val => $info.$setThis(_cloneStruct($val))}, 1);
return firstElement
----Swift.(file).RangeReplaceableCollection.removeAll(keepingCapacity:Bool)
{
if((Bool.prefix_33({}, keepCapacity))) {
$info.$setThis(_cloneStruct(_create(this.constructor, 'init', {}, )));
}
else {
this.replaceSubrangeWith({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (this.startIndex).constructor.infix_46_46_60({}, this.startIndex, this.endIndex), _create(EmptyCollection, 'init', {}, ));
}
}
----Swift.(file).RangeReplaceableCollection.reserveCapacity(_:Int)

----Swift.(file).RangeReplaceableCollection.removeFirst()
preconditionFileLine({}, () => Bool.prefix_33({}, this.isEmpty), () => "Can't remove items from an empty collection", '?3', '?3');
const _element = this.first[0];
$info.$setThis(_cloneStruct(this.subscriptRange$get({}, (this.indexAfter({}, this.startIndex)).constructor.infix_46_46_60({}, this.indexAfter({}, this.startIndex), this.endIndex))));
return _element
----Swift.(file).RangeReplaceableCollection.removeFirst(_:Int)
{
if((Int.infix_61_61({}, k, 0))) {
return ;
}
};
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Number of elements to remove should be non-negative", '?3', '?3');
preconditionFileLine({}, () => Int.infix_62_61({}, this.count, k), () => "Can't remove more items from a collection than it contains", '?3', '?3');
$info.$setThis(_cloneStruct(this.subscriptRange$get({}, (this.indexOffsetBy({}, this.startIndex, k)).constructor.infix_46_46_60({}, this.indexOffsetBy({}, this.startIndex, k), this.endIndex))))
----Swift.(file).RangeReplaceableCollection.replaceSubrange(_:R,with:C)
this.replaceSubrangeWith({$setThis: $val => $info.$setThis(_cloneStruct($val))}, subrange.relativeTo({}, this), newElements)
----Swift.(file).RangeReplaceableCollection.removeSubrange(_:R)
this.removeSubrange({$setThis: $val => $info.$setThis(_cloneStruct($val))}, bounds.relativeTo({}, this))
----Swift.(file).RangeReplaceableCollection.popLast()
{
if((this.isEmpty)) {
return Optional.none;
}
};
{const $ifLet0 = this._customRemoveLast({$setThis: $val => $info.$setThis(_cloneStruct($val))}, )
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return _injectIntoOptional(result);
}
};
return _injectIntoOptional(this.removeAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, this.indexBefore({}, this.endIndex)))
----Swift.(file).RangeReplaceableCollection.removeLast()
preconditionFileLine({}, () => Bool.prefix_33({}, this.isEmpty), () => "Can't remove last element from an empty collection", '?3', '?3');
{const $ifLet0 = this._customRemoveLast({$setThis: $val => $info.$setThis(_cloneStruct($val))}, )
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return result;
}
};
return this.removeAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, this.indexBefore({}, this.endIndex))
----Swift.(file).RangeReplaceableCollection.removeLast(_:Int)
{
if((Int.infix_61_61({}, k, 0))) {
return ;
}
};
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Number of elements to remove should be non-negative", '?3', '?3');
preconditionFileLine({}, () => Int.infix_62_61({}, this.count, k), () => "Can't remove more items from a collection than it contains", '?3', '?3');
{
if((this._customRemoveLast({$setThis: $val => $info.$setThis(_cloneStruct($val))}, k))) {
return ;
}
};
const end = this.endIndex;
this.removeSubrange({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (this.indexOffsetBy({}, end, Int.prefix_45({}, k))).constructor.infix_46_46_60({}, this.indexOffsetBy({}, end, Int.prefix_45({}, k)), end))
----Swift.(file).RangeReplaceableCollection.popLast()
{
if((this.isEmpty)) {
return Optional.none;
}
};
{const $ifLet0 = this._customRemoveLast({$setThis: $val => $info.$setThis(_cloneStruct($val))}, )
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return _injectIntoOptional(result);
}
};
return _injectIntoOptional(this.removeAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, this.indexBefore({}, this.endIndex)))
----Swift.(file).RangeReplaceableCollection.removeLast()
preconditionFileLine({}, () => Bool.prefix_33({}, this.isEmpty), () => "Can't remove last element from an empty collection", '?3', '?3');
{const $ifLet0 = this._customRemoveLast({$setThis: $val => $info.$setThis(_cloneStruct($val))}, )
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return result;
}
};
return this.removeAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, this.indexBefore({}, this.endIndex))
----Swift.(file).RangeReplaceableCollection.removeLast(_:Int)
{
if((Int.infix_61_61({}, k, 0))) {
return ;
}
};
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Number of elements to remove should be non-negative", '?3', '?3');
preconditionFileLine({}, () => Int.infix_62_61({}, this.count, k), () => "Can't remove more items from a collection than it contains", '?3', '?3');
{
if((this._customRemoveLast({$setThis: $val => $info.$setThis(_cloneStruct($val))}, k))) {
return ;
}
};
const end = this.endIndex;
this.removeSubrange({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (this.indexOffsetBy({}, end, Int.prefix_45({}, k))).constructor.infix_46_46_60({}, this.indexOffsetBy({}, end, Int.prefix_45({}, k)), end))
----Swift.(file).RangeReplaceableCollection.+infix(_:Self,_:Other)
let lhs_dupl = lhs;
lhs_dupl.appendContentsOf({$setThis: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).RangeReplaceableCollection.+infix(_:Other,_:Self)
let result = _create(this.constructor, 'init', {}, );
result.reserveCapacity({$setThis: $val => result = $val}, Int.infix_43({}, rhs.count, numericCast({}, lhs.underestimatedCount)));
result.appendContentsOf({$setThis: $val => result = $val}, lhs);
result.appendContentsOf({$setThis: $val => result = $val}, rhs);
return result
----Swift.(file).RangeReplaceableCollection.+=infix(_:Self,_:Other)
let lhs = lhs$inout.get()
const $result = (() => {
lhs.appendContentsOf({$setThis: $val => lhs = $val}, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).RangeReplaceableCollection.+infix(_:Self,_:Other)
let lhs_dupl = lhs;
lhs_dupl.appendContentsOf({$setThis: $val => lhs_dupl = $val}, rhs);
return lhs_dupl
----Swift.(file).RangeReplaceableCollection.filter(_:(Self.Element) throws -> Bool)
return _create(this.constructor, 'initBuffer', {}, this.lazy.filterSwift({}, isIncluded))
----Swift.(file).RangeReplaceableCollection.removeAll(where:(Self.Element) throws -> Bool)
$info.$setThis(_cloneStruct(_create(this.constructor, 'initBuffer', {}, this.lazy.filterSwift({}, (($info, $0) => Bool.prefix_33({}, shouldBeRemoved({}, $0)))))))
----Swift.(file).Repeated.startIndex
return 0
----Swift.(file).Repeated.endIndex
return this.count
----Swift.(file).Repeated.subscript(_:Int)
preconditionFileLine({}, () => Bool.infix_38_38({}, Int.infix_62_61({}, position, 0), () => Int.infix_60({}, position, this.count)), () => "Index out of range", '?3', '?3');
return this.repeatedValue
----Swift.(file).Result.map(_:(Success) -> NewSuccess)
const $match = this
if((($match.rawValue == Result.success().rawValue))) {
const success = $match[0]
return Result.success({}, transform({}, success));
}
else if((($match.rawValue == Result.failure().rawValue))) {
const failure = $match[0]
return Result.failure({}, failure);
}
----Swift.(file).Result.mapError(_:(Failure) -> NewFailure)
const $match = this
if((($match.rawValue == Result.success().rawValue))) {
const success = $match[0]
return Result.success({}, success);
}
else if((($match.rawValue == Result.failure().rawValue))) {
const failure = $match[0]
return Result.failure({}, transform({}, failure));
}
----Swift.(file).Result.flatMap(_:(Success) -> Result<NewSuccess, Failure>)
const $match = this
if((($match.rawValue == Result.success().rawValue))) {
const success = $match[0]
return transform({}, success);
}
else if((($match.rawValue == Result.failure().rawValue))) {
const failure = $match[0]
return Result.failure({}, failure);
}
----Swift.(file).Result.flatMapError(_:(Failure) -> Result<Success, NewFailure>)
const $match = this
if((($match.rawValue == Result.success().rawValue))) {
const success = $match[0]
return Result.success({}, success);
}
else if((($match.rawValue == Result.failure().rawValue))) {
const failure = $match[0]
return transform({}, failure);
}
----Swift.(file).Result.get()
const $match = this
if((($match.rawValue == Result.success().rawValue))) {
const success = $match[0]
return success;
}
else if((($match.rawValue == Result.failure().rawValue))) {
const failure = $match[0]
throw failure;
}
----Swift.(file).Result.init(catching:() throws -> Success)
try {
$info.$setThis(_cloneStruct(Result.success({}, body({}, ))));
} catch(error) {
if((true)) {
$info.$setThis(_cloneStruct(Result.failure({}, error)));
}
else throw error
};
return
----Swift.(file).MutableCollection.reverse()
{
if((this.isEmpty)) {
return ;
}
};
let f = this.startIndex;
let l = this.indexBefore({}, this.endIndex);
while(true){
if(!(((f).constructor.infix_60({}, f, l)))) break
this.swapAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, f, l);
this.formIndexAfter({}, {get: () => f, set: $val => f = $val});
this.formIndexBefore({}, {get: () => l, set: $val => l = $val});
}
----Swift.(file).ReversedCollection.makeIterator()
return _create(ReversedCollection.Iterator, 'init_base', {}, this._base)
----Swift.(file).Index.==infix(_:ReversedCollection<Base>.Index,_:ReversedCollection<Base>.Index)
return (lhs.base).constructor.infix_61_61({}, lhs.base, rhs.base)
----Swift.(file).Index.<infix(_:ReversedCollection<Base>.Index,_:ReversedCollection<Base>.Index)
return (lhs.base).constructor.infix_62({}, lhs.base, rhs.base)
----Swift.(file).Index.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.base);})()
hasher$inout.set(hasher)
return $result
----Swift.(file).ReversedCollection.startIndex
return _create(ReversedCollection.Index, 'init', {}, this._base.endIndex)
----Swift.(file).ReversedCollection.endIndex
return _create(ReversedCollection.Index, 'init', {}, this._base.startIndex)
----Swift.(file).ReversedCollection.index(after:ReversedCollection<Base>.Index)
return _create(ReversedCollection.Index, 'init', {}, this._base.indexBefore({}, i.base))
----Swift.(file).ReversedCollection.index(before:ReversedCollection<Base>.Index)
return _create(ReversedCollection.Index, 'init', {}, this._base.indexAfter({}, i.base))
----Swift.(file).ReversedCollection.index(_:ReversedCollection<Base>.Index,offsetBy:Int)
return _create(ReversedCollection.Index, 'init', {}, this._base.indexOffsetBy({}, i.base, Int.prefix_45({}, n)))
----Swift.(file).ReversedCollection.index(_:ReversedCollection<Base>.Index,offsetBy:Int,limitedBy:ReversedCollection<Base>.Index)
return this._base.indexOffsetByLimitedBy({}, i.base, Int.prefix_45({}, n), limit.base).mapSwift({}, init({}, ReversedCollection.Index))
----Swift.(file).ReversedCollection.distance(from:ReversedCollection<Base>.Index,to:ReversedCollection<Base>.Index)
return this._base.distanceFromTo({}, end.base, start.base)
----Swift.(file).ReversedCollection.subscript(_:ReversedCollection<Base>.Index)
return this._base.subscript$get({}, this._base.indexBefore({}, position.base))
----Swift.(file).ReversedCollection.reversed()
return this._base
----Swift.(file).Sequence.makeIterator()
return this
----Swift.(file).Sequence.map(_:(Self.Element) throws -> T)
const initialCapacity = this.underestimatedCount;
let result = _create(ContiguousArray, 'init', {}, );
result.reserveCapacity({$setThis: $val => result = $val}, initialCapacity);
let iterator = this.makeIterator({}, );
{
let $generator = _cloneStruct(Int.infix_46_46_60({}, 0, initialCapacity).makeIterator({}, ));
while(true) {
const $ifLet0 = $generator.next({$setThis: $val => $generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
result.append({$setThis: $val => result = $val}, transform({}, iterator.next({$setThis: $val => iterator = $val}, )[0]));
}
};
while(true){
const $ifLet0 = iterator.next({$setThis: $val => iterator = $val}, )
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
result.append({$setThis: $val => result = $val}, transform({}, _element));
};
return _create(Array, 'initBuffer', {}, result)
----Swift.(file).Sequence.filter(_:(Self.Element) throws -> Bool)
return this._filter({}, isIncluded)
----Swift.(file).Sequence.underestimatedCount
return 0
----Swift.(file).Sequence.forEach(_:(Self.Element) throws -> Void)
{
let $element$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
body({}, _element);
}
}
----Swift.(file).Sequence.first(where:(Self.Element) throws -> Bool)
{
let $element$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
{
if((predicate({}, _element))) {
return _injectIntoOptional(_element);
}
};
}
};
return Optional.none
----Swift.(file).Sequence.split(separator:Self.Element,maxSplits:Int,omittingEmptySubsequences:Bool)
return this.splitMaxSplitsOmittingEmptySubsequencesWhereSeparator({}, maxSplits, omittingEmptySubsequences, (($info, $0) => ($0).constructor.infix_61_61({}, $0, separator)))
----Swift.(file).Sequence.split(maxSplits:Int,omittingEmptySubsequences:Bool,whereSeparator:(Self.Element) throws -> Bool)
preconditionFileLine({}, () => Int.infix_62_61({}, maxSplits, 0), () => "Must take zero or more splits", '?3', '?3');
const whole = _create(Array, 'initBuffer', {}, this);
return whole.splitMaxSplitsOmittingEmptySubsequencesWhereSeparator({}, maxSplits, omittingEmptySubsequences, isSeparator)
----Swift.(file).Sequence.suffix(_:Int)
preconditionFileLine({}, () => Int.infix_62_61({}, maxLength, 0), () => "Can't take a suffix of negative length from a sequence", '?3', '?3');
{
if(!((Int.infix_33_61({}, maxLength, 0)))) {
return _create(Array, 'initBuffer', {}, []);
}
};
let ringBuffer = _create(Array, 'initBuffer', {}, []);
ringBuffer.reserveCapacity({$setThis: $val => ringBuffer = $val}, /*dot_syntax_base_ignored*/min({}, maxLength, this.underestimatedCount));
let i = 0;
{
let $element$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
{
if((Int.infix_60({}, ringBuffer.count, maxLength))) {
ringBuffer.append({$setThis: $val => ringBuffer = $val}, _element);
}
else {
ringBuffer.subscript$set({$setThis: $val => ringBuffer = $val}, _element, i);
Int.infix_43_61({}, {get: () => i, set: $val => i = $val}, 1);
Int.infix_37_61({}, {get: () => i, set: $val => i = $val}, maxLength);
}
};
}
};
{
if((Int.infix_33_61({}, i, ringBuffer.startIndex))) {
let rotated = _create(Array, 'initBuffer', {}, []);
rotated.reserveCapacity({$setThis: $val => rotated = $val}, ringBuffer.count);
Array.infix_43_61({}, {get: () => rotated, set: $val => rotated = $val}, ringBuffer.subscriptRange$get({}, Int.infix_46_46_60({}, i, ringBuffer.endIndex)));
Array.infix_43_61({}, {get: () => rotated, set: $val => rotated = $val}, ringBuffer.subscriptRange$get({}, Int.infix_46_46_60({}, 0, i)));
return rotated;
}
else {
return ringBuffer;
}
}
----Swift.(file).Sequence.dropFirst(_:Int)
return _create(DropFirstSequence, 'initDroppingInt', {}, this, k)
----Swift.(file).Sequence.dropLast(_:Int)
preconditionFileLine({}, () => Int.infix_62_61({}, k, 0), () => "Can't drop a negative number of elements from a sequence", '?3', '?3');
{
if(!((Int.infix_33_61({}, k, 0)))) {
return _create(Array, 'initBuffer', {}, this);
}
};
let result = _create(Array, 'initBuffer', {}, []);
let ringBuffer = _create(Array, 'initBuffer', {}, []);
let i = ringBuffer.startIndex;
{
let $element$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
{
if((Int.infix_60({}, ringBuffer.count, k))) {
ringBuffer.append({$setThis: $val => ringBuffer = $val}, _element);
}
else {
result.append({$setThis: $val => result = $val}, ringBuffer.subscript$get({}, i));
ringBuffer.subscript$set({$setThis: $val => ringBuffer = $val}, _element, i);
Int.infix_43_61({}, {get: () => i, set: $val => i = $val}, 1);
Int.infix_37_61({}, {get: () => i, set: $val => i = $val}, k);
}
};
}
};
return result
----Swift.(file).Sequence.prefix(_:Int)
return _create(PrefixSequence, 'initMaxLengthInt', {}, this, maxLength)
----Swift.(file).Sequence.prefix(while:(Self.Element) throws -> Bool)
let result = _create(Array, 'initBuffer', {}, []);
{
let $element$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
{
if(!((predicate({}, _element)))) {
break;
}
};
result.append({$setThis: $val => result = $val}, _element);
}
};
return result
----Swift.(file).Sequence.withContiguousStorageIfAvailable(_:(UnsafeBufferPointer<Self.Element>) throws -> R)
return Optional.none
----Swift.(file).Sequence.min(by:(Self.Element, Self.Element) throws -> Bool)
let it = this.makeIterator({}, );
{const $ifLet0 = it.next({$setThis: $val => it = $val}, )
if(!($ifLet0.rawValue === 'some')) {
return Optional.none;
}let result = $ifLet0[0]
};
while(true){
const $ifLet0 = it.next({$setThis: $val => it = $val}, )
if(!($ifLet0.rawValue === 'some')) break
let e = $ifLet0[0]
{
if((areInIncreasingOrder({}, e, result))) {
result = e;
}
};
};
return _injectIntoOptional(result)
----Swift.(file).Sequence.max(by:(Self.Element, Self.Element) throws -> Bool)
let it = this.makeIterator({}, );
{const $ifLet0 = it.next({$setThis: $val => it = $val}, )
if(!($ifLet0.rawValue === 'some')) {
return Optional.none;
}let result = $ifLet0[0]
};
while(true){
const $ifLet0 = it.next({$setThis: $val => it = $val}, )
if(!($ifLet0.rawValue === 'some')) break
let e = $ifLet0[0]
{
if((areInIncreasingOrder({}, result, e))) {
result = e;
}
};
};
return _injectIntoOptional(result)
----Swift.(file).Sequence.min()
return this.minBy({}, '!unclarifiedGeneric:Self.Element'.infix_60)
----Swift.(file).Sequence.max()
return this.maxBy({}, '!unclarifiedGeneric:Self.Element'.infix_60)
----Swift.(file).Sequence.starts(with:PossiblePrefix,by:(Self.Element, PossiblePrefix.Element) throws -> Bool)
let possiblePrefixIterator = possiblePrefix.makeIterator({}, );
{
let $e0$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $e0$generator.next({$setThis: $val => $e0$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let e0 = $ifLet0[0]
{const $ifLet0 = possiblePrefixIterator.next({$setThis: $val => possiblePrefixIterator = $val}, )
if($ifLet0.rawValue === 'some') {
let e1 = $ifLet0[0]
{
if((Bool.prefix_33({}, areEquivalent({}, e0, e1)))) {
return false;
}
};
}
else {
return true;
}
};
}
};
return Optional.infix_61_61({}, possiblePrefixIterator.next({$setThis: $val => possiblePrefixIterator = $val}, ), _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {}))
----Swift.(file).Sequence.starts(with:PossiblePrefix)
return this.startsWithBy({}, possiblePrefix, '!unclarifiedGeneric:Self.Element'.infix_61_61)
----Swift.(file).Sequence.elementsEqual(_:OtherSequence,by:(Self.Element, OtherSequence.Element) throws -> Bool)
let iter1 = this.makeIterator({}, );
let iter2 = other.makeIterator({}, );
while(true){
if(!((true))) break
const $match = {0: iter1.next({$setThis: $val => iter1 = $val}, ), 1: iter2.next({$setThis: $val => iter2 = $val}, )}
if(((true))) {
const e1 = $match[0]
const e2 = $match[1]
{
if((Bool.prefix_33({}, areEquivalent({}, e1, e2)))) {
return false;
}
};
}
else if((($match[1].rawValue == Optional.none.rawValue) || ($match[0].rawValue == Optional.none.rawValue))) {
return false;
}
else if((($match[0].rawValue == Optional.none.rawValue && $match[1].rawValue == Optional.none.rawValue))) {
return true;
};
}
----Swift.(file).Sequence.elementsEqual(_:OtherSequence)
return this.elementsEqualBy({}, other, '!unclarifiedGeneric:Self.Element'.infix_61_61)
----Swift.(file).Sequence.lexicographicallyPrecedes(_:OtherSequence,by:(Self.Element, Self.Element) throws -> Bool)
let iter1 = this.makeIterator({}, );
let iter2 = other.makeIterator({}, );
while(true){
if(!((true))) break
{const $ifLet0 = iter1.next({$setThis: $val => iter1 = $val}, )
if($ifLet0.rawValue === 'some') {
let e1 = $ifLet0[0]
{const $ifLet0 = iter2.next({$setThis: $val => iter2 = $val}, )
if($ifLet0.rawValue === 'some') {
let e2 = $ifLet0[0]
{
if((areInIncreasingOrder({}, e1, e2))) {
return true;
}
};
{
if((areInIncreasingOrder({}, e2, e1))) {
return false;
}
};
continue;
}
};
return false;
}
};
return Optional.infix_33_61({}, iter2.next({$setThis: $val => iter2 = $val}, ), _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {}));
}
----Swift.(file).Sequence.lexicographicallyPrecedes(_:OtherSequence)
return this.lexicographicallyPrecedesBy({}, other, '!unclarifiedGeneric:Self.Element'.infix_60)
----Swift.(file).Sequence.contains(where:(Self.Element) throws -> Bool)
{
let $e$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $e$generator.next({$setThis: $val => $e$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let e = $ifLet0[0]
{
if((predicate({}, e))) {
return true;
}
};
}
};
return false
----Swift.(file).Sequence.allSatisfy(_:(Self.Element) throws -> Bool)
return Bool.prefix_33({}, this.containsWhere({}, (($info, $0) => Bool.prefix_33({}, predicate({}, $0)))))
----Swift.(file).Sequence.contains(_:Self.Element)
{const $ifLet0 = this._customContainsEquatableElement({}, _element)
if($ifLet0.rawValue === 'some') {
let result = $ifLet0[0]
return result;
}
else {
return this.containsWhere({}, (($info, $0) => ($0).constructor.infix_61_61({}, $0, _element)));
}
}
----Swift.(file).Sequence.count(where:(Self.Element) throws -> Bool)
let count = 0;
{
let $e$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $e$generator.next({$setThis: $val => $e$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let e = $ifLet0[0]
{
if((predicate({}, e))) {
Int.infix_43_61({}, {get: () => count, set: $val => count = $val}, 1);
}
};
}
};
return count
----Swift.(file).Sequence.reduce(_:Result,_:(Result, Self.Element) throws -> Result)
let accumulator = initialResult;
{
let $element$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
accumulator = nextPartialResult({}, accumulator, _element);
}
};
return accumulator
----Swift.(file).Sequence.reduce(into:Result,_:(inout Result, Self.Element) throws -> ())
let accumulator = initialResult;
{
let $element$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
updateAccumulatingResult({}, {get: () => accumulator, set: $val => accumulator = $val}, _element);
}
};
return accumulator
----Swift.(file).Sequence.reversed()
let result = _create(Array, 'initBuffer', {}, this);
const count = result.count;
{
let $i$generator = _cloneStruct(Int.infix_46_46_60({}, 0, Int.infix_47({}, count, 2)).makeIterator({}, ));
while(true) {
const $ifLet0 = $i$generator.next({$setThis: $val => $i$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let i = $ifLet0[0]
result.swapAt({$setThis: $val => result = $val}, i, Int.infix_45({}, count, Int.infix_43({}, i, 1)));
}
};
return result
----Swift.(file).Sequence.flatMap(_:(Self.Element) throws -> SegmentOfResult)
let result = _create(Array, 'initBuffer', {}, []);
{
let $element$generator = this.makeIterator({}, );
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
result.appendContentsOf({$setThis: $val => result = $val}, transform({}, _element));
}
};
return result
----Swift.(file).Sequence.compactMap(_:(Self.Element) throws -> ElementOfResult?)
return this._compactMap({}, transform)
----Swift.(file).Set.filter(_:(Element) throws -> Bool)
let result = _create(Set, 'init', {}, );
{
let $element$generator = _cloneStruct(this.makeIterator({}, ));
while(true) {
const $ifLet0 = $element$generator.next({$setThis: $val => $element$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let _element = $ifLet0[0]
{
if((isIncluded({}, _element))) {
result.insert({$setThis: $val => result = $val}, _element);
}
};
}
};
return result
----Swift.(file).Set.isEmpty
return Int.infix_61_61({}, this.count, 0)
----Swift.(file).Set.removeFirst()
preconditionFileLine({}, () => Bool.prefix_33({}, this.isEmpty), () => "Can't removeFirst from an empty Set", '?3', '?3');
return this.removeAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, this.startIndex)
----Swift.(file).Set.isSubset(of:S)
{
if(!((Bool.prefix_33({}, this.isEmpty)))) {
return true;
}
};
const other = _create(Set, 'initSource', {}, possibleSuperset);
return this.isSubsetOf({}, other)
----Swift.(file).Set.isStrictSubset(of:S)
const other = _create(Set, 'initSource', {}, possibleStrictSuperset);
return this.isStrictSubsetOf({}, other)
----Swift.(file).Set.isSuperset(of:S)
{
let $member$generator = possibleSubset.makeIterator({}, );
while(true) {
const $ifLet0 = $member$generator.next({$setThis: $val => $member$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let member = $ifLet0[0]
{
if((Bool.prefix_33({}, this.contains({}, member)))) {
return false;
}
};
}
};
return true
----Swift.(file).Set.isStrictSuperset(of:S)
const other = _create(Set, 'initSource', {}, possibleStrictSubset);
return other.isStrictSubsetOf({}, this)
----Swift.(file).Set.union(_:S)
let newSet = _cloneStruct(this);
newSet.formUnion({$setThis: $val => newSet = $val}, other);
return newSet
----Swift.(file).Set.formUnion(_:S)
{
let $item$generator = other.makeIterator({}, );
while(true) {
const $ifLet0 = $item$generator.next({$setThis: $val => $item$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let item = $ifLet0[0]
this.insert({$setThis: $val => $info.$setThis(_cloneStruct($val))}, item);
}
}
----Swift.(file).Set.intersection(_:S)
const otherSet = _create(Set, 'initSource', {}, other);
return this.intersection({}, otherSet)
----Swift.(file).Set.formIntersection(_:S)
const result = _cloneStruct(this.intersection({}, other));
{
if((Int.infix_33_61({}, result.count, this.count))) {
$info.$setThis(_cloneStruct(_cloneStruct(result)));
}
}
----Swift.(file).Set.symmetricDifference(_:S)
let newSet = _cloneStruct(this);
newSet.formSymmetricDifference({$setThis: $val => newSet = $val}, other);
return newSet
----Swift.(file).Set.formSymmetricDifference(_:S)
const otherSet = _create(Set, 'initSource', {}, other);
this.formSymmetricDifference({$setThis: $val => $info.$setThis(_cloneStruct($val))}, otherSet)
----Swift.(file).Set.isSubset(of:Set<Element>)
{
if(!((Int.infix_60_61({}, this.count, other.count)))) {
return false;
}
};
{
let $member$generator = _cloneStruct(this.makeIterator({}, ));
while(true) {
const $ifLet0 = $member$generator.next({$setThis: $val => $member$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let member = $ifLet0[0]
{
if((Bool.prefix_33({}, other.contains({}, member)))) {
return false;
}
};
}
};
return true
----Swift.(file).Set.isSuperset(of:Set<Element>)
return other.isSubsetOf({}, this)
----Swift.(file).Set.isStrictSuperset(of:Set<Element>)
return Bool.infix_38_38({}, this.isSupersetOf({}, other), () => Set.infix_33_61({}, this, other))
----Swift.(file).Set.isStrictSubset(of:Set<Element>)
return other.isStrictSupersetOf({}, this)
----Swift.(file).Set.intersection(_:Set<Element>)
let newSet = _create(Set, 'init', {}, );
{
let $member$generator = _cloneStruct(this.makeIterator({}, ));
while(true) {
const $ifLet0 = $member$generator.next({$setThis: $val => $member$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let member = $ifLet0[0]
{
if((other.contains({}, member))) {
newSet.insert({$setThis: $val => newSet = $val}, member);
}
};
}
};
return newSet
----Swift.(file).Set.formSymmetricDifference(_:Set<Element>)
{
let $member$generator = _cloneStruct(other.makeIterator({}, ));
while(true) {
const $ifLet0 = $member$generator.next({$setThis: $val => $member$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let member = $ifLet0[0]
{
if((this.contains({}, member))) {
this.remove({$setThis: $val => $info.$setThis(_cloneStruct($val))}, member);
}
else {
this.insert({$setThis: $val => $info.$setThis(_cloneStruct($val))}, member);
}
};
}
}
----Swift.(file).Set.customMirror
const style = Mirror.DisplayStyle.set;
return _create(Mirror, 'initUnlabeledChildrenDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, this, _injectIntoOptional(style), .generated/*!default_value*/)
----Swift.(file).Set.popFirst()
{
if(!((Bool.prefix_33({}, this.isEmpty)))) {
return Optional.none;
}
};
return _injectIntoOptional(this.removeAt({$setThis: $val => $info.$setThis(_cloneStruct($val))}, this.startIndex))
----Swift.(file).SetAlgebra.init(_:S)
this.init({}, );
{
let $e$generator = sequence.makeIterator({}, );
while(true) {
const $ifLet0 = $e$generator.next({$setThis: $val => $e$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let e = $ifLet0[0]
this.insert({$setThis: $val => $info.$setThis(_cloneStruct($val))}, e);
}
};
return
----Swift.(file).SetAlgebra.subtract(_:Self)
this.formIntersection({$setThis: $val => $info.$setThis(_cloneStruct($val))}, this.symmetricDifference({}, other))
----Swift.(file).SetAlgebra.isSubset(of:Self)
return (this.intersection({}, other)).constructor.infix_61_61({}, this.intersection({}, other), this)
----Swift.(file).SetAlgebra.isSuperset(of:Self)
return other.isSubsetOf({}, this)
----Swift.(file).SetAlgebra.isDisjoint(with:Self)
return this.intersection({}, other).isEmpty
----Swift.(file).SetAlgebra.subtracting(_:Self)
return this.intersection({}, this.symmetricDifference({}, other))
----Swift.(file).SetAlgebra.isEmpty
return (this).constructor.infix_61_61({}, this, _create(this.constructor, 'init', {}, ))
----Swift.(file).SetAlgebra.isStrictSuperset(of:Self)
return Bool.infix_38_38({}, this.isSupersetOf({}, other), () => (this).constructor.infix_33_61({}, this, other))
----Swift.(file).SetAlgebra.isStrictSubset(of:Self)
return other.isStrictSupersetOf({}, this)
----Swift.(file).SetAlgebra.init(arrayLiteral:[Self.Element])
this.initSource({}, arrayLiteral);
return
----Swift.(file).Set.insert(_:ConcreteElement)
const $tuple = this.insert({$setThis: $val => $info.$setThis(_cloneStruct($val))}, _create(AnyHashable, 'init', {}, newMember)), inserted = $tuple && $tuple[0], memberAfterInsert = $tuple && $tuple[1];
return {0: inserted, 1: memberAfterInsert.base}
----Swift.(file).Set.update(with:ConcreteElement)
return this.updateWith({$setThis: $val => $info.$setThis(_cloneStruct($val))}, _create(AnyHashable, 'init', {}, newMember)).mapSwift({}, (($info, $0) => $0.base))
----Swift.(file).Set.remove(_:ConcreteElement)
return this.remove({$setThis: $val => $info.$setThis(_cloneStruct($val))}, _create(AnyHashable, 'init', {}, member)).mapSwift({}, (($info, $0) => $0.base))
----Swift.(file).Slice.startIndex
return this._startIndex
----Swift.(file).Slice.endIndex
return this._endIndex
----Swift.(file).Sequence.sorted()
return this.sortedBy({}, '!unclarifiedGeneric:Self.Element'.infix_60)
----Swift.(file).Sequence.sorted(by:(Self.Element, Self.Element) throws -> Bool)
let result = _create(ContiguousArray, 'initBuffer', {}, this);
result.sortBy({$setThis: $val => result = $val}, areInIncreasingOrder);
return _create(Array, 'initBuffer', {}, result)
----Swift.(file).MutableCollection.sort()
this.sortBy({$setThis: $val => $info.$setThis(_cloneStruct($val))}, '!unclarifiedGeneric:Self.Element'.infix_60)
----Swift.(file).MutableCollection.sort(by:(Self.Element, Self.Element) throws -> Bool)
const didSortUnsafeBuffer = this._withUnsafeMutableBufferPointerIfSupported({$setThis: $val => $info.$setThis(_cloneStruct($val))}, (($info, buffer$inout) => _injectIntoOptional(buffer._stableSortImplBy({$setThis: $val => buffer = $val}, areInIncreasingOrder))));
{
if((Optional.infix_61_61({}, didSortUnsafeBuffer, _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {})))) {
const sortedElements = _cloneStruct(this.sortedBy({}, areInIncreasingOrder));
{
let $generator = _cloneStruct(zip({}, this.indices, sortedElements.indices).makeIterator({}, ));
while(true) {
const $ifLet0 = $generator.next({$setThis: $val => $generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let i = $ifLet0[0][0], j = $ifLet0[0][1]
this.subscript$set({$setThis: $val => $info.$setThis(_cloneStruct($val))}, sortedElements.subscript$get({}, j), i);
}
};
}
}
----Swift.(file).StaticString.init()
$info.$setThis(_cloneStruct(_cloneStruct("")));
return
----Swift.(file).StaticString.init(unicodeScalarLiteral:StaticString)
$info.$setThis(_cloneStruct(_cloneStruct(value)));
return
----Swift.(file).StaticString.init(extendedGraphemeClusterLiteral:StaticString)
$info.$setThis(_cloneStruct(_cloneStruct(value)));
return
----Swift.(file).StaticString.init(stringLiteral:StaticString)
$info.$setThis(_cloneStruct(_cloneStruct(value)));
return
----Swift.(file).StaticString.debugDescription
return this.description.debugDescription
----Swift.(file).StaticString.customMirror
return _create(Mirror, 'initReflectingprotocol_composition_type', {}, this.description)
----Swift.(file).Strideable.<infix(_:Self,_:Self)
return (x.distanceTo({}, y)).constructor.infix_62({}, x.distanceTo({}, y), _create('!unclarifiedGeneric:Self.Stride', 'initIntegerLiteral', {}, 0))
----Swift.(file).Strideable.==infix(_:Self,_:Self)
return (x.distanceTo({}, y)).constructor.infix_61_61({}, x.distanceTo({}, y), _create('!unclarifiedGeneric:Self.Stride', 'initIntegerLiteral', {}, 0))
----Swift.(file).StrideTo.underestimatedCount
let it = _cloneStruct(this.makeIterator({}, ));
let count = 0;
while(true){
if(!((Optional.infix_33_61({}, it.next({$setThis: $val => it = $val}, ), _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {}))))) break
Int.infix_43_61({}, {get: () => count, set: $val => count = $val}, 1);
};
return count
----Swift.(file).StrideThrough.underestimatedCount
let it = _cloneStruct(this.makeIterator({}, ));
let count = 0;
while(true){
if(!((Optional.infix_33_61({}, it.next({$setThis: $val => it = $val}, ), _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {}))))) break
Int.infix_43_61({}, {get: () => count, set: $val => count = $val}, 1);
};
return count
----Swift.(file).String.init(stringLiteral:String)
$info.$setThis(_cloneStruct(value));
return
----Swift.(file).String.debugDescription
let result = "\"";
{
let $us$generator = _cloneStruct(this.unicodeScalars.makeIterator({}, ));
while(true) {
const $ifLet0 = $us$generator.next({$setThis: $val => $us$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let us = $ifLet0[0]
String.infix_43_61({}, {get: () => result, set: $val => result = $val}, us.escapedAsASCII({}, false));
}
};
String.infix_43_61({}, {get: () => result, set: $val => result = $val}, "\"");
return result
----Swift.(file).String.+infix(_:String,_:String)
let result = lhs;
result.append({$setThis: $val => result = $val}, rhs);
return result
----Swift.(file).String.+=infix(_:String,_:String)
let lhs = lhs$inout.get()
const $result = (() => {
lhs.append({$setThis: $val => lhs = $val}, rhs);})()
lhs$inout.set(lhs)
return $result
----Swift.(file).String.description
return this
----Swift.(file).String.count
return this.distanceFromTo({}, this.startIndex, this.endIndex)
----Swift.(file).StringProtocol.!=infix(_:Self,_:RHS)
return Bool.prefix_33({}, (lhs).constructor.infix_61_61({}, lhs, rhs))
----Swift.(file).StringProtocol.>infix(_:Self,_:RHS)
return (rhs).constructor.infix_60({}, rhs, lhs)
----Swift.(file).StringProtocol.<=infix(_:Self,_:RHS)
return Bool.prefix_33({}, (rhs).constructor.infix_60({}, rhs, lhs))
----Swift.(file).StringProtocol.>=infix(_:Self,_:RHS)
return Bool.prefix_33({}, (lhs).constructor.infix_60({}, lhs, rhs))
----Swift.(file)._StringGuts.startUTF16
fatalErrorFileLine({}, () => "Not contiguous UTF-16", '?3', '?3')
----Swift.(file).Index.samePosition(in:String.UTF8View)
return _create(String.UTF8View.Index, 'initStringIndexWithinStringUTF8View', {}, this, utf8)
----Swift.(file).Index.samePosition(in:String.UTF16View)
return _create(String.UTF16View.Index, 'initStringIndexWithinStringUTF16View', {}, this, utf16)
----Swift.(file).DefaultStringInterpolation.appendLiteral(_:String)
literal.writeTo({}, {get: () => this, set: $val => $info.$setThis(_cloneStruct($val))})
----Swift.(file).DefaultStringInterpolation.appendInterpolation(_:T)
value.writeTo({}, {get: () => this, set: $val => $info.$setThis(_cloneStruct($val))})
----Swift.(file).DefaultStringInterpolation.appendInterpolation(_:T)
value.writeTo({}, {get: () => this, set: $val => $info.$setThis(_cloneStruct($val))})
----Swift.(file).DefaultStringInterpolation.appendInterpolation(_:T)
value.description.writeTo({}, {get: () => this, set: $val => $info.$setThis(_cloneStruct($val))})
----Swift.(file).StringProtocol.hasPrefix(_:Prefix)
return this.startsWith({}, prefix)
----Swift.(file).StringProtocol.hasSuffix(_:Suffix)
return this.reversed({}, ).startsWith({}, suffix.reversed({}, ))
----Swift.(file).String.init(_:S)
{const $ifLet0 = _injectIntoOptional(characters)
if($ifLet0.rawValue === 'some') {
let str = $ifLet0[0]
$info.$setThis(_cloneStruct(str));
return ;
}
};
{const $ifLet0 = _injectIntoOptional(characters)
if($ifLet0.rawValue === 'some') {
let subStr = $ifLet0[0]
this.initSubstring({}, subStr);
return ;
}
};
$info.$setThis(_cloneStruct(""));
this.appendContentsOf({$setThis: $val => $info.$setThis(_cloneStruct($val))}, characters);
return
----Swift.(file).String.append(contentsOf:String)
this.append({$setThis: $val => $info.$setThis(_cloneStruct($val))}, newElements)
----Swift.(file).String.insert(contentsOf:S,at:String.Index)
this.replaceSubrangeWith({$setThis: $val => $info.$setThis(_cloneStruct($val))}, String.Index.infix_46_46_60({}, i, i), newElements)
----Swift.(file).String.max(_:T,_:T)
return /*dot_syntax_base_ignored*/max({}, x, y)
----Swift.(file).String.min(_:T,_:T)
return /*dot_syntax_base_ignored*/min({}, x, y)
----Swift.(file).Sequence.+infix(_:Self,_:String)
fatalErrorFileLine({}, () => String()/*!default_value*/, '?3', '?3')
----Swift.(file).Sequence.+infix(_:String,_:Self)
fatalErrorFileLine({}, () => String()/*!default_value*/, '?3', '?3')
----Swift.(file).UTF16View.debugDescription
return (("StringUTF16(") + (this.description.debugDescription) + (")"))
----Swift.(file).Index.samePosition(in:String.UnicodeScalarView)
return _create(String.UnicodeScalarIndex, 'initStringIndexWithinStringUnicodeScalarView', {}, this, unicodeScalars)
----Swift.(file).UTF16View.customMirror
return _create(Mirror, 'initUnlabeledChildrenDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, this, nil/*!default_value*/, .generated/*!default_value*/)
----Swift.(file).UTF8View.debugDescription
return (("UTF8View(") + (this.description.debugDescription) + (")"))
----Swift.(file).UTF8View.customMirror
return _create(Mirror, 'initUnlabeledChildrenDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, this, nil/*!default_value*/, .generated/*!default_value*/)
----Swift.(file).UnicodeScalarView.debugDescription
return (("StringUnicodeScalarView(") + (this.description.debugDescription) + (")"))
----Swift.(file).Index.samePosition(in:String)
return _create(String.Index, 'initStringIndexWithinString', {}, this, characters)
----Swift.(file).UnicodeScalarView.customMirror
return _create(Mirror, 'initUnlabeledChildrenDisplayStyleOptionalAncestorRepresentationMirrorAncestorRepresentation', {}, this, this, nil/*!default_value*/, .generated/*!default_value*/)
----Swift.(file).Substring.init(decoding:C,as:Encoding.Type)
this.initString({}, _create(String, 'initDecodingAs', {}, codeUnits, sourceEncoding));
return
----Swift.(file).Substring.init(cString:UnsafePointer<CChar>)
this.initString({}, _create(String, 'initCStringUnsafePointer', {}, nullTerminatedUTF8));
return
----Swift.(file).Substring.init(decodingCString:UnsafePointer<Encoding.CodeUnit>,as:Encoding.Type)
this.initString({}, _create(String, 'initDecodingCStringUnsafePointerAs', {}, nullTerminatedCodeUnits, sourceEncoding));
return
----Swift.(file).Substring.withCString(_:(UnsafePointer<CChar>) throws -> Result)
return _create(String, 'initSubstring', {}, this).withCString({}, body)
----Swift.(file).Substring.withCString(encodedAs:TargetEncoding.Type,_:(UnsafePointer<TargetEncoding.CodeUnit>) throws -> Result)
return _create(String, 'initSubstring', {}, this).withCStringEncodedAs({}, targetEncoding, body)
----Swift.(file).Substring.customMirror
return _create(String, 'initSubstring', {}, this).customMirror
----Swift.(file).Substring.description
return _create(String, 'initSubstring', {}, this)
----Swift.(file).Substring.debugDescription
return _create(String, 'initSubstring', {}, this).debugDescription
----Swift.(file).Substring.init(_:String)
$info.$setThis(_cloneStruct(_cloneStruct(content.subscriptUnboundedRange$get({}, UnboundedRange_.postfix_46_46_46))));
return
----Swift.(file).String.init(_:Substring.UnicodeScalarView)
$info.$setThis(_cloneStruct(_create(String, 'initSubstring', {}, _create(Substring, 'initSubstringUnicodeScalarView', {}, content))));
return
----Swift.(file).Substring.append(contentsOf:S)
let string = _create(String, 'initSubstring', {}, this);
$info.$setThis(_cloneStruct(_create(Substring, 'init', {}, )));
string.appendContentsOf({$setThis: $val => string = $val}, _elements);
$info.$setThis(_cloneStruct(_create(Substring, 'initString', {}, string)))
----Swift.(file).Substring.lowercased()
return _create(String, 'initSubstring', {}, this).lowercased({}, )
----Swift.(file).Substring.uppercased()
return _create(String, 'initSubstring', {}, this).uppercased({}, )
----Swift.(file).Substring.filter(_:(Substring.Element) throws -> Bool)
return _create(String, 'initBuffer', {}, this.lazy.filterSwift({}, isIncluded))
----Swift.(file).Substring.write(_:String)
this.appendContentsOf({$setThis: $val => $info.$setThis(_cloneStruct($val))}, other)
----Swift.(file).Substring.write(to:Target)
let target = target$inout.get()
const $result = (() => {
target.write({$setThis: $val => target = $val}, _create(String, 'initSubstring', {}, this));})()
target$inout.set(target)
return $result
----Swift.(file).Substring.init(unicodeScalarLiteral:String)
this.initString({}, value);
return
----Swift.(file).Substring.init(extendedGraphemeClusterLiteral:String)
this.initString({}, value);
return
----Swift.(file).Substring.init(stringLiteral:String)
this.initString({}, value);
return
----Swift.(file)._UIntBuffer.makeIterator()
return _create(_UIntBuffer.Iterator, 'init_UIntBuffer', {}, this)
----Swift.(file)._UIntBuffer.init()
this._storage = 0;
this._bitCount = 0;
return
----Swift.(file)._UIntBuffer.capacity
return Int.infix_47({}, _UIntBuffer.Storage.bitWidth, '!unclarifiedGeneric:Element'.bitWidth)
----Swift.(file).UTF16.encodedReplacementCharacter
return _create(Unicode.UTF16.EncodedScalar, 'init_storage_UIntBufferStorage_bitCountUInt8', {}, 0xFFFD, 16);
}
static get encodedReplacementCharacter() { return this.encodedReplacementCharacter$get()
----Swift.(file).UTF16.encode(_:Unicode.Scalar)
const x = source.value;
{
if((_fastPath({}, UInt32.infix_60({}, x, UInt32.infix_60_60({}, 1, 16))))) {
return _injectIntoOptional(_create(Unicode.UTF16.EncodedScalar, 'init_storage_UIntBufferStorage_bitCountUInt8', {}, x, 16));
}
};
const x1 = UInt32.infix_45({}, x, UInt32.infix_60_60({}, 1, 16));
let r = UInt32.infix_43({}, 0xdc00, UInt32.infix_38({}, x1, 0x3ff));
UInt32.infix_38_60_60_61({}, {get: () => r, set: $val => r = $val}, 16);
UInt32.infix_124_61({}, {get: () => r, set: $val => r = $val}, UInt32.infix_43({}, 0xd800, UInt32.infix_38({}, UInt32.infix_38_62_62({}, x1, 10), 0x3ff)));
return _injectIntoOptional(_create(Unicode.UTF16.EncodedScalar, 'init_storage_UIntBufferStorage_bitCountUInt8', {}, r, 32))
----Swift.(file).UTF32.encode(_:Unicode.Scalar)
return _injectIntoOptional(_create(Unicode.UTF32.EncodedScalar, 'init', {}, source.value))
----Swift.(file).Parser.parseScalar(from:I)
let input = input$inout.get()
const $result = (() => {
const n = input.next({$setThis: $val => input = $val}, );
{const $ifLet0 = n
if((_fastPath({}, Optional.infix_33_61({}, n, _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {})))) && $ifLet0.rawValue === 'some') {
let x = $ifLet0[0]
{
if(!((_fastPath({}, Bool.infix_38_38({}, UInt32.infix_33_61({}, UInt32.infix_38_62_62({}, x, 11), 0b11011), () => UInt32.infix_60_61({}, x, 0x10ffff)))))) {
return Unicode.ParseResult.error({}, 1);
}
};
return Unicode.ParseResult.valid({}, _create(UTF32.EncodedScalar, 'init', {}, x));
}
};
return Unicode.ParseResult.emptyInput;})()
input$inout.set(input)
return $result
----Swift.(file).UTF8.encodedReplacementCharacter
return Unicode.UTF8.EncodedScalar.encodedReplacementCharacter;
}
static get encodedReplacementCharacter() { return this.encodedReplacementCharacter$get()
----Swift.(file).UnicodeDecodingResult.==infix(_:UnicodeDecodingResult,_:UnicodeDecodingResult)
const $match = {0: lhs, 1: rhs}
if((($match[0].rawValue == UnicodeDecodingResult.scalarValue().rawValue && $match[1].rawValue == UnicodeDecodingResult.scalarValue().rawValue))) {
const lhsScalar = $match[0][0]
const rhsScalar = $match[1][0]
return Unicode.Scalar.infix_61_61({}, lhsScalar, rhsScalar);
}
else if((($match[0].rawValue == UnicodeDecodingResult.emptyInput.rawValue && $match[1].rawValue == UnicodeDecodingResult.emptyInput.rawValue))) {
return true;
}
else if((($match[0].rawValue == UnicodeDecodingResult.error.rawValue && $match[1].rawValue == UnicodeDecodingResult.error.rawValue))) {
return true;
}
else if(((true))) {
return false;
}
----Swift.(file)..init()
$info.$setThis(_cloneStruct(Unicode.UTF8._swift3Buffer({}, _create(Unicode.UTF8.ForwardParser, 'init', {}, ))));
return
----Swift.(file)..isContinuation(_:<<error type>>)
return UInt8.infix_61_61({}, UInt8.infix_38({}, _byte, 0b11000000), 0b10000000)
----Swift.(file)..init()
$info.$setThis(_cloneStruct(Unicode.UTF16._swift3Buffer({}, _create(Unicode.UTF16.ForwardParser, 'init', {}, ))));
return
----Swift.(file)..encode(_:<<error type>>,into:<<error type>>)
let s = this.encode({}, input)[0]._storage;
processCodeUnit({}, _create(UInt16, 'initTruncatingIfNeeded', {}, s));
UInt32.infix_38_62_62_61({}, {get: () => s, set: $val => s = $val}, 16);
{
if((_fastPath({}, UInt32.infix_61_61({}, s, 0)))) {
return ;
}
};
processCodeUnit({}, _create(UInt16, 'initTruncatingIfNeeded', {}, s))
----Swift.(file)..init()
$info.$setThis(_cloneStruct(Unicode.UTF32._swift3Codec));
return
----Swift.(file)..decode(_:I)
let input = input$inout.get()
const $result = (() => {
let parser = _create(Unicode.UTF32.ForwardParser, 'init', {}, );
const $match = parser.parseScalarFrom({$setThis: $val => parser = $val}, {get: () => input, set: $val => input = $val})
if((($match.rawValue == Unicode.ParseResult.valid().rawValue))) {
const s = $match[0]
return UnicodeDecodingResult.scalarValue({}, UTF32.decode({}, s));
}
else if((($match.rawValue == Unicode.ParseResult.error().rawValue))) {
return UnicodeDecodingResult.error;
}
else if((($match.rawValue == Unicode.ParseResult.emptyInput.rawValue))) {
return UnicodeDecodingResult.emptyInput;
};})()
input$inout.set(input)
return $result
----Swift.(file)..encode(_:<<error type>>,into:<<error type>>)
processCodeUnit({}, _create(UInt32, 'initUnicodeScalar', {}, input))
----Swift.(file).transcode(_:Input,from:InputEncoding.Type,to:OutputEncoding.Type,stoppingOnError:Bool,into:<<error type>>)
let input_dupl = input;
let p = _create('!unclarifiedGeneric:InputEncoding.ForwardParser', 'init', {}, );
let hadError = false;
while(true){
if(!((true))) break
const $match = p.parseScalarFrom({$setThis: $val => p = $val}, {get: () => input_dupl, set: $val => input_dupl = $val})
if((($match.rawValue == Unicode.ParseResult.valid().rawValue))) {
const s = $match[0]
const t = '!unclarifiedGeneric:OutputEncoding'.transcodeFrom({}, s, inputEncoding);
{const $ifLet0 = t
if(!((_fastPath({}, Optional.infix_33_61({}, t, _create(_OptionalNilComparisonType, 'initNilLiteraltuple_type', {}, {})))) && $ifLet0.rawValue === 'some')) {
break;
}let s = $ifLet0[0]
};
s.forEachSwift({}, processCodeUnit);
continue;
}
else if((($match.rawValue == Unicode.ParseResult.emptyInput.rawValue))) {
return hadError;
}
else if((($match.rawValue == Unicode.ParseResult.error().rawValue))) {
{
if((_slowPath({}, stopOnError))) {
return true;
}
};
hadError = true;
};
'!unclarifiedGeneric:OutputEncoding'.encodedReplacementCharacter.forEachSwift({}, processCodeUnit);
}
----Swift.(file).UTF16.width(_:<<error type>>)
return (UInt32.infix_60_61({}, x.value, 0xFFFF) ? 1 : 2)
----Swift.(file).UTF16.leadSurrogate(_:<<error type>>)
preconditionFileLine({}, () => Int.infix_61_61({}, this.width({}, x), 2), () => String()/*!default_value*/, '?3', '?3');
return UInt16.infix_43({}, 0xD800, _create(UTF16.CodeUnit, 'initTruncatingIfNeeded', {}, UInt32.infix_38_62_62({}, UInt32.infix_45({}, x.value, 0x10000), 10)))
----Swift.(file).UTF16.trailSurrogate(_:<<error type>>)
preconditionFileLine({}, () => Int.infix_61_61({}, this.width({}, x), 2), () => String()/*!default_value*/, '?3', '?3');
return UInt16.infix_43({}, 0xDC00, _create(UTF16.CodeUnit, 'initTruncatingIfNeeded', {}, UInt32.infix_38({}, UInt32.infix_45({}, x.value, 0x10000), UInt32.infix_45({}, UInt32.infix_38_60_60({}, 1, 10), 1))))
----Swift.(file).UTF16.isLeadSurrogate(_:Unicode.UTF16.CodeUnit)
return UInt16.infix_61_61({}, UInt16.infix_38({}, x, 0xFC00), 0xD800)
----Swift.(file).UTF16.isTrailSurrogate(_:Unicode.UTF16.CodeUnit)
return UInt16.infix_61_61({}, UInt16.infix_38({}, x, 0xFC00), 0xDC00)
----Swift.(file)._UnicodeEncoding.transcode(_:<<error type>>,from:FromEncoding.Type)
return this.encode({}, '!unclarifiedGeneric:FromEncoding'.decode({}, content))
----Swift.(file).Scalar.init(unicodeScalarLiteral:<<error type>>)
$info.$setThis(_cloneStruct(_cloneStruct(value)));
return
----Swift.(file).Scalar.init(_:UInt16)
this.initUInt32({}, _create(UInt32, 'init', {}, v));
return
----Swift.(file).Scalar.init(_:<<error type>>)
$info.$setThis(_cloneStruct(_cloneStruct(v)));
return
----Swift.(file).Scalar.isASCII
return UInt32.infix_60_61({}, this.value, 127)
----Swift.(file).Scalar.description
return _create(String, 'initUnicodeScalar', {}, this)
----Swift.(file).Scalar.debugDescription
return (("\"") + (this.escapedAsASCII({}, true)) + ("\""))
----Swift.(file).Scalar.hash(into:Hasher)
let hasher = hasher$inout.get()
const $result = (() => {
hasher.combine({$setThis: $val => hasher = $val}, this.value);})()
hasher$inout.set(hasher)
return $result
----Swift.(file).UInt8.init(ascii:<<error type>>)
preconditionFileLine({}, () => UInt32.infix_60({}, v.value, 128), () => "Code point value does not fit into ASCII", '?3', '?3');
$info.$setThis(_cloneStruct(_create(UInt8, 'init', {}, v.value)));
return
----Swift.(file).UInt32.init(_:<<error type>>)
$info.$setThis(_cloneStruct(v.value));
return
----Swift.(file).UInt64.init(_:<<error type>>)
$info.$setThis(_cloneStruct(_create(UInt64, 'init', {}, v.value)));
return
----Swift.(file).Scalar.==infix(_:<<error type>>,_:<<error type>>)
return UInt32.infix_61_61({}, lhs.value, rhs.value)
----Swift.(file).Scalar.<infix(_:<<error type>>,_:<<error type>>)
return UInt32.infix_60({}, lhs.value, rhs.value)
----Swift.(file).UTF16View.startIndex
return 0
----Swift.(file).UnsafePointer.pointee
 return this.pointee$internal
----Swift.(file).UnsafePointer.subscript(_:Int)
return UnsafePointer.infix_43({}, this, i)
----Swift.(file).UnsafeMutablePointer.init(mutating:UnsafePointer<Pointee>?)
{const $ifLet0 = other
if(!($ifLet0.rawValue === 'some')) {
return (this.$failed = true);
}let unwrapped = $ifLet0[0]
};
this.initMutatingUnsafePointer({}, unwrapped);
return
----Swift.(file).UnsafeMutablePointer.pointee
 return this.pointee$internal
----Swift.(file).UnsafeMutablePointer.assign(repeating:Pointee,count:Int)
preconditionFileLine({}, () => Int.infix_62_61({}, count, 0), () => "UnsafeMutablePointer.assign(repeating:count:) with negative count", '?3', '?3');
{
let $i$generator = _cloneStruct(Int.infix_46_46_60({}, 0, count).makeIterator({}, ));
while(true) {
const $ifLet0 = $i$generator.next({$setThis: $val => $i$generator = $val}, );
if(!($ifLet0.rawValue === 'some')) break
let i = $ifLet0[0]
this.subscript$set({$setThis: $val => $info.$setThis(_cloneStruct(_cloneStruct($val)))}, repeatedValue, i);
}
}
----Swift.(file).UnsafeMutablePointer.subscript(_:Int)
return _create(UnsafePointer, 'initUnsafeMutablePointer', {}, UnsafeMutablePointer.infix_43({}, this, i));
}subscript$unsafeMutableAddress($info, i){
return UnsafeMutablePointer.infix_43({}, this, i)
----Swift.(file).UnsafeRawPointer.assumingMemoryBound(to:T.Type)
return _create(UnsafePointer, 'initRawPointer', {}, this._rawValue)
----Swift.(file).UnsafeMutableRawPointer.assumingMemoryBound(to:T.Type)
return _create(UnsafeMutablePointer, 'initRawPointer', {}, this._rawValue)
----Swift.(file)._ValidUTF8Buffer.makeIterator()
return _create(_ValidUTF8Buffer.Iterator, 'init_ValidUTF8Buffer', {}, this)
----Swift.(file)._ValidUTF8Buffer.capacity
return Int.infix_47({}, UInt32.bitWidth, _ValidUTF8Buffer.Element.bitWidth);
}
static get capacity() { return this.capacity$get()
