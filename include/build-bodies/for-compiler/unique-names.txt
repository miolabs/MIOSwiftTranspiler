Swift.(file).RandomAccessCollection.subscript(_:Range<Self.Index>)
subscriptRange
Swift.(file).MutableCollection.subscript(_:Range<Self.Index>)
subscriptRange
Swift.(file).BidirectionalCollection.subscript(_:Range<Self.Index>)
subscriptRange
Swift.(file).Collection.subscript(_:Range<Self.Index>)
subscriptRange
Swift.(file).RangeReplaceableCollection.subscript(_:Range<Self.Index>)
subscriptRange
Swift.(file).RangeReplaceableCollection.init(_:S)
initBuffer
Swift.(file)._ArrayProtocol.init(_:Self._Buffer)
initBuffer
Swift.(file).SetAlgebra.init(_:S)
initSource
Swift.(file).Set.insert(_:ConcreteElement)
insertConcreteElement
Swift.(file).RangeReplaceableCollection.removeLast(_:Int)
removeLastMultiple
Swift.(file).RangeReplaceableCollection.removeFirst(_:Int)
removeFirstMultiple
Swift.(file).MutableCollection.subscript(_:(UnboundedRange_) -> ())
subscriptUnboundedRange
Swift.(file).Collection.subscript(_:(UnboundedRange_) -> ())
subscriptUnboundedRange
Swift.(file).min(_:T,_:T,_:T,_:[T])
minMany
Swift.(file).max(_:T,_:T,_:T,_:[T])
maxMany
Swift.(file).Optional.==infix(_:Wrapped?,_:_OptionalNilComparisonType)
wrappedEqualsOptionalNilComparisonType
Swift.(file).Optional.==infix(_:_OptionalNilComparisonType,_:Wrapped?)
optionalNilComparisonTypeEqualsWrapped
Swift.(file).Optional.!=infix(_:Wrapped?,_:_OptionalNilComparisonType)
wrappedNotEqualsOptionalNilComparisonType
Swift.(file).Optional.!=infix(_:_OptionalNilComparisonType,_:Wrapped?)
optionalNilComparisonTypeNotEqualsWrapped
Swift.(file).RangeReplaceableCollection.removeSubrange(_:Range<Self.Index>)
removeSubrangeRange
Swift.(file).??infix(_:T?,_:() throws -> T?)
nilCoalescingOptional
Swift.(file).String.subscript(_:R)
subscriptRange
Swift.(file).MutableCollection.subscript(_:R)
subscriptRange
Swift.(file).FixedWidthInteger.init(_:T)
initT
Swift.(file).UnsignedInteger.init(_:T)
initT
Swift.(file).SignedInteger.init(_:T)
initT
Swift.(file).String.init(_:T)
initT
Swift.(file).BinaryInteger.init(_:T)
initT
Swift.(file).Collection.index(_:Self.Index,offsetBy:T)
indexOffsetByT
Swift.(file).Collection.index(_:Self.Index,offsetBy:T,limitedBy:Self.Index)
indexOffsetByTLimitedBy