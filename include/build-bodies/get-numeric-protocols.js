//run with flag "-print-numeric-protocols"
const PROTOCOLS_BY_NUMERIC = {
'Float':['Swift.(file).LosslessStringConvertible','Swift.(file).CustomStringConvertible','Swift.(file).CustomDebugStringConvertible','Swift.(file).TextOutputStreamable','Swift.(file).BinaryFloatingPoint','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file)._ExpressibleByBuiltinFloatLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).Strideable','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).SIMDScalar','Swift.(file)._CVarArgPassedAsDouble','Swift.(file)._CVarArgAligned','Swift.(file).CustomStringConvertible','Swift.(file).FloatingPoint','Swift.(file).ExpressibleByFloatLiteral','Swift.(file).SignedNumeric','Swift.(file).Strideable','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Equatable','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CVarArg','Swift.(file).CVarArg',],'Double':['Swift.(file).LosslessStringConvertible','Swift.(file).CustomStringConvertible','Swift.(file).CustomDebugStringConvertible','Swift.(file).TextOutputStreamable','Swift.(file).BinaryFloatingPoint','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file)._ExpressibleByBuiltinFloatLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).Strideable','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).SIMDScalar','Swift.(file)._CVarArgPassedAsDouble','Swift.(file)._CVarArgAligned','Swift.(file).CustomStringConvertible','Swift.(file).FloatingPoint','Swift.(file).ExpressibleByFloatLiteral','Swift.(file).SignedNumeric','Swift.(file).Strideable','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Equatable','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CVarArg','Swift.(file).CVarArg',],'Float80':['Swift.(file).LosslessStringConvertible','Swift.(file).CustomStringConvertible','Swift.(file).CustomDebugStringConvertible','Swift.(file).TextOutputStreamable','Swift.(file).BinaryFloatingPoint','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file)._ExpressibleByBuiltinFloatLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).Strideable','Swift.(file).CustomReflectable','Swift.(file).CVarArg','Swift.(file)._CVarArgAligned','Swift.(file).CustomStringConvertible','Swift.(file).FloatingPoint','Swift.(file).ExpressibleByFloatLiteral','Swift.(file).SignedNumeric','Swift.(file).Strideable','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Equatable','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CVarArg',],'UInt8':['Swift.(file).FixedWidthInteger','Swift.(file).UnsignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file)._StringElement','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Equatable',],'Int8':['Swift.(file).FixedWidthInteger','Swift.(file).SignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).SignedNumeric','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Numeric','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Equatable',],'UInt16':['Swift.(file).FixedWidthInteger','Swift.(file).UnsignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file)._StringElement','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Equatable',],'Int16':['Swift.(file).FixedWidthInteger','Swift.(file).SignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).SignedNumeric','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Numeric','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Equatable',],'UInt32':['Swift.(file).FixedWidthInteger','Swift.(file).UnsignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Equatable',],'Int32':['Swift.(file).FixedWidthInteger','Swift.(file).SignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).SignedNumeric','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Numeric','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Equatable',],'UInt64':['Swift.(file).FixedWidthInteger','Swift.(file).UnsignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file)._CVarArgAligned','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Equatable','Swift.(file).CVarArg',],'Int64':['Swift.(file).FixedWidthInteger','Swift.(file).SignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file)._CVarArgAligned','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).SignedNumeric','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Numeric','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Equatable','Swift.(file).CVarArg',],'UInt':['Swift.(file).FixedWidthInteger','Swift.(file).UnsignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Equatable',],'Int':['Swift.(file).FixedWidthInteger','Swift.(file).SignedInteger','Swift.(file)._ExpressibleByBuiltinIntegerLiteral','Swift.(file).Hashable','Swift.(file)._HasCustomAnyHashableRepresentation','Swift.(file).CustomReflectable','Swift.(file)._CustomPlaygroundQuickLookable','Swift.(file).MirrorPath','Swift.(file).SIMDScalar','Swift.(file).CVarArg','Swift.(file).BinaryInteger','Swift.(file).LosslessStringConvertible','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).CustomStringConvertible','Swift.(file).BinaryInteger','Swift.(file).SignedNumeric','Swift.(file).Hashable','Swift.(file).Numeric','Swift.(file).CustomStringConvertible','Swift.(file).Strideable','Swift.(file).Equatable','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Comparable','Swift.(file).Equatable','Swift.(file).Numeric','Swift.(file).AdditiveArithmetic','Swift.(file).ExpressibleByIntegerLiteral','Swift.(file).Equatable','Swift.(file).Equatable',]
}
const ALLOWED_PROTOCOLS = [
  'Swift.(file).LosslessStringConvertible',
  'Swift.(file).CustomStringConvertible',
  'Swift.(file).CustomDebugStringConvertible',
  'Swift.(file).TextOutputStreamable',
  //'Swift.(file).BinaryFloatingPoint',
  //'Swift.(file)._ExpressibleByBuiltinIntegerLiteral',
  //'Swift.(file).ExpressibleByIntegerLiteral',
  //'Swift.(file)._ExpressibleByBuiltinFloatLiteral',
  'Swift.(file).Hashable',
  'Swift.(file)._HasCustomAnyHashableRepresentation',
  'Swift.(file).Strideable',
  'Swift.(file).CustomReflectable',
  'Swift.(file)._CustomPlaygroundQuickLookable',
  'Swift.(file).SIMDScalar',
  //'Swift.(file)._CVarArgPassedAsDouble',
  'Swift.(file)._CVarArgAligned',
  //'Swift.(file).FloatingPoint',
  //'Swift.(file).ExpressibleByFloatLiteral',
  //'Swift.(file).SignedNumeric',
  //'Swift.(file).Numeric',
  //'Swift.(file).AdditiveArithmetic',
  'Swift.(file).Equatable',
  'Swift.(file).Comparable',
  'Swift.(file).CVarArg',
  //'Swift.(file).FixedWidthInteger',
  //'Swift.(file).UnsignedInteger',
  'Swift.(file)._StringElement',
  //'Swift.(file).BinaryInteger',
  //'Swift.(file).SignedInteger',
  'Swift.(file).MirrorPath'
]
let ALL_PROTOCOLS = []

for(let numeric in PROTOCOLS_BY_NUMERIC) {
    ALL_PROTOCOLS = ALL_PROTOCOLS.concat(PROTOCOLS_BY_NUMERIC[numeric])
}
ALL_PROTOCOLS = [...new Set(ALL_PROTOCOLS)].filter(protocol => !ALLOWED_PROTOCOLS.includes(protocol))
console.log(ALL_PROTOCOLS)