

----Swift.(file)..(error_type).CodeUnit
extension Unicode.ASCII : Unicode.Encoding  {

}

----Swift.(file)..(error_type).EncodedScalar
extension Unicode.ASCII : Unicode.Encoding  {

}

----Swift.(file)..(error_type).encodedReplacementCharacter
extension Unicode.ASCII : Unicode.Encoding  {

}

----Swift.(file)..(error_type).decode(_:Unicode.ASCII.EncodedScalar)
extension Unicode.ASCII : Unicode.Encoding  {

}

----Swift.(file)..(error_type).encode(_:Unicode.Scalar)
extension Unicode.ASCII : Unicode.Encoding  {

}

----Swift.(file)..(error_type).transcode(_:FromEncoding.EncodedScalar,from:FromEncoding.Type)
extension Unicode.ASCII : Unicode.Encoding  {

}

----Swift.(file)..(error_type).Parser.init()
extension  {

}

----Swift.(file)..(error_type).ForwardParser
extension Unicode.ASCII : Unicode.Encoding  {

}

----Swift.(file)..(error_type).ReverseParser
extension Unicode.ASCII : Unicode.Encoding  {

}

----Swift.(file)..(error_type).Encoding
extension Unicode.ASCII.Parser : Unicode.Parser  {

}

----Swift.(file)..(error_type).parseScalar(from:I)
extension Unicode.ASCII.Parser : Unicode.Parser  {

}

----Swift.(file).min(_:T,_:T)


----Swift.(file).min(_:T,_:T,_:T,_:[T])


----Swift.(file).max(_:T,_:T)


----Swift.(file).max(_:T,_:T,_:T,_:[T])


----Swift.(file).EnumeratedSequence.init(_base:Base)
extension EnumeratedSequence {

}

----Swift.(file).EnumeratedSequence.Iterator.init(_base:Base.Iterator)
extension EnumeratedSequence.Iterator {

}

----Swift.(file).EnumeratedSequence.Iterator.Element
extension EnumeratedSequence.Iterator: IteratorProtocol, Sequence  {

}

----Swift.(file).EnumeratedSequence.Iterator.next()
extension EnumeratedSequence.Iterator: IteratorProtocol, Sequence  {

}

----Swift.(file).EnumeratedSequence.makeIterator()
extension EnumeratedSequence: Sequence  {

}

----Swift.(file).AnyHashable.init(_box:_AnyHashableBox)
extension AnyHashable {

}

----Swift.(file).AnyHashable.init(_:H)
extension AnyHashable {

}

----Swift.(file).AnyHashable.init(_usingDefaultRepresentationOf:H)
extension AnyHashable {

}

----Swift.(file).AnyHashable.base
extension AnyHashable {

}

----Swift.(file).AnyHashable.==infix(_:AnyHashable,_:AnyHashable)
extension AnyHashable : Equatable  {

}

----Swift.(file).AnyHashable.hashValue
extension AnyHashable : Hashable  {

}

----Swift.(file).AnyHashable.hash(into:Hasher)
extension AnyHashable : Hashable  {

}

----Swift.(file).AnyHashable.description
extension AnyHashable : CustomStringConvertible  {

}

----Swift.(file).AnyHashable.debugDescription
extension AnyHashable : CustomDebugStringConvertible  {

}

----Swift.(file).AnyHashable.customMirror
extension AnyHashable : CustomReflectable  {

}

----Swift.(file).Array.capacity
extension Array: _ArrayProtocol  {

}

----Swift.(file).Array.Index
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.Indices
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.Iterator
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.startIndex
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.endIndex
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.index(after:Int)
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.formIndex(after:Int)
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.index(before:Int)
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.formIndex(before:Int)
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.index(_:Int,offsetBy:Int)
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.index(_:Int,offsetBy:Int,limitedBy:Int)
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.distance(from:Int,to:Int)
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.count
extension Array: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).Array.init(arrayLiteral:[Element])
extension Array: ExpressibleByArrayLiteral  {

}

----Swift.(file).Array.init(repeating:Element,count:Int)
extension Array: RangeReplaceableCollection  {

}

----Swift.(file).Array.append(_:Element)
extension Array: RangeReplaceableCollection  {

}

----Swift.(file).Array.reserveCapacityForAppend(newElementsCount:Int)
extension Array: RangeReplaceableCollection  {

}

----Swift.(file).Array.insert(_:Element,at:Int)
extension Array: RangeReplaceableCollection  {

}

----Swift.(file).Array.withContiguousMutableStorageIfAvailable(_:(inout UnsafeMutableBufferPointer<Element>) throws -> R)
extension Array: RangeReplaceableCollection  {

}

----Swift.(file).Array.withContiguousStorageIfAvailable(_:(UnsafeBufferPointer<Element>) throws -> R)
extension Array: RangeReplaceableCollection  {

}

----Swift.(file).Array.+infix(_:Array<Element>,_:Array<Element>)
extension Array  {

}

----Swift.(file).Array.+=infix(_:Array<Element>,_:Array<Element>)
extension Array  {

}

----Swift.(file).Array.customMirror
extension Array: CustomReflectable  {

}

----Swift.(file).Array.description
extension Array: CustomStringConvertible, CustomDebugStringConvertible  {

}

----Swift.(file).Array.debugDescription
extension Array: CustomStringConvertible, CustomDebugStringConvertible  {

}

----Swift.(file).Array.hash(into:Hasher)
extension Array: Hashable where Element: Hashable  {

}

----Swift.(file).Array.withUnsafeMutableBytes(_:(UnsafeMutableRawBufferPointer) throws -> R)
extension Array  {

}

----Swift.(file).Array.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
extension Array  {

}

----Swift.(file).Array.init(_immutableCocoaArray:AnyObject)
extension Array  {

}

----Swift.(file)._ArrayBuffer.arrayPropertyIsNativeTypeChecked
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.isUniquelyReferenced()
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:Int)
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.isMutableAndUniquelyReferenced()
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.requestNativeBuffer()
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.subscript(_:Range<Int>)
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.firstElementAddress
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.firstElementAddressIfContiguous
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.count
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.capacity
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.getElement(_:Int,wasNativeTypeChecked:Bool)
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.subscript(_:Int)
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.withUnsafeBufferPointer(_:(UnsafeBufferPointer<Element>) throws -> R)
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.withUnsafeMutableBufferPointer(_:(UnsafeMutableBufferPointer<Element>) throws -> R)
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.owner
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.nativeOwner
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.identity
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.startIndex
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.endIndex
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.Indices
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.Storage
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBuffer.NativeBuffer
extension _ArrayBuffer  {

}

----Swift.(file)._ArrayBufferProtocol.subscriptBaseAddress
extension _ArrayBufferProtocol where Indices == Range<Int> {

}

----Swift.(file)._ArrayBufferProtocol.replaceSubrange(_:Range<Int>,with:Int,elementsOf:C)
extension _ArrayBufferProtocol where Indices == Range<Int> {

}

----Swift.(file).ArraySlice.capacity
extension ArraySlice: _ArrayProtocol  {

}

----Swift.(file).ArraySlice.Index
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.Indices
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.Iterator
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.index(after:Int)
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.formIndex(after:Int)
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.index(before:Int)
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.formIndex(before:Int)
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.index(_:Int,offsetBy:Int)
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.index(_:Int,offsetBy:Int,limitedBy:Int)
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.distance(from:Int,to:Int)
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.count
extension ArraySlice: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ArraySlice.init(repeating:Element,count:Int)
extension ArraySlice: RangeReplaceableCollection  {

}

----Swift.(file).ArraySlice.append(_:Element)
extension ArraySlice: RangeReplaceableCollection  {

}

----Swift.(file).ArraySlice.reserveCapacityForAppend(newElementsCount:Int)
extension ArraySlice: RangeReplaceableCollection  {

}

----Swift.(file).ArraySlice.remove(at:Int)
extension ArraySlice: RangeReplaceableCollection  {

}

----Swift.(file).ArraySlice.insert(_:Element,at:Int)
extension ArraySlice: RangeReplaceableCollection  {

}

----Swift.(file).ArraySlice.withContiguousMutableStorageIfAvailable(_:(inout UnsafeMutableBufferPointer<Element>) throws -> R)
extension ArraySlice: RangeReplaceableCollection  {

}

----Swift.(file).ArraySlice.withContiguousStorageIfAvailable(_:(UnsafeBufferPointer<Element>) throws -> R)
extension ArraySlice: RangeReplaceableCollection  {

}

----Swift.(file).ArraySlice.customMirror
extension ArraySlice: CustomReflectable  {

}

----Swift.(file).ArraySlice.description
extension ArraySlice: CustomStringConvertible, CustomDebugStringConvertible  {

}

----Swift.(file).ArraySlice.debugDescription
extension ArraySlice: CustomStringConvertible, CustomDebugStringConvertible  {

}

----Swift.(file).ArraySlice.hash(into:Hasher)
extension ArraySlice: Hashable where Element: Hashable  {

}

----Swift.(file).ArraySlice.withUnsafeMutableBytes(_:(UnsafeMutableRawBufferPointer) throws -> R)
extension ArraySlice  {

}

----Swift.(file).ArraySlice.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
extension ArraySlice  {

}

----Swift.(file)._ArrayProtocol.filter(_:(Self.Element) throws -> Bool)
extension _ArrayProtocol  {

}

----Swift.(file).assert(_:() -> Bool,_:() -> String,file:StaticString,line:UInt)


----Swift.(file).precondition(_:() -> Bool,_:() -> String,file:StaticString,line:UInt)


----Swift.(file).assertionFailure(_:() -> String,file:StaticString,line:UInt)


----Swift.(file).preconditionFailure(_:() -> String,file:StaticString,line:UInt)


----Swift.(file).fatalError(_:() -> String,file:StaticString,line:UInt)


----Swift.(file).BidirectionalCollection.Element
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.Index
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.SubSequence
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.Indices
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.index(before:Self.Index)
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.formIndex(before:Self.Index)
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.index(after:Self.Index)
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.formIndex(after:Self.Index)
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.index(_:Self.Index,offsetBy:Int)
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.index(_:Self.Index,offsetBy:Int,limitedBy:Self.Index)
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.distance(from:Self.Index,to:Self.Index)
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.indices
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.subscript(_:Range<Self.Index>)
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.subscript(_:Self.Index)
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.startIndex
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.endIndex
extension BidirectionalCollection {

}

----Swift.(file).BidirectionalCollection.formIndex(before:Self.Index)
extension BidirectionalCollection  {

}

----Swift.(file).BidirectionalCollection.index(_:Self.Index,offsetBy:Int)
extension BidirectionalCollection  {

}

----Swift.(file).BidirectionalCollection.index(_:Self.Index,offsetBy:Int,limitedBy:Self.Index)
extension BidirectionalCollection  {

}

----Swift.(file).BidirectionalCollection.distance(from:Self.Index,to:Self.Index)
extension BidirectionalCollection  {

}

----Swift.(file).BidirectionalCollection.popLast()
extension BidirectionalCollection where SubSequence == Self  {

}

----Swift.(file).BidirectionalCollection.removeLast()
extension BidirectionalCollection where SubSequence == Self  {

}

----Swift.(file).BidirectionalCollection.removeLast(_:Int)
extension BidirectionalCollection where SubSequence == Self  {

}

----Swift.(file).BidirectionalCollection.dropLast(_:Int)
extension BidirectionalCollection  {

}

----Swift.(file).BidirectionalCollection.suffix(_:Int)
extension BidirectionalCollection  {

}

----Swift.(file)._UnsafeBitset.word(for:Int)
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.bit(for:Int)
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.split(_:Int)
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.join(word:Int,bit:Int)
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.wordCount(forCapacity:Int)
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.capacity
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.isValid(_:Int)
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.uncheckedContains(_:Int)
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.uncheckedInsert(_:Int)
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.uncheckedRemove(_:Int)
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.clear()
extension _UnsafeBitset  {

}

----Swift.(file)._UnsafeBitset.Element
extension _UnsafeBitset: Sequence  {

}

----Swift.(file)._UnsafeBitset.count
extension _UnsafeBitset: Sequence  {

}

----Swift.(file)._UnsafeBitset.underestimatedCount
extension _UnsafeBitset: Sequence  {

}

----Swift.(file)._UnsafeBitset.makeIterator()
extension _UnsafeBitset: Sequence  {

}

----Swift.(file)._UnsafeBitset.Word.capacity
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.uncheckedContains(_:Int)
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.uncheckedInsert(_:Int)
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.uncheckedRemove(_:Int)
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.minimum
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.maximum
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.complement
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.subtracting(elementsBelow:Int)
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.intersecting(elementsBelow:Int)
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.intersecting(elementsAbove:Int)
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.empty
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.allBits
extension _UnsafeBitset.Word  {

}

----Swift.(file)._UnsafeBitset.Word.count
extension _UnsafeBitset.Word: Sequence, IteratorProtocol  {

}

----Swift.(file)._UnsafeBitset.Word.underestimatedCount
extension _UnsafeBitset.Word: Sequence, IteratorProtocol  {

}

----Swift.(file)._UnsafeBitset.Word.isEmpty
extension _UnsafeBitset.Word: Sequence, IteratorProtocol  {

}

----Swift.(file)._UnsafeBitset.Word.next()
extension _UnsafeBitset.Word: Sequence, IteratorProtocol  {

}

----Swift.(file).Bool.init()
extension Bool {

}

----Swift.(file).Bool.init(_:<<error type>>)
extension Bool {

}

----Swift.(file).Bool.init(_:Bool)
extension Bool {

}

----Swift.(file).Bool.random(using:T)
extension Bool {

}

----Swift.(file).Bool.random()
extension Bool {

}

----Swift.(file).Bool.init(_builtinBooleanLiteral:<<error type>>)
extension Bool : _ExpressibleByBuiltinBooleanLiteral, ExpressibleByBooleanLiteral  {

}

----Swift.(file).Bool.init(booleanLiteral:Bool)
extension Bool : _ExpressibleByBuiltinBooleanLiteral, ExpressibleByBooleanLiteral  {

}

----Swift.(file).Bool.description
extension Bool : CustomStringConvertible  {

}

----Swift.(file).Bool.==infix(_:Bool,_:Bool)
extension Bool: Equatable  {

}

----Swift.(file).Bool.hash(into:Hasher)
extension Bool: Hashable  {

}

----Swift.(file).Bool.init(_:String)
extension Bool : LosslessStringConvertible  {

}

----Swift.(file).Bool.!prefix(_:Bool)
extension Bool  {

}

----Swift.(file).Bool.&&infix(_:Bool,_:() throws -> Bool)
extension Bool  {

}

----Swift.(file).Bool.||infix(_:Bool,_:() throws -> Bool)
extension Bool  {

}

----Swift.(file).Bool.toggle()
extension Bool  {

}

----Swift.(file).AutoreleasingUnsafeMutablePointer.init(_:<<error type>>)
extension AutoreleasingUnsafeMutablePointer {

}

----Swift.(file).AutoreleasingUnsafeMutablePointer.pointee
extension AutoreleasingUnsafeMutablePointer {

}

----Swift.(file).AutoreleasingUnsafeMutablePointer.subscript(_:Int)
extension AutoreleasingUnsafeMutablePointer {

}

----Swift.(file).AutoreleasingUnsafeMutablePointer.init(_:UnsafePointer<U>)
extension AutoreleasingUnsafeMutablePointer {

}

----Swift.(file).AutoreleasingUnsafeMutablePointer.init(_:UnsafePointer<U>?)
extension AutoreleasingUnsafeMutablePointer {

}

----Swift.(file).UnsafeMutableRawPointer.init(_:AutoreleasingUnsafeMutablePointer<T>)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeMutableRawPointer.init(_:AutoreleasingUnsafeMutablePointer<T>?)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeRawPointer.init(_:AutoreleasingUnsafeMutablePointer<T>)
extension UnsafeRawPointer  {

}

----Swift.(file).UnsafeRawPointer.init(_:AutoreleasingUnsafeMutablePointer<T>?)
extension UnsafeRawPointer  {

}

----Swift.(file).ManagedBufferPointer.init(_:Int)
extension ManagedBufferPointer
where Header == _BridgingBufferHeader, Element == AnyObject  {

}

----Swift.(file).ManagedBufferPointer.count
extension ManagedBufferPointer
where Header == _BridgingBufferHeader, Element == AnyObject  {

}

----Swift.(file).ManagedBufferPointer.subscript(_:Int)
extension ManagedBufferPointer
where Header == _BridgingBufferHeader, Element == AnyObject  {

}

----Swift.(file).ManagedBufferPointer.baseAddress
extension ManagedBufferPointer
where Header == _BridgingBufferHeader, Element == AnyObject  {

}

----Swift.(file).ManagedBufferPointer.storage
extension ManagedBufferPointer
where Header == _BridgingBufferHeader, Element == AnyObject  {

}

----Swift.(file).unsafeBitCast(_:T,to:U.Type)


----Swift.(file).==infix(_:<<error type>>,_:<<error type>>)


----Swift.(file).!=infix(_:<<error type>>,_:<<error type>>)


----Swift.(file).==infix(_:<<error type>>,_:<<error type>>)


----Swift.(file).!=infix(_:<<error type>>,_:<<error type>>)


----Swift.(file).==infix(_:Any.Type?,_:Any.Type?)


----Swift.(file).!=infix(_:Any.Type?,_:Any.Type?)


----Swift.(file).unsafeDowncast(_:AnyObject,to:T.Type)


----Swift.(file).getSwiftClassInstanceExtents(_:AnyClass)


----Swift.(file).getObjCClassInstanceExtents(_:AnyClass)


----Swift.(file).ManagedBufferPointer.init(_nativeObject:<<error type>>)
extension ManagedBufferPointer  {

}

----Swift.(file).type(of:T)


----Swift.(file).withoutActuallyEscaping(_:ClosureType,do:(ClosureType) throws -> ResultType)


----Swift.(file).String.init(cString:UnsafePointer<CChar>)
extension String  {

}

----Swift.(file).String.init(cString:UnsafePointer<UInt8>)
extension String  {

}

----Swift.(file).String.init(validatingUTF8:UnsafePointer<CChar>)
extension String  {

}

----Swift.(file).String.decodeCString(_:UnsafePointer<Encoding.CodeUnit>?,as:Encoding.Type,repairingInvalidCodeUnits:Bool)
extension String  {

}

----Swift.(file).String.init(decodingCString:UnsafePointer<Encoding.CodeUnit>,as:Encoding.Type)
extension String  {

}

----Swift.(file).CChar


----Swift.(file).CUnsignedChar


----Swift.(file).CUnsignedShort


----Swift.(file).CUnsignedInt


----Swift.(file).CUnsignedLong


----Swift.(file).CUnsignedLongLong


----Swift.(file).CSignedChar


----Swift.(file).CShort


----Swift.(file).CInt


----Swift.(file).CLong


----Swift.(file).CLongLong


----Swift.(file).CFloat


----Swift.(file).CDouble


----Swift.(file).CLongDouble


----Swift.(file).CWideChar


----Swift.(file).CChar16


----Swift.(file).CChar32


----Swift.(file).CBool


----Swift.(file).OpaquePointer.init(_:<<error type>>)
extension OpaquePointer {

}

----Swift.(file).OpaquePointer.init(bitPattern:Int)
extension OpaquePointer {

}

----Swift.(file).OpaquePointer.init(bitPattern:UInt)
extension OpaquePointer {

}

----Swift.(file).OpaquePointer.init(_:UnsafePointer<T>)
extension OpaquePointer {

}

----Swift.(file).OpaquePointer.init(_:UnsafePointer<T>?)
extension OpaquePointer {

}

----Swift.(file).OpaquePointer.init(_:UnsafeMutablePointer<T>)
extension OpaquePointer {

}

----Swift.(file).OpaquePointer.init(_:UnsafeMutablePointer<T>?)
extension OpaquePointer {

}

----Swift.(file).OpaquePointer.==infix(_:OpaquePointer,_:OpaquePointer)
extension OpaquePointer: Equatable  {

}

----Swift.(file).OpaquePointer.hash(into:Hasher)
extension OpaquePointer: Hashable  {

}

----Swift.(file).OpaquePointer.debugDescription
extension OpaquePointer : CustomDebugStringConvertible  {

}

----Swift.(file).Int.init(bitPattern:OpaquePointer?)
extension Int  {

}

----Swift.(file).UInt.init(bitPattern:OpaquePointer?)
extension UInt  {

}

----Swift.(file).CVaListPointer.init(_fromUnsafeMutablePointer:UnsafeMutableRawPointer)
extension CVaListPointer {

}

----Swift.(file).CVaListPointer.debugDescription
extension CVaListPointer : CustomDebugStringConvertible  {

}

----Swift.(file).Character.init(unchecked:String)
extension Character {

}

----Swift.(file).Character.UTF8View
extension Character  {

}

----Swift.(file).Character.utf8
extension Character  {

}

----Swift.(file).Character.UTF16View
extension Character  {

}

----Swift.(file).Character.utf16
extension Character  {

}

----Swift.(file).Character.UnicodeScalarView
extension Character  {

}

----Swift.(file).Character.unicodeScalars
extension Character  {

}

----Swift.(file).Character.init(_:Unicode.Scalar)
extension Character :
  _ExpressibleByBuiltinExtendedGraphemeClusterLiteral,
  ExpressibleByExtendedGraphemeClusterLiteral
 {

}

----Swift.(file).Character.init(_builtinUnicodeScalarLiteral:<<error type>>)
extension Character :
  _ExpressibleByBuiltinExtendedGraphemeClusterLiteral,
  ExpressibleByExtendedGraphemeClusterLiteral
 {

}

----Swift.(file).Character.init(_builtinExtendedGraphemeClusterLiteral:<<error type>>,utf8CodeUnitCount:<<error type>>,isASCII:<<error type>>)
extension Character :
  _ExpressibleByBuiltinExtendedGraphemeClusterLiteral,
  ExpressibleByExtendedGraphemeClusterLiteral
 {

}

----Swift.(file).Character.init(extendedGraphemeClusterLiteral:Character)
extension Character :
  _ExpressibleByBuiltinExtendedGraphemeClusterLiteral,
  ExpressibleByExtendedGraphemeClusterLiteral
 {

}

----Swift.(file).Character.init(_:String)
extension Character :
  _ExpressibleByBuiltinExtendedGraphemeClusterLiteral,
  ExpressibleByExtendedGraphemeClusterLiteral
 {

}

----Swift.(file).Character.description
extension Character : CustomStringConvertible  {

}

----Swift.(file).Character.debugDescription
extension Character : CustomDebugStringConvertible  {

}

----Swift.(file).Character.==infix(_:Character,_:Character)
extension Character : Equatable  {

}

----Swift.(file).Character.<infix(_:Character,_:Character)
extension Character : Comparable  {

}

----Swift.(file).Character.hash(into:Hasher)
extension Character: Hashable  {

}

----Swift.(file).Character.isASCII
extension Character  {

}

----Swift.(file).Character.asciiValue
extension Character  {

}

----Swift.(file).Character.isWhitespace
extension Character  {

}

----Swift.(file).Character.isNewline
extension Character  {

}

----Swift.(file).Character.isNumber
extension Character  {

}

----Swift.(file).Character.isWholeNumber
extension Character  {

}

----Swift.(file).Character.wholeNumberValue
extension Character  {

}

----Swift.(file).Character.isHexDigit
extension Character  {

}

----Swift.(file).Character.hexDigitValue
extension Character  {

}

----Swift.(file).Character.isLetter
extension Character  {

}

----Swift.(file).Character.uppercased()
extension Character  {

}

----Swift.(file).Character.lowercased()
extension Character  {

}

----Swift.(file).Character.isUppercase
extension Character  {

}

----Swift.(file).Character.isLowercase
extension Character  {

}

----Swift.(file).Character.isCased
extension Character  {

}

----Swift.(file).Character.isSymbol
extension Character  {

}

----Swift.(file).Character.isMathSymbol
extension Character  {

}

----Swift.(file).Character.isCurrencySymbol
extension Character  {

}

----Swift.(file).Character.isPunctuation
extension Character  {

}

----Swift.(file).ClosedRange.lowerBound
extension ClosedRange {

}

----Swift.(file).ClosedRange.upperBound
extension ClosedRange {

}

----Swift.(file).ClosedRange.init(uncheckedBounds:(lower: Bound, upper: Bound))
extension ClosedRange {

}

----Swift.(file).ClosedRange.isEmpty
extension ClosedRange  {

}

----Swift.(file).ClosedRange.relative(to:C)
extension ClosedRange: RangeExpression  {

}

----Swift.(file).ClosedRange.contains(_:Bound)
extension ClosedRange: RangeExpression  {

}

----Swift.(file).ClosedRange.Element
extension ClosedRange: Sequence
where Bound: Strideable, Bound.Stride: SignedInteger  {

}

----Swift.(file).ClosedRange.Iterator
extension ClosedRange: Sequence
where Bound: Strideable, Bound.Stride: SignedInteger  {

}

----Swift.(file).ClosedRange.Index.pastEnd
extension ClosedRange.Index {

}

----Swift.(file).ClosedRange.Index.inRange
extension ClosedRange.Index {

}

----Swift.(file).ClosedRange.Index.==infix(_:ClosedRange<Bound>.Index,_:ClosedRange<Bound>.Index)
extension ClosedRange.Index : Comparable  {

}

----Swift.(file).ClosedRange.Index.<infix(_:ClosedRange<Bound>.Index,_:ClosedRange<Bound>.Index)
extension ClosedRange.Index : Comparable  {

}

----Swift.(file).ClosedRange.Index.hash(into:Hasher)
extension ClosedRange.Index: Hashable
where Bound: Strideable, Bound.Stride: SignedInteger, Bound: Hashable  {

}

----Swift.(file).ClosedRange.SubSequence
extension ClosedRange: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).ClosedRange.startIndex
extension ClosedRange: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).ClosedRange.endIndex
extension ClosedRange: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).ClosedRange.index(after:ClosedRange<Bound>.Index)
extension ClosedRange: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).ClosedRange.index(before:ClosedRange<Bound>.Index)
extension ClosedRange: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).ClosedRange.index(_:ClosedRange<Bound>.Index,offsetBy:Int)
extension ClosedRange: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).ClosedRange.distance(from:ClosedRange<Bound>.Index,to:ClosedRange<Bound>.Index)
extension ClosedRange: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).ClosedRange.subscript(_:ClosedRange<Bound>.Index)
extension ClosedRange: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).ClosedRange.subscript(_:Range<ClosedRange<Bound>.Index>)
extension ClosedRange: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Comparable....infix(_:Self,_:Self)
extension Comparable  {

}

----Swift.(file).ClosedRange.==infix(_:ClosedRange<Bound>,_:ClosedRange<Bound>)
extension ClosedRange: Equatable  {

}

----Swift.(file).ClosedRange.hash(into:Hasher)
extension ClosedRange: Hashable where Bound: Hashable  {

}

----Swift.(file).ClosedRange.description
extension ClosedRange : CustomStringConvertible  {

}

----Swift.(file).ClosedRange.debugDescription
extension ClosedRange : CustomDebugStringConvertible  {

}

----Swift.(file).ClosedRange.customMirror
extension ClosedRange : CustomReflectable  {

}

----Swift.(file).ClosedRange.clamped(to:ClosedRange<Bound>)
extension ClosedRange  {

}

----Swift.(file).ClosedRange.init(_:Range<Bound>)
extension ClosedRange where Bound: Strideable, Bound.Stride : SignedInteger  {

}

----Swift.(file).ClosedRange.overlaps(_:ClosedRange<Bound>)
extension ClosedRange  {

}

----Swift.(file).ClosedRange.overlaps(_:Range<Bound>)
extension ClosedRange  {

}

----Swift.(file).CountableClosedRange


----Swift.(file).IndexingIterator.init(_elements:Elements)
extension IndexingIterator {

}

----Swift.(file).IndexingIterator.init(_elements:Elements,_position:Elements.Index)
extension IndexingIterator {

}

----Swift.(file).IndexingIterator.Element
extension IndexingIterator: IteratorProtocol, Sequence  {

}

----Swift.(file).IndexingIterator.Iterator
extension IndexingIterator: IteratorProtocol, Sequence  {

}

----Swift.(file).IndexingIterator.SubSequence
extension IndexingIterator: IteratorProtocol, Sequence  {

}

----Swift.(file).IndexingIterator.next()
extension IndexingIterator: IteratorProtocol, Sequence  {

}

----Swift.(file).Collection.IndexDistance
extension Collection {

}

----Swift.(file).Collection.Element
extension Collection {

}

----Swift.(file).Collection.Index
extension Collection {

}

----Swift.(file).Collection.startIndex
extension Collection {

}

----Swift.(file).Collection.endIndex
extension Collection {

}

----Swift.(file).Collection.Iterator
extension Collection {

}

----Swift.(file).Collection.makeIterator()
extension Collection {

}

----Swift.(file).Collection.SubSequence
extension Collection {

}

----Swift.(file).Collection.subscript(_:Self.Index)
extension Collection {

}

----Swift.(file).Collection.subscript(_:Range<Self.Index>)
extension Collection {

}

----Swift.(file).Collection.Indices
extension Collection {

}

----Swift.(file).Collection.indices
extension Collection {

}

----Swift.(file).Collection.isEmpty
extension Collection {

}

----Swift.(file).Collection.count
extension Collection {

}

----Swift.(file).Collection.index(_:Self.Index,offsetBy:Int)
extension Collection {

}

----Swift.(file).Collection.index(_:Self.Index,offsetBy:Int,limitedBy:Self.Index)
extension Collection {

}

----Swift.(file).Collection.distance(from:Self.Index,to:Self.Index)
extension Collection {

}

----Swift.(file).Collection.index(after:Self.Index)
extension Collection {

}

----Swift.(file).Collection.formIndex(after:Self.Index)
extension Collection {

}

----Swift.(file).Collection.formIndex(after:Self.Index)
extension Collection  {

}

----Swift.(file).Collection.index(_:Self.Index,offsetBy:Int)
extension Collection  {

}

----Swift.(file).Collection.index(_:Self.Index,offsetBy:Int,limitedBy:Self.Index)
extension Collection  {

}

----Swift.(file).Collection.formIndex(_:Self.Index,offsetBy:Int)
extension Collection  {

}

----Swift.(file).Collection.formIndex(_:Self.Index,offsetBy:Int,limitedBy:Self.Index)
extension Collection  {

}

----Swift.(file).Collection.distance(from:Self.Index,to:Self.Index)
extension Collection  {

}

----Swift.(file).Collection.randomElement(using:T)
extension Collection  {

}

----Swift.(file).Collection.randomElement()
extension Collection  {

}

----Swift.(file).Collection.makeIterator()
extension Collection where Iterator == IndexingIterator<Self>  {

}

----Swift.(file).Collection.subscript(_:Range<Self.Index>)
extension Collection where SubSequence == Slice<Self>  {

}

----Swift.(file).Collection.popFirst()
extension Collection where SubSequence == Self  {

}

----Swift.(file).Collection.isEmpty
extension Collection  {

}

----Swift.(file).Collection.first
extension Collection  {

}

----Swift.(file).Collection.underestimatedCount
extension Collection  {

}

----Swift.(file).Collection.count
extension Collection  {

}

----Swift.(file).Collection.map(_:(Self.Element) throws -> T)
extension Collection  {

}

----Swift.(file).Collection.dropFirst(_:Int)
extension Collection  {

}

----Swift.(file).Collection.dropLast(_:Int)
extension Collection  {

}

----Swift.(file).Collection.drop(while:(Self.Element) throws -> Bool)
extension Collection  {

}

----Swift.(file).Collection.prefix(_:Int)
extension Collection  {

}

----Swift.(file).Collection.prefix(while:(Self.Element) throws -> Bool)
extension Collection  {

}

----Swift.(file).Collection.suffix(_:Int)
extension Collection  {

}

----Swift.(file).Collection.prefix(upTo:Self.Index)
extension Collection  {

}

----Swift.(file).Collection.suffix(from:Self.Index)
extension Collection  {

}

----Swift.(file).Collection.prefix(through:Self.Index)
extension Collection  {

}

----Swift.(file).Collection.split(maxSplits:Int,omittingEmptySubsequences:Bool,whereSeparator:(Self.Element) throws -> Bool)
extension Collection  {

}

----Swift.(file).Collection.split(separator:Self.Element,maxSplits:Int,omittingEmptySubsequences:Bool)
extension Collection where Element : Equatable  {

}

----Swift.(file).Collection.removeFirst()
extension Collection where SubSequence == Self  {

}

----Swift.(file).Collection.removeFirst(_:Int)
extension Collection where SubSequence == Self  {

}

----Swift.(file).BidirectionalCollection.last
extension BidirectionalCollection  {

}

----Swift.(file).Collection.firstIndex(of:Self.Element)
extension Collection where Element : Equatable  {

}

----Swift.(file).Collection.firstIndex(where:(Self.Element) throws -> Bool)
extension Collection  {

}

----Swift.(file).BidirectionalCollection.last(where:(Self.Element) throws -> Bool)
extension BidirectionalCollection  {

}

----Swift.(file).BidirectionalCollection.lastIndex(where:(Self.Element) throws -> Bool)
extension BidirectionalCollection  {

}

----Swift.(file).BidirectionalCollection.lastIndex(of:Self.Element)
extension BidirectionalCollection where Element : Equatable  {

}

----Swift.(file).MutableCollection.partition(by:(Self.Element) throws -> Bool)
extension MutableCollection  {

}

----Swift.(file).MutableCollection.partition(by:(Self.Element) throws -> Bool)
extension MutableCollection where Self : BidirectionalCollection  {

}

----Swift.(file).Sequence.shuffled(using:T)
extension Sequence  {

}

----Swift.(file).Sequence.shuffled()
extension Sequence  {

}

----Swift.(file).MutableCollection.shuffle(using:T)
extension MutableCollection where Self : RandomAccessCollection  {

}

----Swift.(file).MutableCollection.shuffle()
extension MutableCollection where Self : RandomAccessCollection  {

}

----Swift.(file).CollectionOfOne.init(_:Element)
extension CollectionOfOne {

}

----Swift.(file).CollectionOfOne.Iterator.init(_elements:Element?)
extension CollectionOfOne.Iterator {

}

----Swift.(file).CollectionOfOne.Iterator.next()
extension CollectionOfOne.Iterator: IteratorProtocol  {

}

----Swift.(file).CollectionOfOne.Index
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.Indices
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.SubSequence
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.startIndex
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.endIndex
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.index(after:CollectionOfOne<Element>.Index)
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.index(before:CollectionOfOne<Element>.Index)
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.makeIterator()
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.subscript(_:Int)
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.subscript(_:Range<Int>)
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.count
extension CollectionOfOne: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).CollectionOfOne.debugDescription
extension CollectionOfOne : CustomDebugStringConvertible  {

}

----Swift.(file).CollectionOfOne.customMirror
extension CollectionOfOne : CustomReflectable  {

}

----Swift.(file).Comparable.<infix(_:Self,_:Self)
extension Comparable {

}

----Swift.(file).Comparable.<=infix(_:Self,_:Self)
extension Comparable {

}

----Swift.(file).Comparable.>=infix(_:Self,_:Self)
extension Comparable {

}

----Swift.(file).Comparable.>infix(_:Self,_:Self)
extension Comparable {

}

----Swift.(file).Comparable.>infix(_:Self,_:Self)
extension Comparable  {

}

----Swift.(file).Comparable.<=infix(_:Self,_:Self)
extension Comparable  {

}

----Swift.(file).Comparable.>=infix(_:Self,_:Self)
extension Comparable  {

}

----Swift.(file).RawRepresentable.RawValue
extension RawRepresentable {

}

----Swift.(file).RawRepresentable.init(rawValue:Self.RawValue)
extension RawRepresentable {

}

----Swift.(file).RawRepresentable.rawValue
extension RawRepresentable {

}

----Swift.(file).==infix(_:T,_:T)


----Swift.(file).!=infix(_:T,_:T)


----Swift.(file).!=infix(_:T,_:T)


----Swift.(file).RawRepresentable.hashValue
extension RawRepresentable where RawValue: Hashable, Self: Hashable  {

}

----Swift.(file).RawRepresentable.hash(into:Hasher)
extension RawRepresentable where RawValue: Hashable, Self: Hashable  {

}

----Swift.(file).CaseIterable.AllCases
extension CaseIterable {

}

----Swift.(file).CaseIterable.allCases
extension CaseIterable {

}

----Swift.(file).ExpressibleByNilLiteral.init(nilLiteral:())
extension ExpressibleByNilLiteral {

}

----Swift.(file).ExpressibleByIntegerLiteral.IntegerLiteralType
extension ExpressibleByIntegerLiteral {

}

----Swift.(file).ExpressibleByIntegerLiteral.init(integerLiteral:Self.IntegerLiteralType)
extension ExpressibleByIntegerLiteral {

}

----Swift.(file).ExpressibleByFloatLiteral.FloatLiteralType
extension ExpressibleByFloatLiteral {

}

----Swift.(file).ExpressibleByFloatLiteral.init(floatLiteral:Self.FloatLiteralType)
extension ExpressibleByFloatLiteral {

}

----Swift.(file).ExpressibleByBooleanLiteral.BooleanLiteralType
extension ExpressibleByBooleanLiteral {

}

----Swift.(file).ExpressibleByBooleanLiteral.init(booleanLiteral:Self.BooleanLiteralType)
extension ExpressibleByBooleanLiteral {

}

----Swift.(file).ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType
extension ExpressibleByUnicodeScalarLiteral {

}

----Swift.(file).ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:Self.UnicodeScalarLiteralType)
extension ExpressibleByUnicodeScalarLiteral {

}

----Swift.(file).ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType
extension ExpressibleByExtendedGraphemeClusterLiteral {

}

----Swift.(file).ExpressibleByExtendedGraphemeClusterLiteral.init(extendedGraphemeClusterLiteral:Self.ExtendedGraphemeClusterLiteralType)
extension ExpressibleByExtendedGraphemeClusterLiteral {

}

----Swift.(file).ExpressibleByExtendedGraphemeClusterLiteral.init(unicodeScalarLiteral:Self.ExtendedGraphemeClusterLiteralType)
extension ExpressibleByExtendedGraphemeClusterLiteral
  where ExtendedGraphemeClusterLiteralType == UnicodeScalarLiteralType  {

}

----Swift.(file).ExpressibleByStringLiteral.StringLiteralType
extension ExpressibleByStringLiteral {

}

----Swift.(file).ExpressibleByStringLiteral.init(stringLiteral:Self.StringLiteralType)
extension ExpressibleByStringLiteral {

}

----Swift.(file).ExpressibleByStringLiteral.init(extendedGraphemeClusterLiteral:Self.StringLiteralType)
extension ExpressibleByStringLiteral
  where StringLiteralType == ExtendedGraphemeClusterLiteralType  {

}

----Swift.(file).ExpressibleByArrayLiteral.ArrayLiteralElement
extension ExpressibleByArrayLiteral {

}

----Swift.(file).ExpressibleByArrayLiteral.init(arrayLiteral:[Self.ArrayLiteralElement])
extension ExpressibleByArrayLiteral {

}

----Swift.(file).ExpressibleByDictionaryLiteral.Key
extension ExpressibleByDictionaryLiteral {

}

----Swift.(file).ExpressibleByDictionaryLiteral.Value
extension ExpressibleByDictionaryLiteral {

}

----Swift.(file).ExpressibleByDictionaryLiteral.init(dictionaryLiteral:[(Self.Key, Self.Value)])
extension ExpressibleByDictionaryLiteral {

}

----Swift.(file).ExpressibleByStringInterpolation.StringInterpolation
extension ExpressibleByStringInterpolation {

}

----Swift.(file).ExpressibleByStringInterpolation.init(stringInterpolation:Self.StringInterpolation)
extension ExpressibleByStringInterpolation {

}

----Swift.(file).ExpressibleByStringInterpolation.init(stringInterpolation:DefaultStringInterpolation)
extension ExpressibleByStringInterpolation
  where StringInterpolation == DefaultStringInterpolation  {

}

----Swift.(file).StringInterpolationProtocol.StringLiteralType
extension StringInterpolationProtocol {

}

----Swift.(file).StringInterpolationProtocol.init(literalCapacity:Int,interpolationCount:Int)
extension StringInterpolationProtocol {

}

----Swift.(file).StringInterpolationProtocol.appendLiteral(_:Self.StringLiteralType)
extension StringInterpolationProtocol {

}

----Swift.(file).ContiguousArray.capacity
extension ContiguousArray: _ArrayProtocol  {

}

----Swift.(file).ContiguousArray.Index
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.Indices
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.Iterator
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.startIndex
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.endIndex
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.index(after:Int)
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.formIndex(after:Int)
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.index(before:Int)
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.formIndex(before:Int)
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.index(_:Int,offsetBy:Int)
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.index(_:Int,offsetBy:Int,limitedBy:Int)
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.distance(from:Int,to:Int)
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.count
extension ContiguousArray: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).ContiguousArray.init(repeating:Element,count:Int)
extension ContiguousArray: RangeReplaceableCollection  {

}

----Swift.(file).ContiguousArray.append(_:Element)
extension ContiguousArray: RangeReplaceableCollection  {

}

----Swift.(file).ContiguousArray.reserveCapacityForAppend(newElementsCount:Int)
extension ContiguousArray: RangeReplaceableCollection  {

}

----Swift.(file).ContiguousArray.insert(_:Element,at:Int)
extension ContiguousArray: RangeReplaceableCollection  {

}

----Swift.(file).ContiguousArray.withContiguousMutableStorageIfAvailable(_:(inout UnsafeMutableBufferPointer<Element>) throws -> R)
extension ContiguousArray: RangeReplaceableCollection  {

}

----Swift.(file).ContiguousArray.withContiguousStorageIfAvailable(_:(UnsafeBufferPointer<Element>) throws -> R)
extension ContiguousArray: RangeReplaceableCollection  {

}

----Swift.(file).ContiguousArray.customMirror
extension ContiguousArray: CustomReflectable  {

}

----Swift.(file).ContiguousArray.description
extension ContiguousArray: CustomStringConvertible, CustomDebugStringConvertible  {

}

----Swift.(file).ContiguousArray.debugDescription
extension ContiguousArray: CustomStringConvertible, CustomDebugStringConvertible  {

}

----Swift.(file).ContiguousArray.hash(into:Hasher)
extension ContiguousArray: Hashable where Element: Hashable  {

}

----Swift.(file).ContiguousArray.withUnsafeMutableBytes(_:(UnsafeMutableRawBufferPointer) throws -> R)
extension ContiguousArray  {

}

----Swift.(file).ContiguousArray.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
extension ContiguousArray  {

}

----Swift.(file).+=infix(_:_ContiguousArrayBuffer<Element>,_:C)


----Swift.(file)._ContiguousArrayBuffer.startIndex
extension _ContiguousArrayBuffer : RandomAccessCollection  {

}

----Swift.(file)._ContiguousArrayBuffer.endIndex
extension _ContiguousArrayBuffer : RandomAccessCollection  {

}

----Swift.(file)._ContiguousArrayBuffer.Indices
extension _ContiguousArrayBuffer : RandomAccessCollection  {

}

----Swift.(file).UnsafeBufferPointer.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
extension UnsafeBufferPointer: _HasContiguousBytes  {

}

----Swift.(file).UnsafeMutableBufferPointer.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
extension UnsafeMutableBufferPointer: _HasContiguousBytes  {

}

----Swift.(file).String.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
extension String: _HasContiguousBytes  {

}

----Swift.(file).Substring.withUnsafeBytes(_:(UnsafeRawBufferPointer) throws -> R)
extension Substring: _HasContiguousBytes  {

}

----Swift.(file).Dictionary.init()
extension Dictionary {

}

----Swift.(file).Dictionary.init(uniqueKeysWithValues:S)
extension Dictionary {

}

----Swift.(file).Dictionary.init(_:S,uniquingKeysWith:(Value, Value) throws -> Value)
extension Dictionary {

}

----Swift.(file).Dictionary.init(grouping:S,by:(S.Element) throws -> Key)
extension Dictionary {

}

----Swift.(file)..(error_type).bridged()
extension _NativeDictionary  {

}

----Swift.(file)._CocoaDictionary.isEqual(to:_CocoaDictionary)
extension _CocoaDictionary  {

}

----Swift.(file)._CocoaDictionary.Key
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.Value
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.startIndex
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.endIndex
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.index(after:_CocoaDictionary.Index)
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.validate(_:_CocoaDictionary.Index)
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.formIndex(after:_CocoaDictionary.Index,isUnique:Bool)
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.index(forKey:_CocoaDictionary.Key)
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.count
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.contains(_:_CocoaDictionary.Key)
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.lookup(_:_CocoaDictionary.Key)
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.lookup(_:_CocoaDictionary.Index)
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.key(at:_CocoaDictionary.Index)
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.value(at:_CocoaDictionary.Index)
extension _CocoaDictionary: _DictionaryBuffer  {

}

----Swift.(file)._CocoaDictionary.mapValues(_:(Value) throws -> T)
extension _CocoaDictionary  {

}

----Swift.(file)._CocoaDictionary.Index.handleBitPattern
extension _CocoaDictionary.Index  {

}

----Swift.(file)._CocoaDictionary.Index.dictionary
extension _CocoaDictionary.Index  {

}

----Swift.(file)._CocoaDictionary.Index.key
extension _CocoaDictionary.Index  {

}

----Swift.(file)._CocoaDictionary.Index.age
extension _CocoaDictionary.Index  {

}

----Swift.(file)._CocoaDictionary.Index.==infix(_:_CocoaDictionary.Index,_:_CocoaDictionary.Index)
extension _CocoaDictionary.Index: Equatable  {

}

----Swift.(file)._CocoaDictionary.Index.<infix(_:_CocoaDictionary.Index,_:_CocoaDictionary.Index)
extension _CocoaDictionary.Index: Comparable  {

}

----Swift.(file)._CocoaDictionary.makeIterator()
extension _CocoaDictionary: Sequence  {

}

----Swift.(file)._CocoaDictionary.Iterator.Element
extension _CocoaDictionary.Iterator: IteratorProtocol  {

}

----Swift.(file)._CocoaDictionary.Iterator.nextKey()
extension _CocoaDictionary.Iterator: IteratorProtocol  {

}

----Swift.(file)._CocoaDictionary.Iterator.next()
extension _CocoaDictionary.Iterator: IteratorProtocol  {

}

----Swift.(file).Dictionary.init(_unsafeUninitializedCapacity:Int,allowingDuplicates:Bool,initializingWith:(UnsafeMutableBufferPointer<Key>, UnsafeMutableBufferPointer<Value>, inout Int) -> Void)
extension Dictionary  {

}

----Swift.(file)..(error_type).init(_unsafeUninitializedCapacity:Int,allowingDuplicates:Bool,initializingWith:<<error type>>)
extension _NativeDictionary  {

}

----Swift.(file)._EmptyDictionarySingleton.copy(with:<<error type>>)
extension _EmptyDictionarySingleton: _NSDictionaryCore  {

}

----Swift.(file)._EmptyDictionarySingleton.count
extension _EmptyDictionarySingleton: _NSDictionaryCore  {

}

----Swift.(file)._EmptyDictionarySingleton.countByEnumerating(with:UnsafeMutablePointer<_SwiftNSFastEnumerationState>,objects:UnsafeMutablePointer<AnyObject>?,count:Int)
extension _EmptyDictionarySingleton: _NSDictionaryCore  {

}

----Swift.(file)._EmptyDictionarySingleton.object(forKey:AnyObject)
extension _EmptyDictionarySingleton: _NSDictionaryCore  {

}

----Swift.(file)._EmptyDictionarySingleton.keyEnumerator()
extension _EmptyDictionarySingleton: _NSDictionaryCore  {

}

----Swift.(file)._EmptyDictionarySingleton.getObjects(_:UnsafeMutablePointer<AnyObject>?,andKeys:UnsafeMutablePointer<AnyObject>?,count:Int)
extension _EmptyDictionarySingleton: _NSDictionaryCore  {

}

----Swift.(file)._RawDictionaryStorage.empty
extension _RawDictionaryStorage  {

}

----Swift.(file)._DictionaryStorage.copy(original:_RawDictionaryStorage)
extension _DictionaryStorage  {

}

----Swift.(file)._DictionaryStorage.resize(original:_RawDictionaryStorage,capacity:Int,move:Bool)
extension _DictionaryStorage  {

}

----Swift.(file)._DictionaryStorage.allocate(capacity:Int)
extension _DictionaryStorage  {

}

----Swift.(file)._DictionaryStorage.convert(_:<<error type>>,capacity:Int)
extension _DictionaryStorage  {

}

----Swift.(file)._DictionaryStorage.allocate(scale:Int8,age:Int32?,seed:Int?)
extension _DictionaryStorage  {

}

----Swift.(file).LazyDropWhileSequence.Element
extension LazyDropWhileSequence {

}

----Swift.(file).LazyDropWhileSequence.init(_base:Base,predicate:(LazyDropWhileSequence<Base>.Element) -> Bool)
extension LazyDropWhileSequence {

}

----Swift.(file).LazyDropWhileSequence.Iterator.Element
extension LazyDropWhileSequence.Iterator {

}

----Swift.(file).LazyDropWhileSequence.Iterator.init(_base:Base.Iterator,predicate:(LazyDropWhileSequence<Base>.Iterator.Element) -> Bool)
extension LazyDropWhileSequence.Iterator {

}

----Swift.(file).LazyDropWhileSequence.Iterator.next()
extension LazyDropWhileSequence.Iterator: IteratorProtocol  {

}

----Swift.(file).LazyDropWhileSequence.makeIterator()
extension LazyDropWhileSequence: Sequence  {

}

----Swift.(file).LazyDropWhileSequence.Elements
extension LazyDropWhileSequence: LazySequenceProtocol  {

}

----Swift.(file).LazySequenceProtocol.drop(while:(Self.Elements.Element) -> Bool)
extension LazySequenceProtocol  {

}

----Swift.(file).LazyDropWhileCollection


----Swift.(file).LazyDropWhileCollection.SubSequence
extension LazyDropWhileCollection: Collection  {

}

----Swift.(file).LazyDropWhileCollection.Index
extension LazyDropWhileCollection: Collection  {

}

----Swift.(file).LazyDropWhileCollection.startIndex
extension LazyDropWhileCollection: Collection  {

}

----Swift.(file).LazyDropWhileCollection.endIndex
extension LazyDropWhileCollection: Collection  {

}

----Swift.(file).LazyDropWhileCollection.index(after:LazyDropWhileSequence<Base>.Index)
extension LazyDropWhileCollection: Collection  {

}

----Swift.(file).LazyDropWhileCollection.subscript(_:LazyDropWhileSequence<Base>.Index)
extension LazyDropWhileCollection: Collection  {

}

----Swift.(file).LazyDropWhileCollection.index(before:LazyDropWhileSequence<Base>.Index)
extension LazyDropWhileCollection: BidirectionalCollection 
where Base: BidirectionalCollection  {

}

----Swift.(file).dump(_:T,to:TargetStream,name:String?,indent:Int,maxDepth:Int,maxItems:Int)


----Swift.(file).dump(_:T,name:String?,indent:Int,maxDepth:Int,maxItems:Int)


----Swift.(file).EmptyCollection.init()
extension EmptyCollection {

}

----Swift.(file).EmptyCollection.Iterator.init()
extension EmptyCollection.Iterator {

}

----Swift.(file).EmptyCollection.Iterator.next()
extension EmptyCollection.Iterator: IteratorProtocol, Sequence  {

}

----Swift.(file).EmptyCollection.makeIterator()
extension EmptyCollection: Sequence  {

}

----Swift.(file).EmptyCollection.Index
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.Indices
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.SubSequence
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.startIndex
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.endIndex
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.index(after:EmptyCollection<Element>.Index)
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.index(before:EmptyCollection<Element>.Index)
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.subscript(_:EmptyCollection<Element>.Index)
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.subscript(_:Range<EmptyCollection<Element>.Index>)
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.count
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.index(_:EmptyCollection<Element>.Index,offsetBy:Int)
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.index(_:EmptyCollection<Element>.Index,offsetBy:Int,limitedBy:EmptyCollection<Element>.Index)
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.distance(from:EmptyCollection<Element>.Index,to:EmptyCollection<Element>.Index)
extension EmptyCollection: RandomAccessCollection, MutableCollection  {

}

----Swift.(file).EmptyCollection.==infix(_:EmptyCollection<Element>,_:EmptyCollection<Element>)
extension EmptyCollection : Equatable  {

}

----Swift.(file).Equatable.==infix(_:Self,_:Self)
extension Equatable {

}

----Swift.(file).Equatable.!=infix(_:Self,_:Self)
extension Equatable  {

}

----Swift.(file).===infix(_:AnyObject?,_:AnyObject?)


----Swift.(file).!==infix(_:AnyObject?,_:AnyObject?)


----Swift.(file).LazyFilterSequence.init(_base:Base,_:(Base.Element) -> Bool)
extension LazyFilterSequence {

}

----Swift.(file).LazyFilterSequence.Iterator.base
extension LazyFilterSequence.Iterator {

}

----Swift.(file).LazyFilterSequence.Iterator.init(_base:Base.Iterator,_:(Base.Element) -> Bool)
extension LazyFilterSequence.Iterator {

}

----Swift.(file).LazyFilterSequence.Iterator.Element
extension LazyFilterSequence.Iterator: IteratorProtocol, Sequence  {

}

----Swift.(file).LazyFilterSequence.Iterator.next()
extension LazyFilterSequence.Iterator: IteratorProtocol, Sequence  {

}

----Swift.(file).LazyFilterSequence.Element
extension LazyFilterSequence: Sequence  {

}

----Swift.(file).LazyFilterSequence.makeIterator()
extension LazyFilterSequence: Sequence  {

}

----Swift.(file).LazyFilterCollection


----Swift.(file).LazyFilterCollection.SubSequence
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.underestimatedCount
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.Index
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.startIndex
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.endIndex
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.index(after:LazyFilterSequence<Base>.Index)
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.formIndex(after:LazyFilterSequence<Base>.Index)
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.distance(from:LazyFilterSequence<Base>.Index,to:LazyFilterSequence<Base>.Index)
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.index(_:LazyFilterSequence<Base>.Index,offsetBy:Int)
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.formIndex(_:LazyFilterSequence<Base>.Index,offsetBy:Int)
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.index(_:LazyFilterSequence<Base>.Index,offsetBy:Int,limitedBy:LazyFilterSequence<Base>.Index)
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.formIndex(_:LazyFilterSequence<Base>.Index,offsetBy:Int,limitedBy:LazyFilterSequence<Base>.Index)
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.subscript(_:LazyFilterSequence<Base>.Index)
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.subscript(_:Range<LazyFilterSequence<Base>.Index>)
extension LazyFilterCollection: Collection  {

}

----Swift.(file).LazyFilterCollection.index(before:LazyFilterSequence<Base>.Index)
extension LazyFilterCollection : BidirectionalCollection
  where Base : BidirectionalCollection  {

}

----Swift.(file).LazyFilterCollection.formIndex(before:LazyFilterSequence<Base>.Index)
extension LazyFilterCollection : BidirectionalCollection
  where Base : BidirectionalCollection  {

}

----Swift.(file).LazySequenceProtocol.filter(_:(Self.Elements.Element) -> Bool)
extension LazySequenceProtocol  {

}

----Swift.(file).LazyFilterSequence.filter(_:(LazyFilterSequence<Base>.Element) -> Bool)
extension LazyFilterSequence  {

}

----Swift.(file).LazySequenceProtocol.flatMap(_:(Self.Elements.Element) -> SegmentOfResult)
extension LazySequenceProtocol  {

}

----Swift.(file).LazySequenceProtocol.compactMap(_:(Self.Elements.Element) -> ElementOfResult?)
extension LazySequenceProtocol  {

}

----Swift.(file).FlattenSequence.init(_base:Base)
extension FlattenSequence {

}

----Swift.(file).FlattenSequence.Iterator.init(_base:Base.Iterator)
extension FlattenSequence.Iterator {

}

----Swift.(file).FlattenSequence.Iterator.Element
extension FlattenSequence.Iterator: IteratorProtocol  {

}

----Swift.(file).FlattenSequence.Iterator.next()
extension FlattenSequence.Iterator: IteratorProtocol  {

}

----Swift.(file).FlattenSequence.makeIterator()
extension FlattenSequence: Sequence  {

}

----Swift.(file).Sequence.joined()
extension Sequence where Element : Sequence  {

}

----Swift.(file).LazySequenceProtocol.joined()
extension LazySequenceProtocol where Element : Sequence  {

}

----Swift.(file).FlattenCollection


----Swift.(file).FlattenSequence.Index.init(_:Base.Index,_:Base.Element.Index?)
extension FlattenSequence.Index {

}

----Swift.(file).FlattenSequence.Index.==infix(_:FlattenCollection<Base>.Index,_:FlattenCollection<Base>.Index)
extension FlattenSequence.Index : Equatable where Base: Collection, Base.Element: Collection  {

}

----Swift.(file).FlattenSequence.Index.<infix(_:FlattenCollection<Base>.Index,_:FlattenCollection<Base>.Index)
extension FlattenSequence.Index : Comparable where Base: Collection, Base.Element: Collection  {

}

----Swift.(file).FlattenSequence.Index.hash(into:Hasher)
extension FlattenSequence.Index : Hashable
  where Base: Collection, Base.Element: Collection, Base.Index : Hashable, Base.Element.Index : Hashable  {

}

----Swift.(file).FlattenCollection.startIndex
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.endIndex
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.index(after:FlattenSequence<Base>.Index)
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.formIndex(after:FlattenSequence<Base>.Index)
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.distance(from:FlattenSequence<Base>.Index,to:FlattenSequence<Base>.Index)
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.index(_:FlattenSequence<Base>.Index,offsetBy:Int)
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.formIndex(_:FlattenSequence<Base>.Index,offsetBy:Int)
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.index(_:FlattenSequence<Base>.Index,offsetBy:Int,limitedBy:FlattenSequence<Base>.Index)
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.formIndex(_:FlattenSequence<Base>.Index,offsetBy:Int,limitedBy:FlattenSequence<Base>.Index)
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.subscript(_:FlattenSequence<Base>.Index)
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.subscript(_:Range<FlattenSequence<Base>.Index>)
extension FlattenCollection: Collection  {

}

----Swift.(file).FlattenCollection.index(before:FlattenSequence<Base>.Index)
extension FlattenCollection : BidirectionalCollection
  where Base : BidirectionalCollection, Base.Element : BidirectionalCollection  {

}

----Swift.(file).FlattenCollection.formIndex(before:FlattenSequence<Base>.Index)
extension FlattenCollection : BidirectionalCollection
  where Base : BidirectionalCollection, Base.Element : BidirectionalCollection  {

}

----Swift.(file).FloatingPoint.Exponent
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.init(sign:FloatingPointSign,exponent:Self.Exponent,significand:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.init(signOf:Self,magnitudeOf:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.init(_:Int)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.init(_:Source)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.init(exactly:Source)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.radix
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.nan
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.signalingNaN
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.infinity
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.greatestFiniteMagnitude
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.pi
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.ulp
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.ulpOfOne
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.leastNormalMagnitude
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.leastNonzeroMagnitude
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.sign
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.exponent
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.significand
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.negate()
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.remainder(dividingBy:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.formRemainder(dividingBy:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.truncatingRemainder(dividingBy:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.formTruncatingRemainder(dividingBy:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.squareRoot()
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.formSquareRoot()
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.addingProduct(_:Self,_:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.addProduct(_:Self,_:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.minimum(_:Self,_:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.maximum(_:Self,_:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.minimumMagnitude(_:Self,_:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.maximumMagnitude(_:Self,_:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.rounded(_:FloatingPointRoundingRule)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.round(_:FloatingPointRoundingRule)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.nextUp
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.nextDown
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isEqual(to:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isLess(than:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isLessThanOrEqualTo(_:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isTotallyOrdered(belowOrEqualTo:Self)
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isNormal
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isZero
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isSubnormal
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isInfinite
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isSignalingNaN
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.floatingPointClass
extension FloatingPoint {

}

----Swift.(file).FloatingPoint.isCanonical
extension FloatingPoint {

}

----Swift.(file).FloatingPointSign.plus
extension FloatingPointSign {

}

----Swift.(file).FloatingPointSign.minus
extension FloatingPointSign {

}

----Swift.(file).FloatingPointSign.init(rawValue:Int)
extension FloatingPointSign {

}

----Swift.(file).FloatingPointSign.rawValue
extension FloatingPointSign {

}

----Swift.(file).FloatingPointSign.hashValue
extension FloatingPointSign {

}

----Swift.(file).FloatingPointSign.hash(into:Hasher)
extension FloatingPointSign {

}

----Swift.(file).FloatingPointClassification.signalingNaN
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointClassification.quietNaN
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointClassification.negativeInfinity
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointClassification.negativeNormal
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointClassification.negativeSubnormal
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointClassification.negativeZero
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointClassification.positiveZero
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointClassification.positiveSubnormal
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointClassification.positiveNormal
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointClassification.positiveInfinity
extension FloatingPointClassification {

}

----Swift.(file).FloatingPointRoundingRule.toNearestOrAwayFromZero
extension FloatingPointRoundingRule {

}

----Swift.(file).FloatingPointRoundingRule.toNearestOrEven
extension FloatingPointRoundingRule {

}

----Swift.(file).FloatingPointRoundingRule.up
extension FloatingPointRoundingRule {

}

----Swift.(file).FloatingPointRoundingRule.down
extension FloatingPointRoundingRule {

}

----Swift.(file).FloatingPointRoundingRule.towardZero
extension FloatingPointRoundingRule {

}

----Swift.(file).FloatingPointRoundingRule.awayFromZero
extension FloatingPointRoundingRule {

}

----Swift.(file).BinaryFloatingPoint.RawSignificand
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.RawExponent
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.init(sign:FloatingPointSign,exponentBitPattern:Self.RawExponent,significandBitPattern:Self.RawSignificand)
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.init(_:Float)
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.init(_:Double)
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.init(_:Float80)
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.init(_:Source)
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.init(exactly:Source)
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.exponentBitCount
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.significandBitCount
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.exponentBitPattern
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.significandBitPattern
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.binade
extension BinaryFloatingPoint {

}

----Swift.(file).BinaryFloatingPoint.significandWidth
extension BinaryFloatingPoint {

}

----Swift.(file).FloatingPoint.ulpOfOne
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.rounded(_:FloatingPointRoundingRule)
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.rounded()
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.round()
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.nextDown
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.truncatingRemainder(dividingBy:Self)
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.remainder(dividingBy:Self)
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.squareRoot()
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.addingProduct(_:Self,_:Self)
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.minimum(_:Self,_:Self)
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.maximum(_:Self,_:Self)
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.minimumMagnitude(_:Self,_:Self)
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.maximumMagnitude(_:Self,_:Self)
extension FloatingPoint  {

}

----Swift.(file).FloatingPoint.floatingPointClass
extension FloatingPoint  {

}

----Swift.(file).BinaryFloatingPoint.radix
extension BinaryFloatingPoint  {

}

----Swift.(file).BinaryFloatingPoint.init(signOf:Self,magnitudeOf:Self)
extension BinaryFloatingPoint  {

}

----Swift.(file).BinaryFloatingPoint.init(_:Source)
extension BinaryFloatingPoint  {

}

----Swift.(file).BinaryFloatingPoint.init(exactly:Source)
extension BinaryFloatingPoint  {

}

----Swift.(file).BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:Self)
extension BinaryFloatingPoint  {

}

----Swift.(file).BinaryFloatingPoint.init(_:Source)
extension BinaryFloatingPoint where Self.RawSignificand : FixedWidthInteger  {

}

----Swift.(file).BinaryFloatingPoint.init(exactly:Source)
extension BinaryFloatingPoint where Self.RawSignificand : FixedWidthInteger  {

}

----Swift.(file).BinaryFloatingPoint.random(in:Range<Self>,using:T)
extension BinaryFloatingPoint where Self.RawSignificand : FixedWidthInteger  {

}

----Swift.(file).BinaryFloatingPoint.random(in:Range<Self>)
extension BinaryFloatingPoint where Self.RawSignificand : FixedWidthInteger  {

}

----Swift.(file).BinaryFloatingPoint.random(in:ClosedRange<Self>,using:T)
extension BinaryFloatingPoint where Self.RawSignificand : FixedWidthInteger  {

}

----Swift.(file).BinaryFloatingPoint.random(in:ClosedRange<Self>)
extension BinaryFloatingPoint where Self.RawSignificand : FixedWidthInteger  {

}

----Swift.(file)._HashTable.maxLoadFactor
extension _HashTable  {

}

----Swift.(file)._HashTable.capacity(forScale:Int8)
extension _HashTable  {

}

----Swift.(file)._HashTable.scale(forCapacity:Int)
extension _HashTable  {

}

----Swift.(file)._HashTable.age(for:AnyObject)
extension _HashTable  {

}

----Swift.(file)._HashTable.hashSeed(for:AnyObject,scale:Int8)
extension _HashTable  {

}

----Swift.(file)._HashTable.Bucket.==infix(_:_HashTable.Bucket,_:_HashTable.Bucket)
extension _HashTable.Bucket: Equatable  {

}

----Swift.(file)._HashTable.Bucket.<infix(_:_HashTable.Bucket,_:_HashTable.Bucket)
extension _HashTable.Bucket: Comparable  {

}

----Swift.(file)._HashTable.Index.==infix(_:_HashTable.Index,_:_HashTable.Index)
extension _HashTable.Index: Equatable  {

}

----Swift.(file)._HashTable.Index.<infix(_:_HashTable.Index,_:_HashTable.Index)
extension _HashTable.Index: Comparable  {

}

----Swift.(file)._HashTable.makeIterator()
extension _HashTable: Sequence  {

}

----Swift.(file)._HashTable.isValid(_:_HashTable.Bucket)
extension _HashTable  {

}

----Swift.(file)._HashTable.isOccupied(_:_HashTable.Bucket)
extension _HashTable  {

}

----Swift.(file)._HashTable.checkOccupied(_:_HashTable.Bucket)
extension _HashTable  {

}

----Swift.(file)._HashTable.occupiedBucket(after:_HashTable.Bucket)
extension _HashTable  {

}

----Swift.(file)._HashTable.startBucket
extension _HashTable  {

}

----Swift.(file)._HashTable.endBucket
extension _HashTable  {

}

----Swift.(file)._HashTable.idealBucket(forHashValue:Int)
extension _HashTable  {

}

----Swift.(file)._HashTable.bucket(wrappedAfter:_HashTable.Bucket)
extension _HashTable  {

}

----Swift.(file)._HashTable.previousHole(before:_HashTable.Bucket)
extension _HashTable  {

}

----Swift.(file)._HashTable.nextHole(atOrAfter:_HashTable.Bucket)
extension _HashTable  {

}

----Swift.(file)._HashTable.copyContents(of:_HashTable)
extension _HashTable  {

}

----Swift.(file)._HashTable.insertNew(hashValue:Int)
extension _HashTable  {

}

----Swift.(file)._HashTable.insert(_:_HashTable.Bucket)
extension _HashTable  {

}

----Swift.(file)._HashTable.clear()
extension _HashTable  {

}

----Swift.(file)._HashTable.delete(at:_HashTable.Bucket,with:D)
extension _HashTable  {

}

----Swift.(file).Hashable.hashValue
extension Hashable {

}

----Swift.(file).Hashable.hash(into:Hasher)
extension Hashable {

}

----Swift.(file).Hashable_isEqual_indirect(_:UnsafePointer<T>,_:UnsafePointer<T>)


----Swift.(file).Hashable_hashValue_indirect(_:UnsafePointer<T>)


----Swift.(file).Hasher.init()
extension Hasher {

}

----Swift.(file).Hasher.init(_seed:Int)
extension Hasher {

}

----Swift.(file).Hasher.init(_rawSeed:(UInt64, UInt64))
extension Hasher {

}

----Swift.(file).Hasher.combine(_:H)
extension Hasher {

}

----Swift.(file).Hasher.combine(bytes:UnsafeRawBufferPointer)
extension Hasher {

}

----Swift.(file).Hasher.finalize()
extension Hasher {

}

----Swift.(file).__swift_stdlib_UErrorCode.isFailure
extension __swift_stdlib_UErrorCode  {

}

----Swift.(file).__swift_stdlib_UErrorCode.isWarning
extension __swift_stdlib_UErrorCode  {

}

----Swift.(file).__swift_stdlib_UErrorCode.isSuccess
extension __swift_stdlib_UErrorCode  {

}

----Swift.(file).DefaultIndices.init(_elements:Elements,startIndex:Elements.Index,endIndex:Elements.Index)
extension DefaultIndices {

}

----Swift.(file).DefaultIndices.Index
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.Element
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.Indices
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.SubSequence
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.Iterator
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.startIndex
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.endIndex
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.subscript(_:DefaultIndices<Elements>.Index)
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.subscript(_:Range<DefaultIndices<Elements>.Index>)
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.index(after:DefaultIndices<Elements>.Index)
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.formIndex(after:DefaultIndices<Elements>.Index)
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.indices
extension DefaultIndices: Collection  {

}

----Swift.(file).DefaultIndices.index(before:DefaultIndices<Elements>.Index)
extension DefaultIndices: BidirectionalCollection
where Elements: BidirectionalCollection  {

}

----Swift.(file).DefaultIndices.formIndex(before:DefaultIndices<Elements>.Index)
extension DefaultIndices: BidirectionalCollection
where Elements: BidirectionalCollection  {

}

----Swift.(file).Collection.indices
extension Collection where Indices == DefaultIndices<Self>  {

}

----Swift.(file).readLine(strippingNewline:Bool)


----Swift.(file).FixedWidthInteger.init(_:String)
extension FixedWidthInteger  {

}

----Swift.(file).ExpressibleByIntegerLiteral.init(integerLiteral:Self)
extension ExpressibleByIntegerLiteral
  where Self : _ExpressibleByBuiltinIntegerLiteral  {

}

----Swift.(file).AdditiveArithmetic.zero
extension AdditiveArithmetic {

}

----Swift.(file).AdditiveArithmetic.zero
public extension AdditiveArithmetic where Self : ExpressibleByIntegerLiteral  {

}

----Swift.(file).Numeric.init(exactly:T)
extension Numeric {

}

----Swift.(file).Numeric.Magnitude
extension Numeric {

}

----Swift.(file).Numeric.magnitude
extension Numeric {

}

----Swift.(file).SignedNumeric.negate()
extension SignedNumeric {

}

----Swift.(file).SignedNumeric.negate()
extension SignedNumeric  {

}

----Swift.(file).abs(_:T)


----Swift.(file).BinaryInteger.isSigned
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.init(exactly:T)
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.init(_:T)
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.init(_:T)
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.init(truncatingIfNeeded:T)
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.init(clamping:T)
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.Words
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.words
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.bitWidth
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.trailingZeroBitCount
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.quotientAndRemainder(dividingBy:Self)
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.isMultiple(of:Self)
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.signum()
extension BinaryInteger {

}

----Swift.(file).BinaryInteger.init()
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.signum()
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.quotientAndRemainder(dividingBy:Self)
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.isMultiple(of:Self)
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.description
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.distance(to:Self)
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.advanced(by:Int)
extension BinaryInteger  {

}

----Swift.(file).FixedWidthInteger.bitWidth
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.max
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.min
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.addingReportingOverflow(_:Self)
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.subtractingReportingOverflow(_:Self)
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.multipliedReportingOverflow(by:Self)
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.dividedReportingOverflow(by:Self)
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.remainderReportingOverflow(dividingBy:Self)
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.multipliedFullWidth(by:Self)
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.dividingFullWidth(_:(high: Self, low: Self.Magnitude))
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.init(_truncatingBits:UInt)
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.nonzeroBitCount
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.leadingZeroBitCount
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.init(bigEndian:Self)
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.init(littleEndian:Self)
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.bigEndian
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.littleEndian
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.byteSwapped
extension FixedWidthInteger {

}

----Swift.(file).FixedWidthInteger.bitWidth
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.init(littleEndian:Self)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.init(bigEndian:Self)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.littleEndian
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.bigEndian
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.random(in:Range<Self>,using:T)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.random(in:Range<Self>)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.random(in:ClosedRange<Self>,using:T)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.random(in:ClosedRange<Self>)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.init(_:T)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.init(exactly:T)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.init(clamping:Other)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.init(truncatingIfNeeded:T)
extension FixedWidthInteger  {

}

----Swift.(file).UnsignedInteger.magnitude
extension UnsignedInteger  {

}

----Swift.(file).UnsignedInteger.isSigned
extension UnsignedInteger  {

}

----Swift.(file).UnsignedInteger.init(_:T)
extension UnsignedInteger where Self : FixedWidthInteger  {

}

----Swift.(file).UnsignedInteger.init(exactly:T)
extension UnsignedInteger where Self : FixedWidthInteger  {

}

----Swift.(file).UnsignedInteger.max
extension UnsignedInteger where Self : FixedWidthInteger  {

}

----Swift.(file).UnsignedInteger.min
extension UnsignedInteger where Self : FixedWidthInteger  {

}

----Swift.(file).SignedInteger.isSigned
extension SignedInteger  {

}

----Swift.(file).SignedInteger.init(_:T)
extension SignedInteger where Self : FixedWidthInteger  {

}

----Swift.(file).SignedInteger.init(exactly:T)
extension SignedInteger where Self : FixedWidthInteger  {

}

----Swift.(file).SignedInteger.max
extension SignedInteger where Self : FixedWidthInteger  {

}

----Swift.(file).SignedInteger.min
extension SignedInteger where Self : FixedWidthInteger  {

}

----Swift.(file).SignedInteger.isMultiple(of:Self)
extension SignedInteger where Self : FixedWidthInteger  {

}

----Swift.(file).numericCast(_:T)


----Swift.(file).FixedWidthInteger.addWithOverflow(_:Self,_:Self)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.subtractWithOverflow(_:Self,_:Self)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.multiplyWithOverflow(_:Self,_:Self)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.divideWithOverflow(_:Self,_:Self)
extension FixedWidthInteger  {

}

----Swift.(file).FixedWidthInteger.remainderWithOverflow(_:Self,_:Self)
extension FixedWidthInteger  {

}

----Swift.(file).BinaryInteger.addWithOverflow(_:Self,_:Self)
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.subtractWithOverflow(_:Self,_:Self)
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.multiplyWithOverflow(_:Self,_:Self)
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.divideWithOverflow(_:Self,_:Self)
extension BinaryInteger  {

}

----Swift.(file).BinaryInteger.remainderWithOverflow(_:Self,_:Self)
extension BinaryInteger  {

}

----Swift.(file).JoinedSequence.Element
extension JoinedSequence {

}

----Swift.(file).JoinedSequence.init(base:Base,separator:Separator)
extension JoinedSequence {

}

----Swift.(file).JoinedSequence.Iterator.init(base:Base.Iterator,separator:Separator)
extension JoinedSequence.Iterator {

}

----Swift.(file).JoinedSequence.Iterator.Element
extension JoinedSequence.Iterator: IteratorProtocol  {

}

----Swift.(file).JoinedSequence.Iterator.next()
extension JoinedSequence.Iterator: IteratorProtocol  {

}

----Swift.(file).JoinedSequence.makeIterator()
extension JoinedSequence: Sequence  {

}

----Swift.(file).Sequence.joined(separator:Separator)
extension Sequence where Element : Sequence  {

}

----Swift.(file).AnyKeyPath.rootType
extension AnyKeyPath {

}

----Swift.(file).AnyKeyPath.valueType
extension AnyKeyPath {

}

----Swift.(file).AnyKeyPath.hashValue
extension AnyKeyPath {

}

----Swift.(file).AnyKeyPath.hash(into:Hasher)
extension AnyKeyPath {

}

----Swift.(file).AnyKeyPath.==infix(_:AnyKeyPath,_:AnyKeyPath)
extension AnyKeyPath {

}

----Swift.(file).AnyKeyPath.init()
extension AnyKeyPath {

}

----Swift.(file).AnyKeyPath.withBuffer(_:(KeyPathBuffer) throws -> T)
extension AnyKeyPath {

}

----Swift.(file).AnyKeyPath.deinit()
extension AnyKeyPath {

}

----Swift.(file).PartialKeyPath.init()
extension PartialKeyPath {

}

----Swift.(file).PartialKeyPath.deinit()
extension PartialKeyPath {

}

----Swift.(file).KeyPath.Kind
extension KeyPath {

}

----Swift.(file).KeyPath.kind
extension KeyPath {

}

----Swift.(file).KeyPath.appendedType(with:KeyPath<Value, AppendedValue>.Type)
extension KeyPath {

}

----Swift.(file).KeyPath.deinit()
extension KeyPath {

}

----Swift.(file).KeyPath.init()
extension KeyPath {

}

----Swift.(file).WritableKeyPath.kind
extension WritableKeyPath {

}

----Swift.(file).WritableKeyPath.init()
extension WritableKeyPath {

}

----Swift.(file).WritableKeyPath.deinit()
extension WritableKeyPath {

}

----Swift.(file).ReferenceWritableKeyPath.kind
extension ReferenceWritableKeyPath {

}

----Swift.(file).ReferenceWritableKeyPath.init()
extension ReferenceWritableKeyPath {

}

----Swift.(file).ReferenceWritableKeyPath.deinit()
extension ReferenceWritableKeyPath {

}

----Swift.(file).KeyPathComputedArgumentLayoutFn


----Swift.(file).KeyPathComputedArgumentInitializerFn


----Swift.(file)._AppendKeyPath.appending(path:AnyKeyPath)
extension _AppendKeyPath where Self == AnyKeyPath  {

}

----Swift.(file)._AppendKeyPath.appending(path:AnyKeyPath)
extension _AppendKeyPath /* where Self == PartialKeyPath<T> */  {

}

----Swift.(file)._AppendKeyPath.appending(path:KeyPath<AppendedRoot, AppendedValue>)
extension _AppendKeyPath /* where Self == PartialKeyPath<T> */  {

}

----Swift.(file)._AppendKeyPath.appending(path:ReferenceWritableKeyPath<AppendedRoot, AppendedValue>)
extension _AppendKeyPath /* where Self == PartialKeyPath<T> */  {

}

----Swift.(file)._AppendKeyPath.appending(path:KeyPath<Value, AppendedValue>)
extension _AppendKeyPath /* where Self == KeyPath<T,U> */  {

}

----Swift.(file)._AppendKeyPath.appending(path:ReferenceWritableKeyPath<Value, AppendedValue>)
extension _AppendKeyPath /* where Self == KeyPath<T,U> */  {

}

----Swift.(file)._AppendKeyPath.appending(path:WritableKeyPath<Value, AppendedValue>)
extension _AppendKeyPath /* where Self == WritableKeyPath<T,U> */  {

}

----Swift.(file)._AppendKeyPath.appending(path:ReferenceWritableKeyPath<Value, AppendedValue>)
extension _AppendKeyPath /* where Self == WritableKeyPath<T,U> */  {

}

----Swift.(file)._AppendKeyPath.appending(path:WritableKeyPath<Value, AppendedValue>)
extension _AppendKeyPath /* where Self == ReferenceWritableKeyPath<T,U> */  {

}

----Swift.(file).keyPathObjectHeaderSize


----Swift.(file).keyPathPatternHeaderSize


----Swift.(file).MetadataReference


----Swift.(file).KeyValuePairs.init(dictionaryLiteral:[(Key, Value)])
extension KeyValuePairs {

}

----Swift.(file).KeyValuePairs.Element
extension KeyValuePairs : RandomAccessCollection  {

}

----Swift.(file).KeyValuePairs.Index
extension KeyValuePairs : RandomAccessCollection  {

}

----Swift.(file).KeyValuePairs.Indices
extension KeyValuePairs : RandomAccessCollection  {

}

----Swift.(file).KeyValuePairs.SubSequence
extension KeyValuePairs : RandomAccessCollection  {

}

----Swift.(file).KeyValuePairs.startIndex
extension KeyValuePairs : RandomAccessCollection  {

}

----Swift.(file).KeyValuePairs.endIndex
extension KeyValuePairs : RandomAccessCollection  {

}

----Swift.(file).KeyValuePairs.subscript(_:KeyValuePairs<Key, Value>.Index)
extension KeyValuePairs : RandomAccessCollection  {

}

----Swift.(file).KeyValuePairs.description
extension KeyValuePairs: CustomStringConvertible  {

}

----Swift.(file).KeyValuePairs.debugDescription
extension KeyValuePairs: CustomDebugStringConvertible  {

}

----Swift.(file).LazyCollectionProtocol.lazy
extension LazyCollectionProtocol  {

}

----Swift.(file).LazyCollectionProtocol.lazy
 extension LazyCollectionProtocol where Elements: LazyCollectionProtocol  {

}

----Swift.(file).LazyCollection


----Swift.(file).LazyCollection.Index
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.Indices
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.SubSequence
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.startIndex
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.endIndex
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.indices
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.index(after:LazySequence<Base>.Index)
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.subscript(_:LazySequence<Base>.Index)
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.isEmpty
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.count
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.index(_:LazySequence<Base>.Index,offsetBy:Int)
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.index(_:LazySequence<Base>.Index,offsetBy:Int,limitedBy:LazySequence<Base>.Index)
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.distance(from:LazySequence<Base>.Index,to:LazySequence<Base>.Index)
extension LazyCollection : Collection  {

}

----Swift.(file).LazyCollection.index(before:LazySequence<Base>.Index)
extension LazyCollection : BidirectionalCollection
  where Base : BidirectionalCollection  {

}

----Swift.(file).LazySequenceProtocol.Elements
extension LazySequenceProtocol {

}

----Swift.(file).LazySequenceProtocol.lazy
extension LazySequenceProtocol  {

}

----Swift.(file).LazySequenceProtocol.lazy
extension LazySequenceProtocol where Elements: LazySequenceProtocol  {

}

----Swift.(file).LazySequence.init(_base:Base)
extension LazySequence {

}

----Swift.(file).LazySequence.Element
extension LazySequence: Sequence  {

}

----Swift.(file).LazySequence.Iterator
extension LazySequence: Sequence  {

}

----Swift.(file).LazySequence.makeIterator()
extension LazySequence: Sequence  {

}

----Swift.(file).LazySequence.underestimatedCount
extension LazySequence: Sequence  {

}

----Swift.(file).LazySequence.Elements
extension LazySequence: LazySequenceProtocol  {

}

----Swift.(file).Sequence.lazy
extension Sequence  {

}

----Swift.(file).withExtendedLifetime(_:T,_:() throws -> Result)


----Swift.(file).withExtendedLifetime(_:T,_:(T) throws -> Result)


----Swift.(file).withUnsafeMutablePointer(to:T,_:(UnsafeMutablePointer<T>) throws -> Result)


----Swift.(file).withUnsafePointer(to:T,_:(UnsafePointer<T>) throws -> Result)


----Swift.(file).withUnsafePointer(to:T,_:(UnsafePointer<T>) throws -> Result)


----Swift.(file).ManagedBuffer.header
extension ManagedBuffer {

}

----Swift.(file).ManagedBuffer.init(_doNotCallMe:())
extension ManagedBuffer {

}

----Swift.(file).ManagedBuffer.deinit()
extension ManagedBuffer {

}

----Swift.(file).ManagedBuffer.create(minimumCapacity:Int,makingHeaderWith:(ManagedBuffer<Header, Element>) throws -> Header)
extension ManagedBuffer  {

}

----Swift.(file).ManagedBuffer.capacity
extension ManagedBuffer  {

}

----Swift.(file).ManagedBuffer.firstElementAddress
extension ManagedBuffer  {

}

----Swift.(file).ManagedBuffer.headerAddress
extension ManagedBuffer  {

}

----Swift.(file).ManagedBuffer.withUnsafeMutablePointerToHeader(_:(UnsafeMutablePointer<Header>) throws -> R)
extension ManagedBuffer  {

}

----Swift.(file).ManagedBuffer.withUnsafeMutablePointerToElements(_:(UnsafeMutablePointer<Element>) throws -> R)
extension ManagedBuffer  {

}

----Swift.(file).ManagedBuffer.withUnsafeMutablePointers(_:(UnsafeMutablePointer<Header>, UnsafeMutablePointer<Element>) throws -> R)
extension ManagedBuffer  {

}

----Swift.(file).tryReallocateUniquelyReferenced(buffer:Buffer,newMinimumCapacity:Int)


----Swift.(file).ManagedBufferPointer.init(bufferClass:AnyClass,minimumCapacity:Int,makingHeaderWith:(AnyObject, (AnyObject) -> Int) throws -> Header)
extension ManagedBufferPointer {

}

----Swift.(file).ManagedBufferPointer.init(unsafeBufferObject:AnyObject)
extension ManagedBufferPointer {

}

----Swift.(file).ManagedBufferPointer.init(_uncheckedUnsafeBufferObject:AnyObject)
extension ManagedBufferPointer {

}

----Swift.(file).ManagedBufferPointer.init(bufferClass:AnyClass,minimumCapacity:Int)
extension ManagedBufferPointer {

}

----Swift.(file).ManagedBufferPointer.init(_:ManagedBuffer<Header, Element>)
extension ManagedBufferPointer {

}

----Swift.(file).ManagedBufferPointer.header
extension ManagedBufferPointer  {

}

----Swift.(file).ManagedBufferPointer.buffer
extension ManagedBufferPointer  {

}

----Swift.(file).ManagedBufferPointer.capacity
extension ManagedBufferPointer  {

}

----Swift.(file).ManagedBufferPointer.withUnsafeMutablePointerToHeader(_:(UnsafeMutablePointer<Header>) throws -> R)
extension ManagedBufferPointer  {

}

----Swift.(file).ManagedBufferPointer.withUnsafeMutablePointerToElements(_:(UnsafeMutablePointer<Element>) throws -> R)
extension ManagedBufferPointer  {

}

----Swift.(file).ManagedBufferPointer.withUnsafeMutablePointers(_:(UnsafeMutablePointer<Header>, UnsafeMutablePointer<Element>) throws -> R)
extension ManagedBufferPointer  {

}

----Swift.(file).ManagedBufferPointer.isUniqueReference()
extension ManagedBufferPointer  {

}

----Swift.(file).ManagedBufferPointer.==infix(_:ManagedBufferPointer<Header, Element>,_:ManagedBufferPointer<Header, Element>)
extension ManagedBufferPointer: Equatable  {

}

----Swift.(file).isKnownUniquelyReferenced(_:T)


----Swift.(file).isKnownUniquelyReferenced(_:T?)


----Swift.(file).LazyMapSequence.Elements
extension LazyMapSequence {

}

----Swift.(file).LazyMapSequence.init(_base:Base,transform:(Base.Element) -> Element)
extension LazyMapSequence {

}

----Swift.(file).LazyMapSequence.Iterator.base
extension LazyMapSequence.Iterator {

}

----Swift.(file).LazyMapSequence.Iterator.init(_base:Base.Iterator,_transform:(Base.Element) -> Element)
extension LazyMapSequence.Iterator {

}

----Swift.(file).LazyMapSequence.Iterator.next()
extension LazyMapSequence.Iterator: IteratorProtocol, Sequence  {

}

----Swift.(file).LazyMapSequence.makeIterator()
extension LazyMapSequence: LazySequenceProtocol  {

}

----Swift.(file).LazyMapSequence.underestimatedCount
extension LazyMapSequence: LazySequenceProtocol  {

}

----Swift.(file).LazyMapCollection


----Swift.(file).LazyMapCollection.Index
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.Indices
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.SubSequence
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.startIndex
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.endIndex
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.index(after:LazyMapSequence<Base, Element>.Index)
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.formIndex(after:LazyMapSequence<Base, Element>.Index)
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.subscript(_:Base.Index)
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.subscript(_:Range<Base.Index>)
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.indices
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.isEmpty
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.count
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.index(_:LazyMapSequence<Base, Element>.Index,offsetBy:Int)
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.index(_:LazyMapSequence<Base, Element>.Index,offsetBy:Int,limitedBy:LazyMapSequence<Base, Element>.Index)
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.distance(from:LazyMapSequence<Base, Element>.Index,to:LazyMapSequence<Base, Element>.Index)
extension LazyMapCollection: Collection  {

}

----Swift.(file).LazyMapCollection.index(before:LazyMapSequence<Base, Element>.Index)
extension LazyMapCollection : BidirectionalCollection
  where Base : BidirectionalCollection  {

}

----Swift.(file).LazyMapCollection.formIndex(before:LazyMapSequence<Base, Element>.Index)
extension LazyMapCollection : BidirectionalCollection
  where Base : BidirectionalCollection  {

}

----Swift.(file).LazySequenceProtocol.map(_:(Self.Element) -> U)
extension LazySequenceProtocol  {

}

----Swift.(file).LazyMapSequence.map(_:(Element) -> ElementOfResult)
extension LazyMapSequence  {

}

----Swift.(file).LazyMapCollection.map(_:(Element) -> ElementOfResult)
extension LazyMapCollection  {

}

----Swift.(file).MemoryLayout.size
extension MemoryLayout {

}

----Swift.(file).MemoryLayout.stride
extension MemoryLayout {

}

----Swift.(file).MemoryLayout.alignment
extension MemoryLayout {

}

----Swift.(file).MemoryLayout.size(ofValue:T)
extension MemoryLayout  {

}

----Swift.(file).MemoryLayout.stride(ofValue:T)
extension MemoryLayout  {

}

----Swift.(file).MemoryLayout.alignment(ofValue:T)
extension MemoryLayout  {

}

----Swift.(file).MemoryLayout.offset(of:PartialKeyPath<T>)
extension MemoryLayout  {

}

----Swift.(file).BidirectionalIndexable


----Swift.(file).IndexableBase


----Swift.(file).Indexable


----Swift.(file).MutableIndexable


----Swift.(file).RandomAccessIndexable


----Swift.(file).RangeReplaceableIndexable


----Swift.(file).EnumeratedIterator


----Swift.(file).IteratorOverOne


----Swift.(file).EmptyIterator


----Swift.(file).LazyFilterIterator


----Swift.(file).LazyFilterIndex


----Swift.(file).LazyDropWhileIterator


----Swift.(file).LazyDropWhileIndex


----Swift.(file).LazyDropWhileBidirectionalCollection


----Swift.(file).LazyFilterBidirectionalCollection


----Swift.(file).LazyMapIterator


----Swift.(file).LazyMapBidirectionalCollection


----Swift.(file).LazyMapRandomAccessCollection


----Swift.(file).LazyBidirectionalCollection


----Swift.(file).LazyRandomAccessCollection


----Swift.(file).FlattenCollectionIndex


----Swift.(file).FlattenBidirectionalCollectionIndex


----Swift.(file).FlattenBidirectionalCollection


----Swift.(file).JoinedIterator


----Swift.(file).Zip2Iterator


----Swift.(file).LazyPrefixWhileIterator


----Swift.(file).LazyPrefixWhileIndex


----Swift.(file).LazyPrefixWhileBidirectionalCollection


----Swift.(file).ReversedRandomAccessCollection


----Swift.(file).ReversedIndex


----Swift.(file).BidirectionalSlice


----Swift.(file).RandomAccessSlice


----Swift.(file).RangeReplaceableSlice


----Swift.(file).RangeReplaceableBidirectionalSlice


----Swift.(file).RangeReplaceableRandomAccessSlice


----Swift.(file).MutableSlice


----Swift.(file).MutableBidirectionalSlice


----Swift.(file).MutableRandomAccessSlice


----Swift.(file).MutableRangeReplaceableSlice


----Swift.(file).MutableRangeReplaceableBidirectionalSlice


----Swift.(file).MutableRangeReplaceableRandomAccessSlice


----Swift.(file).DefaultBidirectionalIndices


----Swift.(file).DefaultRandomAccessIndices


----Swift.(file).NilLiteralConvertible


----Swift.(file).IntegerLiteralConvertible


----Swift.(file).FloatLiteralConvertible


----Swift.(file).BooleanLiteralConvertible


----Swift.(file).UnicodeScalarLiteralConvertible


----Swift.(file).ExtendedGraphemeClusterLiteralConvertible


----Swift.(file).StringLiteralConvertible


----Swift.(file).ArrayLiteralConvertible


----Swift.(file).DictionaryLiteralConvertible


----Swift.(file).StringInterpolationConvertible


----Swift.(file).ClosedRangeIndex


----Swift.(file).ImplicitlyUnwrappedOptional


----Swift.(file).Range.init(_:Range<Bound>)
extension Range where Bound: Strideable, Bound.Stride : SignedInteger  {

}

----Swift.(file).ClosedRange.init(_:ClosedRange<Bound>)
extension ClosedRange where Bound: Strideable, Bound.Stride : SignedInteger  {

}

----Swift.(file).DictionaryLiteral


----Swift.(file).LazySequenceProtocol.flatMap(_:(Self.Elements.Element) -> ElementOfResult?)
extension LazySequenceProtocol  {

}

----Swift.(file).String.CharacterView
extension String  {

}

----Swift.(file).String.characters
extension String  {

}

----Swift.(file).String.withMutableCharacters(_:(inout String) -> R)
extension String  {

}

----Swift.(file).String.UnicodeScalarView.customPlaygroundQuickLook
extension String.UnicodeScalarView : _CustomPlaygroundQuickLookable  {

}

----Swift.(file).String.UnicodeScalarView.subscript(_:Range<String.UnicodeScalarView.Index>)
extension String.UnicodeScalarView  {

}

----Swift.(file).String.UnicodeScalarView.subscript(_:ClosedRange<String.UnicodeScalarView.Index>)
extension String.UnicodeScalarView  {

}

----Swift.(file).UTF8


----Swift.(file).UTF16


----Swift.(file).UTF32


----Swift.(file).UnicodeScalar


----Swift.(file).String.UTF16View.customPlaygroundQuickLook
extension String.UTF16View : _CustomPlaygroundQuickLookable  {

}

----Swift.(file).String.UTF8View.customPlaygroundQuickLook
extension String.UTF8View : _CustomPlaygroundQuickLookable  {

}

----Swift.(file).Substring.CharacterView
extension Substring  {

}

----Swift.(file).Substring.characters
extension Substring  {

}

----Swift.(file).Substring.withMutableCharacters(_:(inout Substring) -> R)
extension Substring  {

}

----Swift.(file).Substring.subscript(_:ClosedRange<Substring.Index>)
extension Substring  {

}

----Swift.(file).Substring.customPlaygroundQuickLook
extension Substring : _CustomPlaygroundQuickLookable  {

}

----Swift.(file).Collection.Generator
extension Collection  {

}

----Swift.(file).Collection.index(_:Self.Index,offsetBy:T)
extension Collection  {

}

----Swift.(file).Collection.formIndex(_:Self.Index,offsetBy:T)
extension Collection  {

}

----Swift.(file).Collection.index(_:Self.Index,offsetBy:T,limitedBy:Self.Index)
extension Collection  {

}

----Swift.(file).Collection.formIndex(_:Self.Index,offsetBy:T,limitedBy:Self.Index)
extension Collection  {

}

----Swift.(file).Collection.distance(from:Self.Index,to:Self.Index)
extension Collection  {

}

----Swift.(file).UnsafeMutablePointer.initialize(to:Pointee,count:Int)
extension UnsafeMutablePointer  {

}

----Swift.(file).UnsafeMutablePointer.deinitialize()
extension UnsafeMutablePointer  {

}

----Swift.(file).UnsafeMutablePointer.deallocate(capacity:Int)
extension UnsafeMutablePointer  {

}

----Swift.(file).UnsafeMutablePointer.initialize(from:C)
extension UnsafeMutablePointer  {

}

----Swift.(file).UnsafeMutableRawPointer.init(_:UnsafeRawPointer)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeMutableRawPointer.init(_:UnsafeRawPointer?)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeMutableRawPointer.init(_:UnsafePointer<T>)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeMutableRawPointer.init(_:UnsafePointer<T>?)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeRawPointer.summary
extension UnsafeRawPointer : _CustomPlaygroundQuickLookable  {

}

----Swift.(file).UnsafeRawPointer.customPlaygroundQuickLook
extension UnsafeRawPointer : _CustomPlaygroundQuickLookable  {

}

----Swift.(file).UnsafeMutableRawPointer.summary
extension UnsafeMutableRawPointer : _CustomPlaygroundQuickLookable  {

}

----Swift.(file).UnsafeMutableRawPointer.customPlaygroundQuickLook
extension UnsafeMutableRawPointer : _CustomPlaygroundQuickLookable  {

}

----Swift.(file).UnsafePointer.summary
extension UnsafePointer: _CustomPlaygroundQuickLookable  {

}

----Swift.(file).UnsafePointer.customPlaygroundQuickLook
extension UnsafePointer: _CustomPlaygroundQuickLookable  {

}

----Swift.(file).UnsafeMutablePointer.summary
extension UnsafeMutablePointer: _CustomPlaygroundQuickLookable  {

}

----Swift.(file).UnsafeMutablePointer.customPlaygroundQuickLook
extension UnsafeMutablePointer: _CustomPlaygroundQuickLookable  {

}

----Swift.(file).UnsafeBufferPointerIterator


----Swift.(file).UnsafeRawBufferPointerIterator


----Swift.(file).UnsafeMutableRawBufferPointerIterator


----Swift.(file).UnsafeMutableRawPointer.allocate(bytes:Int,alignedTo:Int)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeMutableRawPointer.deallocate(bytes:Int,alignedTo:Int)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeMutableRawPointer.copyBytes(from:UnsafeRawPointer,count:Int)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeMutableRawPointer.initializeMemory(as:T.Type,at:Int,count:Int,to:T)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeMutableRawPointer.initializeMemory(as:C.Element.Type,from:C)
extension UnsafeMutableRawPointer  {

}

----Swift.(file).UnsafeMutableRawBufferPointer.allocate(count:Int)
extension UnsafeMutableRawBufferPointer  {

}

----Swift.(file).UnsafeMutableRawBufferPointer.copyBytes(from:UnsafeRawBufferPointer)
extension UnsafeMutableRawBufferPointer  {

}

----Swift.(file).Sequence.flatMap(_:(Self.Element) throws -> ElementOfResult?)
extension Sequence  {

}

----Swift.(file).Sequence.flatMap(_:(Self.Element) throws -> String)
extension Sequence  {

}

----Swift.(file).Collection.flatMap(_:(Self.Element) throws -> String?)
extension Collection  {

}

----Swift.(file).Collection.index(where:(Self.Element) throws -> Bool)
extension Collection  {

}

----Swift.(file).Collection.index(of:Self.Element)
extension Collection where Element: Equatable  {

}

----Swift.(file).Zip2Sequence.Stream1
extension Zip2Sequence  {

}

----Swift.(file).Zip2Sequence.Stream2
extension Zip2Sequence  {

}

----Swift.(file).PlaygroundQuickLook


----Swift.(file)._PlaygroundQuickLook.init(reflecting:Any)
extension _PlaygroundQuickLook  {

}

----Swift.(file).CustomPlaygroundQuickLookable


----Swift.(file).MutableCollection.Element
extension MutableCollection {

}

----Swift.(file).MutableCollection.Index
extension MutableCollection {

}

----Swift.(file).MutableCollection.SubSequence
extension MutableCollection {

}

----Swift.(file).MutableCollection.subscript(_:Self.Index)
extension MutableCollection {

}

----Swift.(file).MutableCollection.subscript(_:Range<Self.Index>)
extension MutableCollection {

}

----Swift.(file).MutableCollection.partition(by:(Self.Element) throws -> Bool)
extension MutableCollection {

}

----Swift.(file).MutableCollection.swapAt(_:Self.Index,_:Self.Index)
extension MutableCollection {

}

----Swift.(file).MutableCollection.withContiguousMutableStorageIfAvailable(_:(inout UnsafeMutableBufferPointer<Self.Element>) throws -> R)
extension MutableCollection {

}

----Swift.(file).MutableCollection.withContiguousMutableStorageIfAvailable(_:(inout UnsafeMutableBufferPointer<Self.Element>) throws -> R)
extension MutableCollection  {

}

----Swift.(file).MutableCollection.subscript(_:Range<Self.Index>)
extension MutableCollection  {

}

----Swift.(file).MutableCollection.swapAt(_:Self.Index,_:Self.Index)
extension MutableCollection  {

}

----Swift.(file).swap(_:T,_:T)


----Swift.(file)._NativeDictionary.Bucket
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.capacity
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.hashTable
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.age
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.invalidateIndices()
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.uncheckedKey(at:<<error type>>)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.uncheckedValue(at:<<error type>>)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.uncheckedInitialize(at:<<error type>>,toKey:Key,value:Value)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.uncheckedDestroy(at:<<error type>>)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.hashValue(for:Key)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.find(_:Key)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.find(_:Key,hashValue:Int)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.resize(capacity:Int)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.copyAndResize(capacity:Int)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.copy()
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.ensureUnique(isUnique:Bool,capacity:Int)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.reserveCapacity(_:Int,isUnique:Bool)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.validatedBucket(for:<<error type>>)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.validatedBucket(for:Dictionary<Key, Value>.Index)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.Index
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.startIndex
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.endIndex
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.index(after:_NativeDictionary<Key, Value>.Index)
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.index(forKey:Key)
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.count
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.contains(_:Key)
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.lookup(_:Key)
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.lookup(_:_NativeDictionary<Key, Value>.Index)
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.key(at:_NativeDictionary<Key, Value>.Index)
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.value(at:_NativeDictionary<Key, Value>.Index)
extension _NativeDictionary: _DictionaryBuffer  {

}

----Swift.(file)._NativeDictionary.subscript(_:Key,isUnique:Bool)
extension _NativeDictionary  {

}

----Swift.(file).KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:Any.Type)


----Swift.(file)._NativeDictionary.insertNew(key:Key,value:Value)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.mutatingFind(_:Key,isUnique:Bool)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.updateValue(_:Value,forKey:Key,isUnique:Bool)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.setValue(_:Value,forKey:Key,isUnique:Bool)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.swapValuesAt(_:<<error type>>,_:<<error type>>,isUnique:Bool)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.isEqual(to:_NativeDictionary<Key, Value>)
extension _NativeDictionary where Value: Equatable  {

}

----Swift.(file)._NativeDictionary.isEqual(to:<<error type>>)
extension _NativeDictionary where Value: Equatable  {

}

----Swift.(file)._NativeDictionary.hashValue(at:<<error type>>)
extension _NativeDictionary: _HashTableDelegate  {

}

----Swift.(file)._NativeDictionary.moveEntry(from:<<error type>>,to:<<error type>>)
extension _NativeDictionary: _HashTableDelegate  {

}

----Swift.(file)._NativeDictionary.swapEntry(_:<<error type>>,with:<<error type>>)
extension _NativeDictionary: _HashTableDelegate  {

}

----Swift.(file)._NativeDictionary.uncheckedRemove(at:<<error type>>,isUnique:Bool)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.removeAll(isUnique:Bool)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.mapValues(_:(Value) throws -> T)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.merge(_:S,isUnique:Bool,uniquingKeysWith:(Value, Value) throws -> Value)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.init(grouping:S,by:(S.Element) throws -> Key)
extension _NativeDictionary  {

}

----Swift.(file)._NativeDictionary.makeIterator()
extension _NativeDictionary: Sequence  {

}

----Swift.(file)._NativeDictionary.Iterator.Element
extension _NativeDictionary.Iterator: IteratorProtocol  {

}

----Swift.(file)._NativeDictionary.Iterator.nextKey()
extension _NativeDictionary.Iterator: IteratorProtocol  {

}

----Swift.(file)._NativeDictionary.Iterator.nextValue()
extension _NativeDictionary.Iterator: IteratorProtocol  {

}

----Swift.(file)._NativeDictionary.Iterator.next()
extension _NativeDictionary.Iterator: IteratorProtocol  {

}

----Swift.(file)._NativeSet.Bucket
extension _NativeSet  {

}

----Swift.(file)._NativeSet.capacity
extension _NativeSet  {

}

----Swift.(file)._NativeSet.hashTable
extension _NativeSet  {

}

----Swift.(file)._NativeSet.age
extension _NativeSet  {

}

----Swift.(file)._NativeSet.invalidateIndices()
extension _NativeSet  {

}

----Swift.(file)._NativeSet.uncheckedElement(at:<<error type>>)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.uncheckedInitialize(at:<<error type>>,to:Element)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.hashValue(for:Element)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.find(_:Element)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.find(_:Element,hashValue:Int)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.resize(capacity:Int)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.copyAndResize(capacity:Int)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.copy()
extension _NativeSet  {

}

----Swift.(file)._NativeSet.ensureUnique(isUnique:Bool,capacity:Int)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.reserveCapacity(_:Int,isUnique:Bool)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.validatedBucket(for:<<error type>>)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.validatedBucket(for:Set<Element>.Index)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.Index
extension _NativeSet: _SetBuffer  {

}

----Swift.(file)._NativeSet.startIndex
extension _NativeSet: _SetBuffer  {

}

----Swift.(file)._NativeSet.endIndex
extension _NativeSet: _SetBuffer  {

}

----Swift.(file)._NativeSet.index(after:_NativeSet<Element>.Index)
extension _NativeSet: _SetBuffer  {

}

----Swift.(file)._NativeSet.index(for:Element)
extension _NativeSet: _SetBuffer  {

}

----Swift.(file)._NativeSet.count
extension _NativeSet: _SetBuffer  {

}

----Swift.(file)._NativeSet.contains(_:Element)
extension _NativeSet: _SetBuffer  {

}

----Swift.(file)._NativeSet.element(at:_NativeSet<Element>.Index)
extension _NativeSet: _SetBuffer  {

}

----Swift.(file).ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:Any.Type)


----Swift.(file)._NativeSet.insertNew(_:Element,isUnique:Bool)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.insertNew(_:Element,at:<<error type>>,isUnique:Bool)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.update(with:Element,isUnique:Bool)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.isEqual(to:_NativeSet<Element>)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.isEqual(to:<<error type>>)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.hashValue(at:<<error type>>)
extension _NativeSet: _HashTableDelegate  {

}

----Swift.(file)._NativeSet.moveEntry(from:<<error type>>,to:<<error type>>)
extension _NativeSet: _HashTableDelegate  {

}

----Swift.(file)._NativeSet.uncheckedRemove(at:<<error type>>,isUnique:Bool)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.removeAll(isUnique:Bool)
extension _NativeSet  {

}

----Swift.(file)._NativeSet.makeIterator()
extension _NativeSet: Sequence  {

}

----Swift.(file)._NativeSet.Iterator.next()
extension _NativeSet.Iterator: IteratorProtocol  {

}

----Swift.(file)._SwiftNewtypeWrapper.hashValue
extension _SwiftNewtypeWrapper where Self: Hashable, Self.RawValue: Hashable  {

}

----Swift.(file)._SwiftNewtypeWrapper.hash(into:Hasher)
extension _SwiftNewtypeWrapper where Self: Hashable, Self.RawValue: Hashable  {

}

----Swift.(file)._StringGuts.foreignHasNormalizationBoundary(before:String.Index)
extension _StringGuts  {

}

----Swift.(file).UnsafeBufferPointer.hasNormalizationBoundary(before:Int)
extension UnsafeBufferPointer where Element == UInt8  {

}

----Swift.(file)._SegmentSource.tryFill(into:<<error type>>)
extension _SegmentSource  {

}

----Swift.(file)._NormalizedUTF8CodeUnitIterator_2.outputBufferThreshold
extension _NormalizedUTF8CodeUnitIterator_2  {

}

----Swift.(file)._NormalizedUTF8CodeUnitIterator_2.outputBufferEmpty
extension _NormalizedUTF8CodeUnitIterator_2  {

}

----Swift.(file)._NormalizedUTF8CodeUnitIterator_2.outputBufferFull
extension _NormalizedUTF8CodeUnitIterator_2  {

}

----Swift.(file)._NormalizedUTF8CodeUnitIterator_2.inputBufferEmpty
extension _NormalizedUTF8CodeUnitIterator_2  {

}

----Swift.(file)._NormalizedUTF8CodeUnitIterator_2.fastPathFill()
extension _NormalizedUTF8CodeUnitIterator_2  {

}

----Swift.(file)._NormalizedUTF8CodeUnitIterator_2.fill()
extension _NormalizedUTF8CodeUnitIterator_2  {

}

----Swift.(file)._NormalizedUTF8CodeUnitIterator_2.compare(with:_NormalizedUTF8CodeUnitIterator_2,expecting:<<error type>>)
extension _NormalizedUTF8CodeUnitIterator_2  {

}

----Swift.(file).ObjectIdentifier.init(_:AnyObject)
extension ObjectIdentifier {

}

----Swift.(file).ObjectIdentifier.init(_:Any.Type)
extension ObjectIdentifier {

}

----Swift.(file).ObjectIdentifier.debugDescription
extension ObjectIdentifier : CustomDebugStringConvertible  {

}

----Swift.(file).ObjectIdentifier.==infix(_:ObjectIdentifier,_:ObjectIdentifier)
extension ObjectIdentifier: Equatable  {

}

----Swift.(file).ObjectIdentifier.<infix(_:ObjectIdentifier,_:ObjectIdentifier)
extension ObjectIdentifier: Comparable  {

}

----Swift.(file).ObjectIdentifier.hash(into:Hasher)
extension ObjectIdentifier: Hashable  {

}

----Swift.(file).UInt.init(bitPattern:ObjectIdentifier)
extension UInt  {

}

----Swift.(file).Int.init(bitPattern:ObjectIdentifier)
extension Int  {

}

----Swift.(file).OptionSet.Element
extension OptionSet {

}

----Swift.(file).OptionSet.init(rawValue:Self.RawValue)
extension OptionSet {

}

----Swift.(file).OptionSet.union(_:Self)
extension OptionSet  {

}

----Swift.(file).OptionSet.intersection(_:Self)
extension OptionSet  {

}

----Swift.(file).OptionSet.symmetricDifference(_:Self)
extension OptionSet  {

}

----Swift.(file).OptionSet.contains(_:Self)
extension OptionSet where Element == Self  {

}

----Swift.(file).OptionSet.insert(_:Self.Element)
extension OptionSet where Element == Self  {

}

----Swift.(file).OptionSet.remove(_:Self.Element)
extension OptionSet where Element == Self  {

}

----Swift.(file).OptionSet.update(with:Self.Element)
extension OptionSet where Element == Self  {

}

----Swift.(file).OptionSet.init()
extension OptionSet where RawValue : FixedWidthInteger  {

}

----Swift.(file).OptionSet.formUnion(_:Self)
extension OptionSet where RawValue : FixedWidthInteger  {

}

----Swift.(file).OptionSet.formIntersection(_:Self)
extension OptionSet where RawValue : FixedWidthInteger  {

}

----Swift.(file).OptionSet.formSymmetricDifference(_:Self)
extension OptionSet where RawValue : FixedWidthInteger  {

}

----Swift.(file).Optional.none
extension Optional {

}

----Swift.(file).Optional.some
extension Optional {

}

----Swift.(file).Optional.init(_:Wrapped)
extension Optional {

}

----Swift.(file).Optional.map(_:(Wrapped) throws -> U)
extension Optional {

}

----Swift.(file).Optional.flatMap(_:(Wrapped) throws -> U?)
extension Optional {

}

----Swift.(file).Optional.init(nilLiteral:())
extension Optional {

}

----Swift.(file).Optional.unsafelyUnwrapped
extension Optional {

}

----Swift.(file).Optional.debugDescription
extension Optional : CustomDebugStringConvertible  {

}

----Swift.(file).Optional.customMirror
extension Optional : CustomReflectable  {

}

----Swift.(file).Optional.==infix(_:Wrapped?,_:Wrapped?)
extension Optional : Equatable where Wrapped : Equatable  {

}

----Swift.(file).Optional.hash(into:Hasher)
extension Optional: Hashable where Wrapped: Hashable  {

}

----Swift.(file).Optional.~=infix(_:_OptionalNilComparisonType,_:Wrapped?)
extension Optional  {

}

----Swift.(file).Optional.==infix(_:Wrapped?,_:_OptionalNilComparisonType)
extension Optional  {

}

----Swift.(file).Optional.!=infix(_:Wrapped?,_:_OptionalNilComparisonType)
extension Optional  {

}

----Swift.(file).Optional.==infix(_:_OptionalNilComparisonType,_:Wrapped?)
extension Optional  {

}

----Swift.(file).Optional.!=infix(_:_OptionalNilComparisonType,_:Wrapped?)
extension Optional  {

}

----Swift.(file).??infix(_:T?,_:() throws -> T)


----Swift.(file).??infix(_:T?,_:() throws -> T?)


----Swift.(file).TextOutputStream.write(_:String)
extension TextOutputStream {

}

----Swift.(file).TextOutputStreamable.write(to:Target)
extension TextOutputStreamable {

}

----Swift.(file).CustomStringConvertible.description
extension CustomStringConvertible {

}

----Swift.(file).LosslessStringConvertible.init(_:String)
extension LosslessStringConvertible {

}

----Swift.(file).CustomDebugStringConvertible.debugDescription
extension CustomDebugStringConvertible {

}

----Swift.(file).String.write(_:String)
extension String : TextOutputStream  {

}

----Swift.(file).String.write(to:Target)
extension String : TextOutputStreamable  {

}

----Swift.(file).Character.write(to:Target)
extension Character : TextOutputStreamable  {

}

----Swift.(file).Unicode.Scalar.write(to:Target)
extension Unicode.Scalar : TextOutputStreamable  {

}

----Swift.(file)._Pointer.init(_:OpaquePointer)
extension _Pointer  {

}

----Swift.(file)._Pointer.init(_:OpaquePointer?)
extension _Pointer  {

}

----Swift.(file)._Pointer.init(bitPattern:Int)
extension _Pointer  {

}

----Swift.(file)._Pointer.init(bitPattern:UInt)
extension _Pointer  {

}

----Swift.(file)._Pointer.init(_:Self)
extension _Pointer  {

}

----Swift.(file)._Pointer.init(_:Self?)
extension _Pointer  {

}

----Swift.(file)._Pointer.init(_:UnsafeMutablePointer<T>)
extension _Pointer  {

}

----Swift.(file)._Pointer.init(_:UnsafeMutablePointer<T>?)
extension _Pointer  {

}

----Swift.(file)._Pointer.==infix(_:Self,_:Self)
extension _Pointer /*: Equatable */  {

}

----Swift.(file)._Pointer.<infix(_:Self,_:Self)
extension _Pointer /*: Comparable */  {

}

----Swift.(file)._Pointer.successor()
extension _Pointer /*: Strideable*/  {

}

----Swift.(file)._Pointer.predecessor()
extension _Pointer /*: Strideable*/  {

}

----Swift.(file)._Pointer.distance(to:Self)
extension _Pointer /*: Strideable*/  {

}

----Swift.(file)._Pointer.advanced(by:Int)
extension _Pointer /*: Strideable*/  {

}

----Swift.(file)._Pointer.hash(into:Hasher)
extension _Pointer /*: Hashable */  {

}

----Swift.(file)._Pointer.debugDescription
extension _Pointer /*: CustomDebugStringConvertible */  {

}

----Swift.(file)._Pointer.customMirror
extension _Pointer /*: CustomReflectable */  {

}

----Swift.(file).Int.init(bitPattern:P?)
extension Int  {

}

----Swift.(file).UInt.init(bitPattern:P?)
extension UInt  {

}

----Swift.(file).Strideable.+infix(_:Self,_:Self.Stride)
extension Strideable where Self : _Pointer  {

}

----Swift.(file).Strideable.+infix(_:Self.Stride,_:Self)
extension Strideable where Self : _Pointer  {

}

----Swift.(file).Strideable.-infix(_:Self,_:Self.Stride)
extension Strideable where Self : _Pointer  {

}

----Swift.(file).Strideable.-infix(_:Self,_:Self)
extension Strideable where Self : _Pointer  {

}

----Swift.(file).Strideable.+=infix(_:Self,_:Self.Stride)
extension Strideable where Self : _Pointer  {

}

----Swift.(file).Strideable.-=infix(_:Self,_:Self.Stride)
extension Strideable where Self : _Pointer  {

}

----Swift.(file).Never.<infix(_:Never,_:Never)
extension Never: Comparable  {

}

----Swift.(file).Void


----Swift.(file).Float32


----Swift.(file).Float64


----Swift.(file).IntegerLiteralType


----Swift.(file).FloatLiteralType


----Swift.(file).BooleanLiteralType


----Swift.(file).UnicodeScalarType


----Swift.(file).ExtendedGraphemeClusterType


----Swift.(file).StringLiteralType


----Swift.(file).AnyObject


----Swift.(file).AnyClass


----Swift.(file).~=infix(_:T,_:T)


----Swift.(file).LazyPrefixWhileSequence.Element
extension LazyPrefixWhileSequence {

}

----Swift.(file).LazyPrefixWhileSequence.init(_base:Base,predicate:(LazyPrefixWhileSequence<Base>.Element) -> Bool)
extension LazyPrefixWhileSequence {

}

----Swift.(file).LazyPrefixWhileSequence.Iterator.Element
extension LazyPrefixWhileSequence.Iterator {

}

----Swift.(file).LazyPrefixWhileSequence.Iterator.init(_base:Base.Iterator,predicate:(LazyPrefixWhileSequence<Base>.Iterator.Element) -> Bool)
extension LazyPrefixWhileSequence.Iterator {

}

----Swift.(file).LazyPrefixWhileSequence.Iterator.next()
extension LazyPrefixWhileSequence.Iterator: IteratorProtocol, Sequence  {

}

----Swift.(file).LazyPrefixWhileSequence.makeIterator()
extension LazyPrefixWhileSequence: Sequence  {

}

----Swift.(file).LazyPrefixWhileSequence.Elements
extension LazyPrefixWhileSequence: LazySequenceProtocol  {

}

----Swift.(file).LazySequenceProtocol.prefix(while:(Self.Elements.Element) -> Bool)
extension LazySequenceProtocol  {

}

----Swift.(file).LazyPrefixWhileCollection


----Swift.(file).LazyPrefixWhileCollection.Index.init(_:Base.Index)
extension LazyPrefixWhileCollection.Index {

}

----Swift.(file).LazyPrefixWhileCollection.Index.init(endOf:Base)
extension LazyPrefixWhileCollection.Index {

}

----Swift.(file).LazyPrefixWhileSequence.Index.==infix(_:LazyPrefixWhileCollection<Base>.Index,_:LazyPrefixWhileCollection<Base>.Index)
extension LazyPrefixWhileSequence.Index: Comparable where Base: Collection  {

}

----Swift.(file).LazyPrefixWhileSequence.Index.<infix(_:LazyPrefixWhileCollection<Base>.Index,_:LazyPrefixWhileCollection<Base>.Index)
extension LazyPrefixWhileSequence.Index: Comparable where Base: Collection  {

}

----Swift.(file).LazyPrefixWhileSequence.Index.hash(into:Hasher)
extension LazyPrefixWhileSequence.Index: Hashable where Base.Index: Hashable, Base: Collection  {

}

----Swift.(file).LazyPrefixWhileCollection.SubSequence
extension LazyPrefixWhileCollection: Collection  {

}

----Swift.(file).LazyPrefixWhileCollection.startIndex
extension LazyPrefixWhileCollection: Collection  {

}

----Swift.(file).LazyPrefixWhileCollection.endIndex
extension LazyPrefixWhileCollection: Collection  {

}

----Swift.(file).LazyPrefixWhileCollection.index(after:LazyPrefixWhileSequence<Base>.Index)
extension LazyPrefixWhileCollection: Collection  {

}

----Swift.(file).LazyPrefixWhileCollection.subscript(_:LazyPrefixWhileSequence<Base>.Index)
extension LazyPrefixWhileCollection: Collection  {

}

----Swift.(file).LazyPrefixWhileCollection.index(before:LazyPrefixWhileSequence<Base>.Index)
extension LazyPrefixWhileCollection: BidirectionalCollection
where Base: BidirectionalCollection  {

}

----Swift.(file).print(_:[Any],separator:String,terminator:String)


----Swift.(file).debugPrint(_:[Any],separator:String,terminator:String)


----Swift.(file).print(_:[Any],separator:String,terminator:String,to:Target)


----Swift.(file).debugPrint(_:[Any],separator:String,terminator:String,to:Target)


----Swift.(file).RandomNumberGenerator.next()
extension RandomNumberGenerator {

}

----Swift.(file).RandomNumberGenerator.next()
extension RandomNumberGenerator  {

}

----Swift.(file).RandomNumberGenerator.next(upperBound:T)
extension RandomNumberGenerator  {

}

----Swift.(file).SystemRandomNumberGenerator.init()
extension SystemRandomNumberGenerator {

}

----Swift.(file).SystemRandomNumberGenerator.next()
extension SystemRandomNumberGenerator {

}

----Swift.(file).RandomAccessCollection.Element
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.Index
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.SubSequence
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.Indices
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.indices
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.subscript(_:Range<Self.Index>)
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.subscript(_:Self.Index)
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.startIndex
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.endIndex
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.index(before:Self.Index)
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.formIndex(before:Self.Index)
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.index(after:Self.Index)
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.formIndex(after:Self.Index)
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.index(_:Self.Index,offsetBy:Int)
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.index(_:Self.Index,offsetBy:Int,limitedBy:Self.Index)
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.distance(from:Self.Index,to:Self.Index)
extension RandomAccessCollection {

}

----Swift.(file).RandomAccessCollection.index(_:Self.Index,offsetBy:Int,limitedBy:Self.Index)
extension RandomAccessCollection  {

}

----Swift.(file).RandomAccessCollection.indices
extension RandomAccessCollection
where Index : Strideable, 
      Index.Stride == Int,
      Indices == Range<Index>  {

}

----Swift.(file).RandomAccessCollection.index(after:Self.Index)
extension RandomAccessCollection
where Index : Strideable, 
      Index.Stride == Int,
      Indices == Range<Index>  {

}

----Swift.(file).RandomAccessCollection.index(before:Self.Index)
extension RandomAccessCollection
where Index : Strideable, 
      Index.Stride == Int,
      Indices == Range<Index>  {

}

----Swift.(file).RandomAccessCollection.index(_:Self.Index,offsetBy:Self.Index.Stride)
extension RandomAccessCollection
where Index : Strideable, 
      Index.Stride == Int,
      Indices == Range<Index>  {

}

----Swift.(file).RandomAccessCollection.distance(from:Self.Index,to:Self.Index)
extension RandomAccessCollection
where Index : Strideable, 
      Index.Stride == Int,
      Indices == Range<Index>  {

}

----Swift.(file).RangeExpression.Bound
extension RangeExpression {

}

----Swift.(file).RangeExpression.relative(to:C)
extension RangeExpression {

}

----Swift.(file).RangeExpression.contains(_:Self.Bound)
extension RangeExpression {

}

----Swift.(file).RangeExpression.~=infix(_:Self,_:Self.Bound)
extension RangeExpression  {

}

----Swift.(file).Range.lowerBound
extension Range {

}

----Swift.(file).Range.upperBound
extension Range {

}

----Swift.(file).Range.init(uncheckedBounds:(lower: Bound, upper: Bound))
extension Range {

}

----Swift.(file).Range.contains(_:Bound)
extension Range {

}

----Swift.(file).Range.isEmpty
extension Range {

}

----Swift.(file).Range.Element
extension Range: Sequence
where Bound: Strideable, Bound.Stride : SignedInteger  {

}

----Swift.(file).Range.Iterator
extension Range: Sequence
where Bound: Strideable, Bound.Stride : SignedInteger  {

}

----Swift.(file).Range.Index
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.Indices
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.SubSequence
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.startIndex
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.endIndex
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.index(after:Range<Bound>.Index)
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.index(before:Range<Bound>.Index)
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.index(_:Range<Bound>.Index,offsetBy:Int)
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.distance(from:Range<Bound>.Index,to:Range<Bound>.Index)
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.subscript(_:Range<Range<Bound>.Index>)
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.indices
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.subscript(_:Range<Bound>.Index)
extension Range: Collection, BidirectionalCollection, RandomAccessCollection
where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Range.init(_:ClosedRange<Bound>)
extension Range where Bound: Strideable, Bound.Stride : SignedInteger  {

}

----Swift.(file).Range.relative(to:C)
extension Range: RangeExpression  {

}

----Swift.(file).Range.clamped(to:Range<Bound>)
extension Range  {

}

----Swift.(file).Range.description
extension Range : CustomStringConvertible  {

}

----Swift.(file).Range.debugDescription
extension Range : CustomDebugStringConvertible  {

}

----Swift.(file).Range.customMirror
extension Range : CustomReflectable  {

}

----Swift.(file).Range.==infix(_:Range<Bound>,_:Range<Bound>)
extension Range: Equatable  {

}

----Swift.(file).Range.hash(into:Hasher)
extension Range: Hashable where Bound: Hashable  {

}

----Swift.(file).PartialRangeUpTo.upperBound
extension PartialRangeUpTo {

}

----Swift.(file).PartialRangeUpTo.init(_:Bound)
extension PartialRangeUpTo {

}

----Swift.(file).PartialRangeUpTo.relative(to:C)
extension PartialRangeUpTo: RangeExpression  {

}

----Swift.(file).PartialRangeUpTo.contains(_:Bound)
extension PartialRangeUpTo: RangeExpression  {

}

----Swift.(file).PartialRangeThrough.upperBound
extension PartialRangeThrough {

}

----Swift.(file).PartialRangeThrough.init(_:Bound)
extension PartialRangeThrough {

}

----Swift.(file).PartialRangeThrough.relative(to:C)
extension PartialRangeThrough: RangeExpression  {

}

----Swift.(file).PartialRangeThrough.contains(_:Bound)
extension PartialRangeThrough: RangeExpression  {

}

----Swift.(file).PartialRangeFrom.lowerBound
extension PartialRangeFrom {

}

----Swift.(file).PartialRangeFrom.init(_:Bound)
extension PartialRangeFrom {

}

----Swift.(file).PartialRangeFrom.relative(to:C)
extension PartialRangeFrom: RangeExpression  {

}

----Swift.(file).PartialRangeFrom.contains(_:Bound)
extension PartialRangeFrom: RangeExpression  {

}

----Swift.(file).PartialRangeFrom.Element
extension PartialRangeFrom: Sequence
  where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).PartialRangeFrom.Iterator.init(_current:Bound)
extension PartialRangeFrom.Iterator {

}

----Swift.(file).PartialRangeFrom.Iterator.next()
extension PartialRangeFrom.Iterator {

}

----Swift.(file).PartialRangeFrom.makeIterator()
extension PartialRangeFrom: Sequence
  where Bound : Strideable, Bound.Stride : SignedInteger
 {

}

----Swift.(file).Comparable...<infix(_:Self,_:Self)
extension Comparable  {

}

----Swift.(file).Comparable...<prefix(_:Self)
extension Comparable  {

}

----Swift.(file).Comparable....prefix(_:Self)
extension Comparable  {

}

----Swift.(file).Comparable....postfix(_:Self)
extension Comparable  {

}

----Swift.(file).UnboundedRange_....postfix(_:UnboundedRange_)
extension UnboundedRange_... {

}

----Swift.(file).UnboundedRange


----Swift.(file).Collection.subscript(_:R)
extension Collection  {

}

----Swift.(file).Collection.subscript(_:(UnboundedRange_) -> ())
extension Collection  {

}

----Swift.(file).MutableCollection.subscript(_:R)
extension MutableCollection  {

}

----Swift.(file).MutableCollection.subscript(_:(UnboundedRange_) -> ())
extension MutableCollection  {

}

----Swift.(file).Range.overlaps(_:Range<Bound>)
extension Range  {

}

----Swift.(file).Range.overlaps(_:ClosedRange<Bound>)
extension Range  {

}

----Swift.(file).CountableRange


----Swift.(file).CountablePartialRangeFrom


----Swift.(file).RangeReplaceableCollection.SubSequence
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.init()
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.replaceSubrange(_:Range<Self.Index>,with:C)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.reserveCapacity(_:Int)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.init(repeating:Self.Element,count:Int)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.init(_:S)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.append(_:Self.Element)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.append(contentsOf:S)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.insert(_:Self.Element,at:Self.Index)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.insert(contentsOf:S,at:Self.Index)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.remove(at:Self.Index)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.removeSubrange(_:Range<Self.Index>)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.removeFirst()
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.removeFirst(_:Int)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.removeAll(keepingCapacity:Bool)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.removeAll(where:(Self.Element) throws -> Bool)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.subscript(_:Self.Index)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.subscript(_:Range<Self.Index>)
extension RangeReplaceableCollection {

}

----Swift.(file).RangeReplaceableCollection.init(repeating:Self.Element,count:Int)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.init(_:S)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.append(_:Self.Element)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.append(contentsOf:S)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.insert(_:Self.Element,at:Self.Index)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.insert(contentsOf:C,at:Self.Index)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.remove(at:Self.Index)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeSubrange(_:Range<Self.Index>)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeFirst(_:Int)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeFirst()
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeAll(keepingCapacity:Bool)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.reserveCapacity(_:Int)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeFirst()
extension RangeReplaceableCollection where SubSequence == Self  {

}

----Swift.(file).RangeReplaceableCollection.removeFirst(_:Int)
extension RangeReplaceableCollection where SubSequence == Self  {

}

----Swift.(file).RangeReplaceableCollection.replaceSubrange(_:R,with:C)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeSubrange(_:R)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.popLast()
extension RangeReplaceableCollection where Self : BidirectionalCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeLast()
extension RangeReplaceableCollection where Self : BidirectionalCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeLast(_:Int)
extension RangeReplaceableCollection where Self : BidirectionalCollection  {

}

----Swift.(file).RangeReplaceableCollection.popLast()
extension RangeReplaceableCollection
where Self : BidirectionalCollection, SubSequence == Self  {

}

----Swift.(file).RangeReplaceableCollection.removeLast()
extension RangeReplaceableCollection
where Self : BidirectionalCollection, SubSequence == Self  {

}

----Swift.(file).RangeReplaceableCollection.removeLast(_:Int)
extension RangeReplaceableCollection
where Self : BidirectionalCollection, SubSequence == Self  {

}

----Swift.(file).RangeReplaceableCollection.+infix(_:Self,_:Other)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.+infix(_:Other,_:Self)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.+=infix(_:Self,_:Other)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.+infix(_:Self,_:Other)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.filter(_:(Self.Element) throws -> Bool)
extension RangeReplaceableCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeAll(where:(Self.Element) throws -> Bool)
extension RangeReplaceableCollection where Self: MutableCollection  {

}

----Swift.(file).RangeReplaceableCollection.removeAll(where:(Self.Element) throws -> Bool)
extension RangeReplaceableCollection  {

}

----Swift.(file).NameFreeFunc


----Swift.(file).getChild(of:T,type:Any.Type,index:Int)


----Swift.(file).Mirror.init(internalReflecting:Any,subjectType:Any.Type?,customAncestor:Mirror?)
extension Mirror  {

}

----Swift.(file).Mirror.quickLookObject(_:Any)
extension Mirror  {

}

----Swift.(file).Repeated.count
extension Repeated {

}

----Swift.(file).Repeated.repeatedValue
extension Repeated {

}

----Swift.(file).Repeated.init(count:Int,repeatedValue:Element)
extension Repeated {

}

----Swift.(file).Repeated.Indices
extension Repeated: RandomAccessCollection  {

}

----Swift.(file).Repeated.Index
extension Repeated: RandomAccessCollection  {

}

----Swift.(file).Repeated.init(_repeating:Element,count:Int)
extension Repeated: RandomAccessCollection  {

}

----Swift.(file).Repeated.startIndex
extension Repeated: RandomAccessCollection  {

}

----Swift.(file).Repeated.endIndex
extension Repeated: RandomAccessCollection  {

}

----Swift.(file).Repeated.subscript(_:Int)
extension Repeated: RandomAccessCollection  {

}

----Swift.(file).repeatElement(_:T,count:Int)


----Swift.(file).Result.success
extension Result {

}

----Swift.(file).Result.failure
extension Result {

}

----Swift.(file).Result.map(_:(Success) -> NewSuccess)
extension Result {

}

----Swift.(file).Result.mapError(_:(Failure) -> NewFailure)
extension Result {

}

----Swift.(file).Result.flatMap(_:(Success) -> Result<NewSuccess, Failure>)
extension Result {

}

----Swift.(file).Result.flatMapError(_:(Failure) -> Result<Success, NewFailure>)
extension Result {

}

----Swift.(file).Result.get()
extension Result {

}

----Swift.(file).Result.init(catching:() throws -> Success)
extension Result where Failure == Swift.Error  {

}

----Swift.(file).MutableCollection.reverse()
extension MutableCollection where Self: BidirectionalCollection  {

}

----Swift.(file).ReversedCollection.init(_base:Base)
extension ReversedCollection {

}

----Swift.(file).ReversedCollection.Iterator.init(_base:Base)
extension ReversedCollection.Iterator {

}

----Swift.(file).ReversedCollection.Iterator.Element
extension ReversedCollection.Iterator: IteratorProtocol, Sequence  {

}

----Swift.(file).ReversedCollection.Iterator.next()
extension ReversedCollection.Iterator: IteratorProtocol, Sequence  {

}

----Swift.(file).ReversedCollection.Element
extension ReversedCollection: Sequence  {

}

----Swift.(file).ReversedCollection.makeIterator()
extension ReversedCollection: Sequence  {

}

----Swift.(file).ReversedCollection.Index.base
extension ReversedCollection.Index {

}

----Swift.(file).ReversedCollection.Index.init(_:Base.Index)
extension ReversedCollection.Index {

}

----Swift.(file).ReversedCollection.Index.==infix(_:ReversedCollection<Base>.Index,_:ReversedCollection<Base>.Index)
extension ReversedCollection.Index: Comparable  {

}

----Swift.(file).ReversedCollection.Index.<infix(_:ReversedCollection<Base>.Index,_:ReversedCollection<Base>.Index)
extension ReversedCollection.Index: Comparable  {

}

----Swift.(file).ReversedCollection.Index.hash(into:Hasher)
extension ReversedCollection.Index: Hashable where Base.Index: Hashable  {

}

----Swift.(file).ReversedCollection.startIndex
extension ReversedCollection: BidirectionalCollection  {

}

----Swift.(file).ReversedCollection.endIndex
extension ReversedCollection: BidirectionalCollection  {

}

----Swift.(file).ReversedCollection.index(after:ReversedCollection<Base>.Index)
extension ReversedCollection: BidirectionalCollection  {

}

----Swift.(file).ReversedCollection.index(before:ReversedCollection<Base>.Index)
extension ReversedCollection: BidirectionalCollection  {

}

----Swift.(file).ReversedCollection.index(_:ReversedCollection<Base>.Index,offsetBy:Int)
extension ReversedCollection: BidirectionalCollection  {

}

----Swift.(file).ReversedCollection.index(_:ReversedCollection<Base>.Index,offsetBy:Int,limitedBy:ReversedCollection<Base>.Index)
extension ReversedCollection: BidirectionalCollection  {

}

----Swift.(file).ReversedCollection.distance(from:ReversedCollection<Base>.Index,to:ReversedCollection<Base>.Index)
extension ReversedCollection: BidirectionalCollection  {

}

----Swift.(file).ReversedCollection.subscript(_:ReversedCollection<Base>.Index)
extension ReversedCollection: BidirectionalCollection  {

}

----Swift.(file).ReversedCollection.reversed()
extension ReversedCollection  {

}

----Swift.(file).BidirectionalCollection.reversed()
extension BidirectionalCollection  {

}

----Swift.(file).IteratorProtocol.Element
extension IteratorProtocol {

}

----Swift.(file).IteratorProtocol.next()
extension IteratorProtocol {

}

----Swift.(file).Sequence.Element
extension Sequence {

}

----Swift.(file).Sequence.Iterator
extension Sequence {

}

----Swift.(file).Sequence.makeIterator()
extension Sequence {

}

----Swift.(file).Sequence.underestimatedCount
extension Sequence {

}

----Swift.(file).Sequence.withContiguousStorageIfAvailable(_:(UnsafeBufferPointer<Self.Element>) throws -> R)
extension Sequence {

}

----Swift.(file).Sequence.makeIterator()
extension Sequence where Self.Iterator == Self  {

}

----Swift.(file).DropFirstSequence.init(_:Base,dropping:Int)
extension DropFirstSequence {

}

----Swift.(file).DropFirstSequence.Element
extension DropFirstSequence: Sequence  {

}

----Swift.(file).DropFirstSequence.Iterator
extension DropFirstSequence: Sequence  {

}

----Swift.(file).DropFirstSequence.SubSequence
extension DropFirstSequence: Sequence  {

}

----Swift.(file).DropFirstSequence.makeIterator()
extension DropFirstSequence: Sequence  {

}

----Swift.(file).DropFirstSequence.dropFirst(_:Int)
extension DropFirstSequence: Sequence  {

}

----Swift.(file).PrefixSequence.init(_:Base,maxLength:Int)
extension PrefixSequence {

}

----Swift.(file).PrefixSequence.Iterator.init(_:Base.Iterator,maxLength:Int)
extension PrefixSequence.Iterator {

}

----Swift.(file).PrefixSequence.Iterator.Element
extension PrefixSequence.Iterator: IteratorProtocol  {

}

----Swift.(file).PrefixSequence.Iterator.next()
extension PrefixSequence.Iterator: IteratorProtocol  {

}

----Swift.(file).PrefixSequence.makeIterator()
extension PrefixSequence: Sequence  {

}

----Swift.(file).PrefixSequence.prefix(_:Int)
extension PrefixSequence: Sequence  {

}

----Swift.(file).DropWhileSequence.Element
extension DropWhileSequence {

}

----Swift.(file).DropWhileSequence.init(iterator:Base.Iterator,predicate:(Base.Element) throws -> Bool)
extension DropWhileSequence {

}

----Swift.(file).DropWhileSequence.init(_:Base,predicate:(Base.Element) throws -> Bool)
extension DropWhileSequence {

}

----Swift.(file).DropWhileSequence.Iterator.init(_:Base.Iterator,nextElement:DropWhileSequence<Base>.Iterator.Element?)
extension DropWhileSequence.Iterator {

}

----Swift.(file).DropWhileSequence.Iterator.Element
extension DropWhileSequence.Iterator: IteratorProtocol  {

}

----Swift.(file).DropWhileSequence.Iterator.next()
extension DropWhileSequence.Iterator: IteratorProtocol  {

}

----Swift.(file).DropWhileSequence.makeIterator()
extension DropWhileSequence: Sequence  {

}

----Swift.(file).DropWhileSequence.drop(while:(Base.Element) throws -> Bool)
extension DropWhileSequence: Sequence  {

}

----Swift.(file).Sequence.map(_:(Self.Element) throws -> T)
extension Sequence  {

}

----Swift.(file).Sequence.filter(_:(Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.underestimatedCount
extension Sequence  {

}

----Swift.(file).Sequence.forEach(_:(Self.Element) throws -> Void)
extension Sequence  {

}

----Swift.(file).Sequence.first(where:(Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.split(separator:Self.Element,maxSplits:Int,omittingEmptySubsequences:Bool)
extension Sequence where Element : Equatable  {

}

----Swift.(file).Sequence.split(maxSplits:Int,omittingEmptySubsequences:Bool,whereSeparator:(Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.suffix(_:Int)
extension Sequence  {

}

----Swift.(file).Sequence.dropFirst(_:Int)
extension Sequence  {

}

----Swift.(file).Sequence.dropLast(_:Int)
extension Sequence  {

}

----Swift.(file).Sequence.drop(while:(Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.prefix(_:Int)
extension Sequence  {

}

----Swift.(file).Sequence.prefix(while:(Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.withContiguousStorageIfAvailable(_:(UnsafeBufferPointer<Self.Element>) throws -> R)
extension Sequence  {

}

----Swift.(file).IteratorSequence.init(_:Base)
extension IteratorSequence {

}

----Swift.(file).IteratorSequence.next()
extension IteratorSequence: IteratorProtocol, Sequence  {

}

----Swift.(file).Sequence.enumerated()
extension Sequence  {

}

----Swift.(file).Sequence.min(by:(Self.Element, Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.max(by:(Self.Element, Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.min()
extension Sequence where Element: Comparable  {

}

----Swift.(file).Sequence.max()
extension Sequence where Element: Comparable  {

}

----Swift.(file).Sequence.starts(with:PossiblePrefix,by:(Self.Element, PossiblePrefix.Element) throws -> Bool)
extension Sequence   {

}

----Swift.(file).Sequence.starts(with:PossiblePrefix)
extension Sequence where Element: Equatable  {

}

----Swift.(file).Sequence.elementsEqual(_:OtherSequence,by:(Self.Element, OtherSequence.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.elementsEqual(_:OtherSequence)
extension Sequence where Element : Equatable  {

}

----Swift.(file).Sequence.lexicographicallyPrecedes(_:OtherSequence,by:(Self.Element, Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.lexicographicallyPrecedes(_:OtherSequence)
extension Sequence where Element : Comparable  {

}

----Swift.(file).Sequence.contains(where:(Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.allSatisfy(_:(Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.contains(_:Self.Element)
extension Sequence where Element : Equatable  {

}

----Swift.(file).Sequence.count(where:(Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).Sequence.reduce(_:Result,_:(Result, Self.Element) throws -> Result)
extension Sequence  {

}

----Swift.(file).Sequence.reduce(into:Result,_:(inout Result, Self.Element) throws -> ())
extension Sequence  {

}

----Swift.(file).Sequence.reversed()
extension Sequence  {

}

----Swift.(file).Sequence.flatMap(_:(Self.Element) throws -> SegmentOfResult)
extension Sequence  {

}

----Swift.(file).Sequence.compactMap(_:(Self.Element) throws -> ElementOfResult?)
extension Sequence  {

}

----Swift.(file).SetAlgebra.Element
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.init()
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.contains(_:Self.Element)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.union(_:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.intersection(_:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.symmetricDifference(_:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.insert(_:Self.Element)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.remove(_:Self.Element)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.update(with:Self.Element)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.formUnion(_:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.formIntersection(_:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.formSymmetricDifference(_:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.subtracting(_:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.isSubset(of:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.isDisjoint(with:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.isSuperset(of:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.isEmpty
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.init(_:S)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.subtract(_:Self)
extension SetAlgebra {

}

----Swift.(file).SetAlgebra.init(_:S)
extension SetAlgebra  {

}

----Swift.(file).SetAlgebra.subtract(_:Self)
extension SetAlgebra  {

}

----Swift.(file).SetAlgebra.isSubset(of:Self)
extension SetAlgebra  {

}

----Swift.(file).SetAlgebra.isSuperset(of:Self)
extension SetAlgebra  {

}

----Swift.(file).SetAlgebra.isDisjoint(with:Self)
extension SetAlgebra  {

}

----Swift.(file).SetAlgebra.subtracting(_:Self)
extension SetAlgebra  {

}

----Swift.(file).SetAlgebra.isEmpty
extension SetAlgebra  {

}

----Swift.(file).SetAlgebra.isStrictSuperset(of:Self)
extension SetAlgebra  {

}

----Swift.(file).SetAlgebra.isStrictSubset(of:Self)
extension SetAlgebra  {

}

----Swift.(file).SetAlgebra.init(arrayLiteral:[Self.Element])
extension SetAlgebra where Element == ArrayLiteralElement  {

}

----Swift.(file).Set.insert(_:ConcreteElement)
extension Set where Element == AnyHashable  {

}

----Swift.(file).Set.update(with:ConcreteElement)
extension Set where Element == AnyHashable  {

}

----Swift.(file).Set.remove(_:ConcreteElement)
extension Set where Element == AnyHashable  {

}

----Swift.(file)..(error_type).bridged()
extension _NativeSet  {

}

----Swift.(file)._CocoaSet.member(for:_CocoaSet.Index)
extension _CocoaSet  {

}

----Swift.(file)._CocoaSet.member(for:AnyObject)
extension _CocoaSet  {

}

----Swift.(file)._CocoaSet.isEqual(to:_CocoaSet)
extension _CocoaSet  {

}

----Swift.(file)._CocoaSet.Element
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.startIndex
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.endIndex
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.index(after:_CocoaSet.Index)
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.validate(_:_CocoaSet.Index)
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.formIndex(after:_CocoaSet.Index,isUnique:Bool)
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.index(for:AnyObject)
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.count
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.contains(_:AnyObject)
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.element(at:_CocoaSet.Index)
extension _CocoaSet: _SetBuffer  {

}

----Swift.(file)._CocoaSet.Index.handleBitPattern
extension _CocoaSet.Index  {

}

----Swift.(file)._CocoaSet.Index.age
extension _CocoaSet.Index  {

}

----Swift.(file)._CocoaSet.Index.==infix(_:_CocoaSet.Index,_:_CocoaSet.Index)
extension _CocoaSet.Index: Equatable  {

}

----Swift.(file)._CocoaSet.Index.<infix(_:_CocoaSet.Index,_:_CocoaSet.Index)
extension _CocoaSet.Index: Comparable  {

}

----Swift.(file)._CocoaSet.makeIterator()
extension _CocoaSet: Sequence  {

}

----Swift.(file)._CocoaSet.Iterator.Element
extension _CocoaSet.Iterator: IteratorProtocol  {

}

----Swift.(file)._CocoaSet.Iterator.next()
extension _CocoaSet.Iterator: IteratorProtocol  {

}

----Swift.(file)._RawSetStorage.empty
extension _RawSetStorage  {

}

----Swift.(file)._EmptySetSingleton.copy(with:<<error type>>)
extension _EmptySetSingleton: _NSSetCore  {

}

----Swift.(file)._EmptySetSingleton.count
extension _EmptySetSingleton: _NSSetCore  {

}

----Swift.(file)._EmptySetSingleton.member(_:AnyObject)
extension _EmptySetSingleton: _NSSetCore  {

}

----Swift.(file)._EmptySetSingleton.objectEnumerator()
extension _EmptySetSingleton: _NSSetCore  {

}

----Swift.(file)._EmptySetSingleton.countByEnumerating(with:UnsafeMutablePointer<_SwiftNSFastEnumerationState>,objects:UnsafeMutablePointer<AnyObject>?,count:Int)
extension _EmptySetSingleton: _NSSetCore  {

}

----Swift.(file)._SetStorage.copy(original:_RawSetStorage)
extension _SetStorage  {

}

----Swift.(file)._SetStorage.resize(original:_RawSetStorage,capacity:Int,move:Bool)
extension _SetStorage  {

}

----Swift.(file)._SetStorage.allocate(capacity:Int)
extension _SetStorage  {

}

----Swift.(file)._SetStorage.convert(_:<<error type>>,capacity:Int)
extension _SetStorage  {

}

----Swift.(file)._SetStorage.allocate(scale:Int8,age:Int32?,seed:Int?)
extension _SetStorage  {

}

----Swift.(file).Hasher._State.compress(_:UInt64)
extension Hasher._State  {

}

----Swift.(file).Hasher._State.finalize(tailAndByteCount:UInt64)
extension Hasher._State  {

}

----Swift.(file).Hasher._State.init()
extension Hasher._State  {

}

----Swift.(file).Hasher._State.init(seed:Int)
extension Hasher._State  {

}

----Swift.(file).Slice.init(base:Base,bounds:Range<Base.Index>)
extension Slice {

}

----Swift.(file).Slice.base
extension Slice {

}

----Swift.(file).Slice.Index
extension Slice: Collection  {

}

----Swift.(file).Slice.Indices
extension Slice: Collection  {

}

----Swift.(file).Slice.Element
extension Slice: Collection  {

}

----Swift.(file).Slice.SubSequence
extension Slice: Collection  {

}

----Swift.(file).Slice.Iterator
extension Slice: Collection  {

}

----Swift.(file).Slice.startIndex
extension Slice: Collection  {

}

----Swift.(file).Slice.endIndex
extension Slice: Collection  {

}

----Swift.(file).Slice.subscript(_:Slice<Base>.Index)
extension Slice: Collection  {

}

----Swift.(file).Slice.subscript(_:Range<Slice<Base>.Index>)
extension Slice: Collection  {

}

----Swift.(file).Slice.indices
extension Slice: Collection  {

}

----Swift.(file).Slice.index(after:Slice<Base>.Index)
extension Slice: Collection  {

}

----Swift.(file).Slice.formIndex(after:Slice<Base>.Index)
extension Slice: Collection  {

}

----Swift.(file).Slice.index(_:Slice<Base>.Index,offsetBy:Int)
extension Slice: Collection  {

}

----Swift.(file).Slice.index(_:Slice<Base>.Index,offsetBy:Int,limitedBy:Slice<Base>.Index)
extension Slice: Collection  {

}

----Swift.(file).Slice.distance(from:Slice<Base>.Index,to:Slice<Base>.Index)
extension Slice: Collection  {

}

----Swift.(file).Slice.index(before:Slice<Base>.Index)
extension Slice: BidirectionalCollection where Base: BidirectionalCollection  {

}

----Swift.(file).Slice.formIndex(before:Slice<Base>.Index)
extension Slice: BidirectionalCollection where Base: BidirectionalCollection  {

}

----Swift.(file).Slice.subscript(_:Slice<Base>.Index)
extension Slice: MutableCollection where Base: MutableCollection  {

}

----Swift.(file).Slice.subscript(_:Range<Slice<Base>.Index>)
extension Slice: MutableCollection where Base: MutableCollection  {

}

----Swift.(file).Slice.init()
extension Slice: RangeReplaceableCollection
  where Base: RangeReplaceableCollection  {

}

----Swift.(file).Slice.init(repeating:Base.Element,count:Int)
extension Slice: RangeReplaceableCollection
  where Base: RangeReplaceableCollection  {

}

----Swift.(file).Slice.init(_:S)
extension Slice: RangeReplaceableCollection
  where Base: RangeReplaceableCollection  {

}

----Swift.(file).Slice.replaceSubrange(_:Range<Slice<Base>.Index>,with:C)
extension Slice: RangeReplaceableCollection
  where Base: RangeReplaceableCollection  {

}

----Swift.(file).Slice.insert(_:Base.Element,at:Slice<Base>.Index)
extension Slice: RangeReplaceableCollection
  where Base: RangeReplaceableCollection  {

}

----Swift.(file).Slice.insert(contentsOf:S,at:Slice<Base>.Index)
extension Slice: RangeReplaceableCollection
  where Base: RangeReplaceableCollection  {

}

----Swift.(file).Slice.remove(at:Slice<Base>.Index)
extension Slice: RangeReplaceableCollection
  where Base: RangeReplaceableCollection  {

}

----Swift.(file).Slice.removeSubrange(_:Range<Slice<Base>.Index>)
extension Slice: RangeReplaceableCollection
  where Base: RangeReplaceableCollection  {

}

----Swift.(file).Slice.replaceSubrange(_:Range<Slice<Base>.Index>,with:C)
extension Slice
  where Base: RangeReplaceableCollection, Base: BidirectionalCollection  {

}

----Swift.(file).Slice.insert(_:Base.Element,at:Slice<Base>.Index)
extension Slice
  where Base: RangeReplaceableCollection, Base: BidirectionalCollection  {

}

----Swift.(file).Slice.insert(contentsOf:S,at:Slice<Base>.Index)
extension Slice
  where Base: RangeReplaceableCollection, Base: BidirectionalCollection  {

}

----Swift.(file).Slice.remove(at:Slice<Base>.Index)
extension Slice
  where Base: RangeReplaceableCollection, Base: BidirectionalCollection  {

}

----Swift.(file).Slice.removeSubrange(_:Range<Slice<Base>.Index>)
extension Slice
  where Base: RangeReplaceableCollection, Base: BidirectionalCollection  {

}

----Swift.(file)._SmallBuffer.stride
extension _SmallBuffer  {

}

----Swift.(file)._SmallBuffer.byteCapacity
extension _SmallBuffer  {

}

----Swift.(file)._SmallBuffer.capacity
extension _SmallBuffer  {

}

----Swift.(file)._SmallBuffer.subscript(_:Int)
extension _SmallBuffer  {

}

----Swift.(file)._SmallString.capacity
extension _SmallString  {

}

----Swift.(file)._SmallString.rawDiscriminatedObject
extension _SmallString  {

}

----Swift.(file)._SmallString.capacity
extension _SmallString  {

}

----Swift.(file)._SmallString.count
extension _SmallString  {

}

----Swift.(file)._SmallString.unusedCapacity
extension _SmallString  {

}

----Swift.(file)._SmallString.isASCII
extension _SmallString  {

}

----Swift.(file)._SmallString.zeroTerminatedRawCodeUnits
extension _SmallString  {

}

----Swift.(file)._SmallString.computeIsASCII()
extension _SmallString  {

}

----Swift.(file)._SmallString.Index
extension _SmallString: RandomAccessCollection, MutableCollection  {

}

----Swift.(file)._SmallString.Element
extension _SmallString: RandomAccessCollection, MutableCollection  {

}

----Swift.(file)._SmallString.SubSequence
extension _SmallString: RandomAccessCollection, MutableCollection  {

}

----Swift.(file)._SmallString.startIndex
extension _SmallString: RandomAccessCollection, MutableCollection  {

}

----Swift.(file)._SmallString.endIndex
extension _SmallString: RandomAccessCollection, MutableCollection  {

}

----Swift.(file)._SmallString.subscript(_:Int)
extension _SmallString: RandomAccessCollection, MutableCollection  {

}

----Swift.(file)._SmallString.subscript(_:Range<_SmallString.Index>)
extension _SmallString: RandomAccessCollection, MutableCollection  {

}

----Swift.(file)._SmallString.withUTF8(_:(UnsafeBufferPointer<UInt8>) throws -> Result)
extension _SmallString  {

}

----Swift.(file)._SmallString.withMutableCapacity(_:(UnsafeMutableBufferPointer<UInt8>) throws -> Int)
extension _SmallString  {

}

----Swift.(file)._SmallString.init(leading:UInt64,trailing:UInt64,count:Int)
extension _SmallString  {

}

----Swift.(file)._SmallString.init(_:UnsafeBufferPointer<UInt8>)
extension _SmallString  {

}

----Swift.(file)._SmallString.init(_:_SmallString,appending:_SmallString)
extension _SmallString  {

}

----Swift.(file)._SmallString.init(taggedCocoa:AnyObject)
extension _SmallString  {

}

----Swift.(file).Sequence.sorted()
extension Sequence where Element: Comparable  {

}

----Swift.(file).Sequence.sorted(by:(Self.Element, Self.Element) throws -> Bool)
extension Sequence  {

}

----Swift.(file).MutableCollection.sort()
extension MutableCollection
where Self: RandomAccessCollection, Element: Comparable  {

}

----Swift.(file).MutableCollection.sort(by:(Self.Element, Self.Element) throws -> Bool)
extension MutableCollection where Self: RandomAccessCollection  {

}

----Swift.(file).StaticString.utf8Start
extension StaticString {

}

----Swift.(file).StaticString.unicodeScalar
extension StaticString {

}

----Swift.(file).StaticString.utf8CodeUnitCount
extension StaticString {

}

----Swift.(file).StaticString.hasPointerRepresentation
extension StaticString {

}

----Swift.(file).StaticString.isASCII
extension StaticString {

}

----Swift.(file).StaticString.withUTF8Buffer(_:(UnsafeBufferPointer<UInt8>) -> R)
extension StaticString {

}

----Swift.(file).StaticString.init()
extension StaticString {

}

----Swift.(file).StaticString.init(_start:<<error type>>,utf8CodeUnitCount:<<error type>>,isASCII:<<error type>>)
extension StaticString {

}

----Swift.(file).StaticString.init(unicodeScalar:<<error type>>)
extension StaticString {

}

----Swift.(file).StaticString.init(_builtinUnicodeScalarLiteral:<<error type>>)
extension StaticString {

}

----Swift.(file).StaticString.init(unicodeScalarLiteral:StaticString)
extension StaticString {

}

----Swift.(file).StaticString.init(_builtinExtendedGraphemeClusterLiteral:<<error type>>,utf8CodeUnitCount:<<error type>>,isASCII:<<error type>>)
extension StaticString {

}

----Swift.(file).StaticString.init(extendedGraphemeClusterLiteral:StaticString)
extension StaticString {

}

----Swift.(file).StaticString.init(_builtinStringLiteral:<<error type>>,utf8CodeUnitCount:<<error type>>,isASCII:<<error type>>)
extension StaticString {

}

----Swift.(file).StaticString.init(stringLiteral:StaticString)
extension StaticString {

}

----Swift.(file).StaticString.description
extension StaticString {

}

----Swift.(file).StaticString.debugDescription
extension StaticString {

}

----Swift.(file).StaticString.customMirror
extension StaticString  {

}

----Swift.(file).Strideable.Stride
extension Strideable {

}

----Swift.(file).Strideable.distance(to:Self)
extension Strideable {

}

----Swift.(file).Strideable.advanced(by:Self.Stride)
extension Strideable {

}

----Swift.(file).Strideable.<infix(_:Self,_:Self)
extension Strideable  {

}

----Swift.(file).Strideable.==infix(_:Self,_:Self)
extension Strideable  {

}

----Swift.(file).StrideToIterator.init(_start:Element,end:Element,stride:Element.Stride)
extension StrideToIterator {

}

----Swift.(file).StrideToIterator.next()
extension StrideToIterator: IteratorProtocol  {

}

----Swift.(file).StrideTo.init(_start:Element,end:Element,stride:Element.Stride)
extension StrideTo {

}

----Swift.(file).StrideTo.makeIterator()
extension StrideTo: Sequence  {

}

----Swift.(file).StrideTo.underestimatedCount
extension StrideTo: Sequence  {

}

----Swift.(file).StrideTo.customMirror
extension StrideTo: CustomReflectable  {

}

----Swift.(file).stride(from:T,to:T,by:T.Stride)


----Swift.(file).StrideThroughIterator.init(_start:Element,end:Element,stride:Element.Stride)
extension StrideThroughIterator {

}

----Swift.(file).StrideThroughIterator.next()
extension StrideThroughIterator: IteratorProtocol  {

}

----Swift.(file).StrideThrough.init(_start:Element,end:Element,stride:Element.Stride)
extension StrideThrough {

}

----Swift.(file).StrideThrough.makeIterator()
extension StrideThrough: Sequence  {

}

----Swift.(file).StrideThrough.underestimatedCount
extension StrideThrough: Sequence  {

}

----Swift.(file).StrideThrough.customMirror
extension StrideThrough: CustomReflectable  {

}

----Swift.(file).stride(from:T,through:T,by:T.Stride)


----Swift.(file).unimplemented_utf8_32bit(_:String,file:StaticString,line:UInt)


----Swift.(file).String.init()
extension String {

}

----Swift.(file).String.init(decoding:C,as:Encoding.Type)
extension String  {

}

----Swift.(file).String.withCString(encodedAs:TargetEncoding.Type,_:(UnsafePointer<TargetEncoding.CodeUnit>) throws -> Result)
extension String  {

}

----Swift.(file).String.init(_builtinUnicodeScalarLiteral:<<error type>>)
extension String: _ExpressibleByBuiltinUnicodeScalarLiteral  {

}

----Swift.(file).String.init(_:Unicode.Scalar)
extension String: _ExpressibleByBuiltinUnicodeScalarLiteral  {

}

----Swift.(file).String.init(_builtinExtendedGraphemeClusterLiteral:<<error type>>,utf8CodeUnitCount:<<error type>>,isASCII:<<error type>>)
extension String: _ExpressibleByBuiltinExtendedGraphemeClusterLiteral  {

}

----Swift.(file).String.init(_builtinStringLiteral:<<error type>>,utf8CodeUnitCount:<<error type>>,isASCII:<<error type>>)
extension String: _ExpressibleByBuiltinStringLiteral  {

}

----Swift.(file).String.init(stringLiteral:String)
extension String: ExpressibleByStringLiteral  {

}

----Swift.(file).String.debugDescription
extension String: CustomDebugStringConvertible  {

}

----Swift.(file).String.+infix(_:String,_:String)
extension String  {

}

----Swift.(file).String.+=infix(_:String,_:String)
extension String  {

}

----Swift.(file).Sequence.joined(separator:String)
extension Sequence where Element: StringProtocol  {

}

----Swift.(file).BidirectionalCollection.joined(separator:String)
extension BidirectionalCollection where Element == String  {

}

----Swift.(file).String.init(_:T)
extension String  {

}

----Swift.(file).String.description
extension String: CustomStringConvertible  {

}

----Swift.(file)._StringBreadcrumbs.stride
extension _StringBreadcrumbs  {

}

----Swift.(file)._StringBreadcrumbs.getBreadcrumb(forOffset:Int)
extension _StringBreadcrumbs  {

}

----Swift.(file)._StringBreadcrumbs.getBreadcrumb(forIndex:String.Index)
extension _StringBreadcrumbs  {

}

----Swift.(file)._StringGuts.getBreadcrumbsPtr()
extension _StringGuts  {

}

----Swift.(file)._StringGuts.populateBreadcrumbs(_:UnsafeMutablePointer<_StringBreadcrumbs?>)
extension _StringGuts  {

}

----Swift.(file).kCFStringEncodingASCII


----Swift.(file).kCFStringEncodingUTF8


----Swift.(file).String.IndexDistance
extension String: BidirectionalCollection  {

}

----Swift.(file).String.SubSequence
extension String: BidirectionalCollection  {

}

----Swift.(file).String.Element
extension String: BidirectionalCollection  {

}

----Swift.(file).String.count
extension String: BidirectionalCollection  {

}

----Swift.(file).String.index(after:String.Index)
extension String: BidirectionalCollection  {

}

----Swift.(file).String.index(before:String.Index)
extension String: BidirectionalCollection  {

}

----Swift.(file).String.index(_:String.Index,offsetBy:String.IndexDistance)
extension String: BidirectionalCollection  {

}

----Swift.(file).String.index(_:String.Index,offsetBy:String.IndexDistance,limitedBy:String.Index)
extension String: BidirectionalCollection  {

}

----Swift.(file).String.distance(from:String.Index,to:String.Index)
extension String: BidirectionalCollection  {

}

----Swift.(file).StringProtocol.!=infix(_:Self,_:RHS)
extension StringProtocol  {

}

----Swift.(file).StringProtocol.>infix(_:Self,_:RHS)
extension StringProtocol  {

}

----Swift.(file).StringProtocol.<=infix(_:Self,_:RHS)
extension StringProtocol  {

}

----Swift.(file).StringProtocol.>=infix(_:Self,_:RHS)
extension StringProtocol  {

}

----Swift.(file)..(error_type).withNFCCodeUnitsIterator_2(_:<<error type>>)
extension _StringGutsSlice  {

}

----Swift.(file)..(error_type).compare(with:<<error type>>,expecting:_StringComparisonResult)
extension _StringGutsSlice  {

}

----Swift.(file)._StringGuts.isOnGraphemeClusterBoundary(_:String.Index)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.rawBits
extension _StringGuts  {

}

----Swift.(file)._StringGuts.init(_:<<error type>>)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.init(_:UnsafeBufferPointer<UInt8>,isASCII:Bool)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.init(_:<<error type>>)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.init(_:<<error type>>)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.init(cocoa:AnyObject,providesFastUTF8:Bool,isASCII:Bool,length:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.count
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isEmpty
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isSmall
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isSmallASCII
extension _StringGuts  {

}

----Swift.(file)._StringGuts.asSmall
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isASCII
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isFastASCII
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isNFC
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isNFCFastUTF8
extension _StringGuts  {

}

----Swift.(file)._StringGuts.hasNativeStorage
extension _StringGuts  {

}

----Swift.(file)._StringGuts.hasSharedStorage
extension _StringGuts  {

}

----Swift.(file)._StringGuts.hasBreadcrumbs
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isFastUTF8
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isForeign
extension _StringGuts  {

}

----Swift.(file)._StringGuts.withFastUTF8(_:(UnsafeBufferPointer<UInt8>) throws -> R)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.withFastUTF8(range:Range<Int>,_:(UnsafeBufferPointer<UInt8>) throws -> R)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.withFastCChar(_:(UnsafeBufferPointer<CChar>) throws -> R)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.withCString(_:(UnsafePointer<Int8>) throws -> Result)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.copyUTF8(into:UnsafeMutableBufferPointer<UInt8>)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.utf8Count
extension _StringGuts  {

}

----Swift.(file)._StringGuts.Index
extension _StringGuts  {

}

----Swift.(file)._StringGuts.startIndex
extension _StringGuts  {

}

----Swift.(file)._StringGuts.endIndex
extension _StringGuts  {

}

----Swift.(file)._StringGuts.startASCII
extension _StringGuts  {

}

----Swift.(file)._StringGuts.startUTF16
extension _StringGuts  {

}

----Swift.(file)._StringGuts.nativeCapacity
extension _StringGuts  {

}

----Swift.(file)._StringGuts.nativeUnusedCapacity
extension _StringGuts  {

}

----Swift.(file)._StringGuts.uniqueNativeCapacity
extension _StringGuts  {

}

----Swift.(file)._StringGuts.uniqueNativeUnusedCapacity
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isUniqueNative
extension _StringGuts  {

}

----Swift.(file)._StringGuts.init(_initialCapacity:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.reserveCapacity(_:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.grow(_:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.prepareForAppendInPlace(otherUTF8Count:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.append(_:_StringGuts)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.appendInPlace(_:UnsafeBufferPointer<UInt8>,isASCII:Bool)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.clear()
extension _StringGuts  {

}

----Swift.(file)._StringGuts.uniqueNativeReplaceSubrange(_:<<error type>>,with:UnsafeBufferPointer<UInt8>,isASCII:Bool)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.uniqueNativeReplaceSubrange(_:<<error type>>,with:C)
extension _StringGuts  {

}

----Swift.(file).String.Index.init(_:UInt64)
extension String.Index {

}

----Swift.(file)..(error_type).orderingValue
extension String.Index  {

}

----Swift.(file)..(error_type).isZeroPosition
extension String.Index  {

}

----Swift.(file)..(error_type).encodedOffset
extension String.Index  {

}

----Swift.(file)..(error_type).transcodedOffset
extension String.Index  {

}

----Swift.(file)..(error_type).characterStride
extension String.Index  {

}

----Swift.(file)..(error_type).init(encodedOffset:Int,transcodedOffset:Int)
extension String.Index  {

}

----Swift.(file)..(error_type).init(encodedOffset:Int)
extension String.Index  {

}

----Swift.(file)..(error_type).init(encodedOffset:Int,transcodedOffset:Int,characterStride:Int)
extension String.Index  {

}

----Swift.(file)..(error_type).init(encodedOffset:Int,characterStride:Int)
extension String.Index  {

}

----Swift.(file)..(error_type).strippingTranscoding
extension String.Index  {

}

----Swift.(file)..(error_type).nextEncoded
extension String.Index  {

}

----Swift.(file)..(error_type).priorEncoded
extension String.Index  {

}

----Swift.(file)..(error_type).nextTranscoded
extension String.Index  {

}

----Swift.(file)..(error_type).priorTranscoded
extension String.Index  {

}

----Swift.(file)..(error_type).encoded(offsetBy:Int)
extension String.Index  {

}

----Swift.(file)..(error_type).transcoded(withOffset:Int)
extension String.Index  {

}

----Swift.(file)..(error_type).==infix(_:<<error type>>,_:<<error type>>)
extension String.Index: Equatable  {

}

----Swift.(file)..(error_type).<infix(_:<<error type>>,_:<<error type>>)
extension String.Index: Comparable  {

}

----Swift.(file)..(error_type).hash(into:Hasher)
extension String.Index: Hashable  {

}

----Swift.(file).String.Index.samePosition(in:String.UTF8View)
extension String.Index  {

}

----Swift.(file).String.Index.samePosition(in:String.UTF16View)
extension String.Index  {

}

----Swift.(file).DefaultStringInterpolation.init(literalCapacity:Int,interpolationCount:Int)
extension DefaultStringInterpolation {

}

----Swift.(file).DefaultStringInterpolation.appendLiteral(_:String)
extension DefaultStringInterpolation {

}

----Swift.(file).DefaultStringInterpolation.appendInterpolation(_:T)
extension DefaultStringInterpolation {

}

----Swift.(file).DefaultStringInterpolation.appendInterpolation(_:T)
extension DefaultStringInterpolation {

}

----Swift.(file).DefaultStringInterpolation.appendInterpolation(_:T)
extension DefaultStringInterpolation {

}

----Swift.(file).DefaultStringInterpolation.appendInterpolation(_:T)
extension DefaultStringInterpolation {

}

----Swift.(file).DefaultStringInterpolation.make()
extension DefaultStringInterpolation {

}

----Swift.(file).DefaultStringInterpolation.description
extension DefaultStringInterpolation: CustomStringConvertible  {

}

----Swift.(file).DefaultStringInterpolation.write(_:String)
extension DefaultStringInterpolation: TextOutputStream  {

}

----Swift.(file).String.init(stringInterpolation:DefaultStringInterpolation)
extension String  {

}

----Swift.(file).Substring.init(stringInterpolation:DefaultStringInterpolation)
extension Substring  {

}

----Swift.(file).String.init(repeating:String,count:Int)
extension String  {

}

----Swift.(file).StringProtocol.hasPrefix(_:Prefix)
extension StringProtocol  {

}

----Swift.(file).StringProtocol.hasSuffix(_:Suffix)
extension StringProtocol  {

}

----Swift.(file).String.init(_:T,radix:Int,uppercase:Bool)
extension String  {

}

----Swift.(file)._StringObject.RawBitPattern
extension _StringObject  {

}

----Swift.(file)._StringObject.rawBits
extension _StringObject  {

}

----Swift.(file)._StringObject.init(bridgeObject:<<error type>>,countAndFlags:_StringObject.CountAndFlags)
extension _StringObject  {

}

----Swift.(file)._StringObject.init(object:AnyObject,discriminator:UInt64,countAndFlags:_StringObject.CountAndFlags)
extension _StringObject  {

}

----Swift.(file)._StringObject.init(pointerBits:UInt64,discriminator:UInt64,countAndFlags:_StringObject.CountAndFlags)
extension _StringObject  {

}

----Swift.(file)._StringObject.init(rawUncheckedValue:_StringObject.RawBitPattern)
extension _StringObject  {

}

----Swift.(file)._StringObject.init(rawValue:_StringObject.RawBitPattern)
extension _StringObject  {

}

----Swift.(file)._StringObject.CountAndFlags.RawBitPattern
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.rawBits
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.init(rawUnchecked:_StringObject.CountAndFlags.RawBitPattern)
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.init(raw:_StringObject.CountAndFlags.RawBitPattern)
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.Nibbles.emptyString
extension _StringObject.Nibbles  {

}

----Swift.(file)._StringObject.Nibbles.largeAddressMask
extension _StringObject.Nibbles  {

}

----Swift.(file)._StringObject.Nibbles.discriminatorMask
extension _StringObject.Nibbles  {

}

----Swift.(file)._StringObject.Nibbles.small(isASCII:Bool)
extension _StringObject.Nibbles  {

}

----Swift.(file)._StringObject.Nibbles.small(withCount:Int,isASCII:Bool)
extension _StringObject.Nibbles  {

}

----Swift.(file)._StringObject.Nibbles.largeImmortal()
extension _StringObject.Nibbles  {

}

----Swift.(file)._StringObject.Nibbles.largeMortal()
extension _StringObject.Nibbles  {

}

----Swift.(file)._StringObject.Nibbles.largeCocoa(providesFastUTF8:Bool)
extension _StringObject.Nibbles  {

}

----Swift.(file)._StringObject.nativeBias
extension _StringObject  {

}

----Swift.(file)._StringObject.isImmortal
extension _StringObject  {

}

----Swift.(file)._StringObject.isMortal
extension _StringObject  {

}

----Swift.(file)._StringObject.isSmall
extension _StringObject  {

}

----Swift.(file)._StringObject.isLarge
extension _StringObject  {

}

----Swift.(file)._StringObject.providesFastUTF8
extension _StringObject  {

}

----Swift.(file)._StringObject.isForeign
extension _StringObject  {

}

----Swift.(file)._StringObject.hasStorage
extension _StringObject  {

}

----Swift.(file)._StringObject.hasNativeStorage
extension _StringObject  {

}

----Swift.(file)._StringObject.hasSharedStorage
extension _StringObject  {

}

----Swift.(file)._StringObject.largeFastIsTailAllocated
extension _StringObject  {

}

----Swift.(file)._StringObject.largeFastIsShared
extension _StringObject  {

}

----Swift.(file)._StringObject.largeIsCocoa
extension _StringObject  {

}

----Swift.(file)._StringObject.init(_:<<error type>>)
extension _StringObject  {

}

----Swift.(file)._StringObject.getSmallCount(fromRaw:UInt64)
extension _StringObject  {

}

----Swift.(file)._StringObject.smallCount
extension _StringObject  {

}

----Swift.(file)._StringObject.getSmallIsASCII(fromRaw:UInt64)
extension _StringObject  {

}

----Swift.(file)._StringObject.smallIsASCII
extension _StringObject  {

}

----Swift.(file)._StringObject.init(empty:())
extension _StringObject  {

}

----Swift.(file)._StringObject.CountAndFlags.countMask
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.flagsMask
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.isASCIIMask
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.isNFCMask
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.isNativelyStoredMask
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.isTailAllocatedMask
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.init(count:Int,isASCII:Bool,isNFC:Bool,isNativelyStored:Bool,isTailAllocated:Bool)
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.init(count:Int,flags:UInt16)
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.init(immortalCount:Int,isASCII:Bool)
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.init(mortalCount:Int,isASCII:Bool)
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.init(sharedCount:Int,isASCII:Bool)
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.count
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.flags
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.isASCII
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.isNFC
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.isNativelyStored
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.CountAndFlags.isTailAllocated
extension _StringObject.CountAndFlags  {

}

----Swift.(file)._StringObject.largeCount
extension _StringObject  {

}

----Swift.(file)._StringObject.largeAddressBits
extension _StringObject  {

}

----Swift.(file)._StringObject.nativeUTF8Start
extension _StringObject  {

}

----Swift.(file)._StringObject.nativeUTF8
extension _StringObject  {

}

----Swift.(file)._StringObject.getSharedUTF8Start()
extension _StringObject  {

}

----Swift.(file)._StringObject.sharedUTF8
extension _StringObject  {

}

----Swift.(file)._StringObject.count
extension _StringObject  {

}

----Swift.(file)._StringObject.isASCII
extension _StringObject  {

}

----Swift.(file)._StringObject.isNFC
extension _StringObject  {

}

----Swift.(file)._StringObject.fastUTF8
extension _StringObject  {

}

----Swift.(file)._StringObject.hasObjCBridgeableObject
extension _StringObject  {

}

----Swift.(file)._StringObject.objCBridgeableObject
extension _StringObject  {

}

----Swift.(file)._StringObject.isFastZeroTerminated
extension _StringObject  {

}

----Swift.(file)._StringObject.init(immortal:UnsafeBufferPointer<UInt8>,isASCII:Bool)
extension _StringObject  {

}

----Swift.(file)._StringObject.init(_:<<error type>>)
extension _StringObject  {

}

----Swift.(file)._StringObject.init(_:<<error type>>)
extension _StringObject  {

}

----Swift.(file)._StringObject.init(cocoa:AnyObject,providesFastUTF8:Bool,isASCII:Bool,length:Int)
extension _StringObject  {

}

----Swift.(file).StringProtocol.UTF8View
extension StringProtocol {

}

----Swift.(file).StringProtocol.UTF16View
extension StringProtocol {

}

----Swift.(file).StringProtocol.UnicodeScalarView
extension StringProtocol {

}

----Swift.(file).StringProtocol.SubSequence
extension StringProtocol {

}

----Swift.(file).StringProtocol.utf8
extension StringProtocol {

}

----Swift.(file).StringProtocol.utf16
extension StringProtocol {

}

----Swift.(file).StringProtocol.unicodeScalars
extension StringProtocol {

}

----Swift.(file).StringProtocol.hasPrefix(_:String)
extension StringProtocol {

}

----Swift.(file).StringProtocol.hasSuffix(_:String)
extension StringProtocol {

}

----Swift.(file).StringProtocol.lowercased()
extension StringProtocol {

}

----Swift.(file).StringProtocol.uppercased()
extension StringProtocol {

}

----Swift.(file).StringProtocol.init(decoding:C,as:Encoding.Type)
extension StringProtocol {

}

----Swift.(file).StringProtocol.init(cString:UnsafePointer<CChar>)
extension StringProtocol {

}

----Swift.(file).StringProtocol.init(decodingCString:UnsafePointer<Encoding.CodeUnit>,as:Encoding.Type)
extension StringProtocol {

}

----Swift.(file).StringProtocol.withCString(_:(UnsafePointer<CChar>) throws -> Result)
extension StringProtocol {

}

----Swift.(file).StringProtocol.withCString(encodedAs:Encoding.Type,_:(UnsafePointer<Encoding.CodeUnit>) throws -> Result)
extension StringProtocol {

}

----Swift.(file).String.init(repeating:Character,count:Int)
extension String: RangeReplaceableCollection  {

}

----Swift.(file).String.init(_:S)
extension String: RangeReplaceableCollection  {

}

----Swift.(file).String.init(_:S)
extension String: RangeReplaceableCollection  {

}

----Swift.(file).String.reserveCapacity(_:Int)
extension String: RangeReplaceableCollection  {

}

----Swift.(file).String.append(_:Character)
extension String: RangeReplaceableCollection  {

}

----Swift.(file).String.append(contentsOf:String)
extension String: RangeReplaceableCollection  {

}

----Swift.(file).String.append(contentsOf:S)
extension String: RangeReplaceableCollection  {

}

----Swift.(file).String.insert(_:Character,at:String.Index)
extension String: RangeReplaceableCollection  {

}

----Swift.(file).String.insert(contentsOf:S,at:String.Index)
extension String: RangeReplaceableCollection  {

}

----Swift.(file).String.max(_:T,_:T)
extension String  {

}

----Swift.(file).String.min(_:T,_:T)
extension String  {

}

----Swift.(file).Sequence.+infix(_:Self,_:String)
extension Sequence where Element == String  {

}

----Swift.(file).Sequence.+infix(_:String,_:Self)
extension Sequence where Element == String  {

}

----Swift.(file).CountAndFlags


----Swift.(file).determineCodeUnitCapacity(_:Int)


----Swift.(file)._StringStorage.create(realCodeUnitCapacity:Int,countAndFlags:<<error type>>)
extension _StringStorage  {

}

----Swift.(file)._StringStorage.create(capacity:Int,countAndFlags:<<error type>>)
extension _StringStorage  {

}

----Swift.(file)._StringStorage.create(initializingFrom:UnsafeBufferPointer<UInt8>,capacity:Int,isASCII:Bool)
extension _StringStorage  {

}

----Swift.(file)._StringStorage.create(initializingFrom:UnsafeBufferPointer<UInt8>,isASCII:Bool)
extension _StringStorage  {

}

----Swift.(file)._StringStorage.mutableStart
extension _StringStorage  {

}

----Swift.(file)._StringStorage.mutableEnd
extension _StringStorage  {

}

----Swift.(file)._StringStorage.start
extension _StringStorage  {

}

----Swift.(file)._StringStorage.end
extension _StringStorage  {

}

----Swift.(file)._StringStorage.terminator
extension _StringStorage  {

}

----Swift.(file)._StringStorage.codeUnits
extension _StringStorage  {

}

----Swift.(file)._StringStorage.capacity
extension _StringStorage  {

}

----Swift.(file)._StringStorage.unusedStorage
extension _StringStorage  {

}

----Swift.(file)._StringStorage.unusedCapacity
extension _StringStorage  {

}

----Swift.(file)._StringStorage.appendInPlace(_:UnsafeBufferPointer<UInt8>,isASCII:Bool)
extension _StringStorage  {

}

----Swift.(file)._StringStorage.appendInPlace(_:Iter,isASCII:Bool)
extension _StringStorage  {

}

----Swift.(file)._StringStorage.clear()
extension _StringStorage  {

}

----Swift.(file)._StringStorage.remove(from:Int,to:Int)
extension _StringStorage  {

}

----Swift.(file)._StringStorage.replace(from:Int,to:Int,with:UnsafeBufferPointer<UInt8>)
extension _StringStorage  {

}

----Swift.(file)._StringStorage.replace(from:Int,to:Int,with:C,replacementCount:Int)
extension _StringStorage  {

}

----Swift.(file)..(error_type).Index
extension String.UTF16View: BidirectionalCollection  {

}

----Swift.(file)..(error_type).debugDescription
extension String.UTF16View: CustomDebugStringConvertible  {

}

----Swift.(file)..(error_type).samePosition(in:String.UnicodeScalarView)
extension String.UTF16View.Index  {

}

----Swift.(file)..(error_type).customMirror
extension String.UTF16View : CustomReflectable  {

}

----Swift.(file)..(error_type).SubSequence
extension String.UTF16View  {

}

----Swift.(file)..(error_type).subscript(_:Range<String.UTF16View.Index>)
extension String.UTF16View  {

}

----Swift.(file).repairUTF8(_:UnsafeBufferPointer<UInt8>,firstKnownBrokenRange:Range<Int>)


----Swift.(file)..(error_type).Index
extension String.UTF8View: BidirectionalCollection  {

}

----Swift.(file)..(error_type).Element
extension String.UTF8View: BidirectionalCollection  {

}

----Swift.(file)..(error_type).debugDescription
extension String.UTF8View: CustomDebugStringConvertible  {

}

----Swift.(file)..(error_type).customMirror
extension String.UTF8View : CustomReflectable  {

}

----Swift.(file)..(error_type).SubSequence
extension String.UTF8View  {

}

----Swift.(file)..(error_type).subscript(_:Range<String.UTF8View.Index>)
extension String.UTF8View  {

}

----Swift.(file)..(error_type).Index
extension String.UnicodeScalarView: BidirectionalCollection  {

}

----Swift.(file)..(error_type).debugDescription
extension String.UnicodeScalarView: CustomDebugStringConvertible  {

}

----Swift.(file).String.UnicodeScalarIndex
extension String  {

}

----Swift.(file)..(error_type).init()
extension String.UnicodeScalarView : RangeReplaceableCollection  {

}

----Swift.(file)..(error_type).reserveCapacity(_:Int)
extension String.UnicodeScalarView : RangeReplaceableCollection  {

}

----Swift.(file)..(error_type).samePosition(in:String)
extension String.UnicodeScalarIndex  {

}

----Swift.(file)..(error_type).customMirror
extension String.UnicodeScalarView : CustomReflectable  {

}

----Swift.(file)..(error_type).SubSequence
extension String.UnicodeScalarView  {

}

----Swift.(file)..(error_type).subscript(_:Range<String.UnicodeScalarView.Index>)
extension String.UnicodeScalarView  {

}

----Swift.(file).String.init(_:Substring)
extension String  {

}

----Swift.(file).Substring.init(_:Slice<String>)
extension Substring {

}

----Swift.(file).Substring.init()
extension Substring {

}

----Swift.(file).Substring.Index
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.SubSequence
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.startIndex
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.endIndex
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.index(after:Substring.Index)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.index(before:Substring.Index)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.index(_:Substring.Index,offsetBy:Int)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.index(_:Substring.Index,offsetBy:Int,limitedBy:Substring.Index)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.distance(from:Substring.Index,to:Substring.Index)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.subscript(_:Substring.Index)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.replaceSubrange(_:Range<Substring.Index>,with:C)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.replaceSubrange(_:Range<Substring.Index>,with:Substring)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.init(decoding:C,as:Encoding.Type)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.init(cString:UnsafePointer<CChar>)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.init(decodingCString:UnsafePointer<Encoding.CodeUnit>,as:Encoding.Type)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.withCString(_:(UnsafePointer<CChar>) throws -> Result)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.withCString(encodedAs:TargetEncoding.Type,_:(UnsafePointer<TargetEncoding.CodeUnit>) throws -> Result)
extension Substring: StringProtocol  {

}

----Swift.(file).Substring.customMirror
extension Substring : CustomReflectable  {

}

----Swift.(file).Substring.description
extension Substring : CustomStringConvertible  {

}

----Swift.(file).Substring.debugDescription
extension Substring : CustomDebugStringConvertible  {

}

----Swift.(file).Substring.init(_:String)
extension Substring : LosslessStringConvertible  {

}

----Swift.(file).Substring.UTF8View.init(_slice:Slice<String.UTF8View>)
extension Substring.UTF8View {

}

----Swift.(file).Substring.UTF8View.Index
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.Indices
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.Element
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.SubSequence
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.startIndex
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.endIndex
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.subscript(_:Substring.UTF8View.Index)
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.indices
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.index(after:Substring.UTF8View.Index)
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.formIndex(after:Substring.UTF8View.Index)
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.index(_:Substring.UTF8View.Index,offsetBy:Int)
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.index(_:Substring.UTF8View.Index,offsetBy:Int,limitedBy:Substring.UTF8View.Index)
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.distance(from:Substring.UTF8View.Index,to:Substring.UTF8View.Index)
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.index(before:Substring.UTF8View.Index)
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.formIndex(before:Substring.UTF8View.Index)
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF8View.subscript(_:Range<Substring.UTF8View.Index>)
extension Substring.UTF8View : BidirectionalCollection  {

}

----Swift.(file).Substring.utf8
extension Substring  {

}

----Swift.(file).Substring.UTF16View.init(_slice:Slice<String.UTF16View>)
extension Substring.UTF16View {

}

----Swift.(file).Substring.UTF16View.Index
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.Indices
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.Element
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.SubSequence
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.startIndex
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.endIndex
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.subscript(_:Substring.UTF16View.Index)
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.indices
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.index(after:Substring.UTF16View.Index)
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.formIndex(after:Substring.UTF16View.Index)
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.index(_:Substring.UTF16View.Index,offsetBy:Int)
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.index(_:Substring.UTF16View.Index,offsetBy:Int,limitedBy:Substring.UTF16View.Index)
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.distance(from:Substring.UTF16View.Index,to:Substring.UTF16View.Index)
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.index(before:Substring.UTF16View.Index)
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.formIndex(before:Substring.UTF16View.Index)
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.UTF16View.subscript(_:Range<Substring.UTF16View.Index>)
extension Substring.UTF16View : BidirectionalCollection  {

}

----Swift.(file).Substring.utf16
extension Substring  {

}

----Swift.(file).Substring.UnicodeScalarView.init(_slice:Slice<String.UnicodeScalarView>)
extension Substring.UnicodeScalarView {

}

----Swift.(file).Substring.UnicodeScalarView.Index
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.Indices
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.Element
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.SubSequence
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.startIndex
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.endIndex
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.subscript(_:Substring.UnicodeScalarView.Index)
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.indices
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.index(after:Substring.UnicodeScalarView.Index)
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.formIndex(after:Substring.UnicodeScalarView.Index)
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.index(_:Substring.UnicodeScalarView.Index,offsetBy:Int)
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.index(_:Substring.UnicodeScalarView.Index,offsetBy:Int,limitedBy:Substring.UnicodeScalarView.Index)
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.distance(from:Substring.UnicodeScalarView.Index,to:Substring.UnicodeScalarView.Index)
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.index(before:Substring.UnicodeScalarView.Index)
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.formIndex(before:Substring.UnicodeScalarView.Index)
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.subscript(_:Range<Substring.UnicodeScalarView.Index>)
extension Substring.UnicodeScalarView : BidirectionalCollection  {

}

----Swift.(file).Substring.unicodeScalars
extension Substring  {

}

----Swift.(file).String.init(_:Substring.UnicodeScalarView)
extension String  {

}

----Swift.(file).Substring.UnicodeScalarView.init()
extension Substring.UnicodeScalarView : RangeReplaceableCollection  {

}

----Swift.(file).Substring.UnicodeScalarView.replaceSubrange(_:Range<Substring.UnicodeScalarView.Index>,with:C)
extension Substring.UnicodeScalarView : RangeReplaceableCollection  {

}

----Swift.(file).Substring.init(_:S)
extension Substring : RangeReplaceableCollection  {

}

----Swift.(file).Substring.append(contentsOf:S)
extension Substring : RangeReplaceableCollection  {

}

----Swift.(file).Substring.lowercased()
extension Substring  {

}

----Swift.(file).Substring.uppercased()
extension Substring  {

}

----Swift.(file).Substring.filter(_:(Substring.Element) throws -> Bool)
extension Substring  {

}

----Swift.(file).Substring.write(_:String)
extension Substring : TextOutputStream  {

}

----Swift.(file).Substring.write(to:Target)
extension Substring : TextOutputStreamable  {

}

----Swift.(file).Substring.init(unicodeScalarLiteral:String)
extension Substring : ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file).Substring.init(extendedGraphemeClusterLiteral:String)
extension Substring : ExpressibleByExtendedGraphemeClusterLiteral  {

}

----Swift.(file).Substring.init(stringLiteral:String)
extension Substring : ExpressibleByStringLiteral  {

}

----Swift.(file).String.subscript(_:Range<String.Index>)
extension String  {

}

----Swift.(file).Substring.subscript(_:Range<Substring.Index>)
extension Substring  {

}

----Swift.(file).__SwiftNativeNSArrayWithContiguousStorage.count
extension __SwiftNativeNSArrayWithContiguousStorage : _NSArrayCore  {

}

----Swift.(file).__SwiftNativeNSArrayWithContiguousStorage.objectAt(_:Int)
extension __SwiftNativeNSArrayWithContiguousStorage : _NSArrayCore  {

}

----Swift.(file).__SwiftNativeNSArrayWithContiguousStorage.getObjects(_:UnsafeMutablePointer<AnyObject>,range:_SwiftNSRange)
extension __SwiftNativeNSArrayWithContiguousStorage : _NSArrayCore  {

}

----Swift.(file).__SwiftNativeNSArrayWithContiguousStorage.countByEnumerating(with:UnsafeMutablePointer<_SwiftNSFastEnumerationState>,objects:UnsafeMutablePointer<AnyObject>?,count:Int)
extension __SwiftNativeNSArrayWithContiguousStorage : _NSArrayCore  {

}

----Swift.(file).__SwiftNativeNSArrayWithContiguousStorage.copy(with:<<error type>>)
extension __SwiftNativeNSArrayWithContiguousStorage : _NSArrayCore  {

}

----Swift.(file)._UIntBuffer.SubSequence
extension _UIntBuffer : Sequence  {

}

----Swift.(file)._UIntBuffer.Iterator.init(_:_UIntBuffer<Element>)
extension _UIntBuffer.Iterator {

}

----Swift.(file)._UIntBuffer.Iterator.next()
extension _UIntBuffer.Iterator {

}

----Swift.(file)._UIntBuffer.makeIterator()
extension _UIntBuffer : Sequence  {

}

----Swift.(file)._UIntBuffer.Index.bitOffset
extension _UIntBuffer.Index {

}

----Swift.(file)._UIntBuffer.Index.init(bitOffset:UInt8)
extension _UIntBuffer.Index {

}

----Swift.(file)._UIntBuffer.Index.==infix(_:_UIntBuffer<Element>.Index,_:_UIntBuffer<Element>.Index)
extension _UIntBuffer.Index {

}

----Swift.(file)._UIntBuffer.Index.<infix(_:_UIntBuffer<Element>.Index,_:_UIntBuffer<Element>.Index)
extension _UIntBuffer.Index {

}

----Swift.(file)._UIntBuffer.startIndex
extension _UIntBuffer : Collection  {

}

----Swift.(file)._UIntBuffer.endIndex
extension _UIntBuffer : Collection  {

}

----Swift.(file)._UIntBuffer.index(after:_UIntBuffer<Element>.Index)
extension _UIntBuffer : Collection  {

}

----Swift.(file)._UIntBuffer.subscript(_:_UIntBuffer<Element>.Index)
extension _UIntBuffer : Collection  {

}

----Swift.(file)._UIntBuffer.index(before:_UIntBuffer<Element>.Index)
extension _UIntBuffer : BidirectionalCollection  {

}

----Swift.(file)._UIntBuffer.Indices
extension _UIntBuffer : RandomAccessCollection  {

}

----Swift.(file)._UIntBuffer.index(_:_UIntBuffer<Element>.Index,offsetBy:Int)
extension _UIntBuffer : RandomAccessCollection  {

}

----Swift.(file)._UIntBuffer.distance(from:_UIntBuffer<Element>.Index,to:_UIntBuffer<Element>.Index)
extension _UIntBuffer : RandomAccessCollection  {

}

----Swift.(file)._UIntBuffer.init()
extension _UIntBuffer : RangeReplaceableCollection  {

}

----Swift.(file)._UIntBuffer.capacity
extension _UIntBuffer : RangeReplaceableCollection  {

}

----Swift.(file)._UIntBuffer.append(_:Element)
extension _UIntBuffer : RangeReplaceableCollection  {

}

----Swift.(file)._UIntBuffer.removeFirst()
extension _UIntBuffer : RangeReplaceableCollection  {

}

----Swift.(file)._UIntBuffer.replaceSubrange(_:Range<_UIntBuffer<Element>.Index>,with:C)
extension _UIntBuffer : RangeReplaceableCollection  {

}

----Swift.(file)..(error_type).CodeUnit
extension Unicode.UTF16 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).EncodedScalar
extension Unicode.UTF16 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).encodedReplacementCharacter
extension Unicode.UTF16 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).decode(_:Unicode.UTF16.EncodedScalar)
extension Unicode.UTF16 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).encode(_:Unicode.Scalar)
extension Unicode.UTF16 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).transcode(_:FromEncoding.EncodedScalar,from:FromEncoding.Type)
extension Unicode.UTF16 : Unicode.Encoding  {

}

----Swift.(file).UTF16.ReverseParser.Encoding
extension UTF16.ReverseParser : Unicode.Parser, _UTFParser  {

}

----Swift.(file)..(error_type).Encoding
extension Unicode.UTF16.ForwardParser : Unicode.Parser, _UTFParser  {

}

----Swift.(file)..(error_type).CodeUnit
extension Unicode.UTF32 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).EncodedScalar
extension Unicode.UTF32 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).encodedReplacementCharacter
extension Unicode.UTF32 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).decode(_:Unicode.UTF32.EncodedScalar)
extension Unicode.UTF32 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).encode(_:Unicode.Scalar)
extension Unicode.UTF32 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).Parser.init()
extension  {

}

----Swift.(file)..(error_type).ForwardParser
extension Unicode.UTF32 : Unicode.Encoding  {

}

----Swift.(file)..(error_type).ReverseParser
extension Unicode.UTF32 : Unicode.Encoding  {

}

----Swift.(file).UTF32.Parser.Encoding
extension UTF32.Parser : Unicode.Parser  {

}

----Swift.(file).UTF32.Parser.parseScalar(from:I)
extension UTF32.Parser : Unicode.Parser  {

}

----Swift.(file)..(error_type).CodeUnit
extension Unicode.UTF8 : _UnicodeEncoding  {

}

----Swift.(file)..(error_type).EncodedScalar
extension Unicode.UTF8 : _UnicodeEncoding  {

}

----Swift.(file)..(error_type).encodedReplacementCharacter
extension Unicode.UTF8 : _UnicodeEncoding  {

}

----Swift.(file)..(error_type).decode(_:Unicode.UTF8.EncodedScalar)
extension Unicode.UTF8 : _UnicodeEncoding  {

}

----Swift.(file)..(error_type).encode(_:Unicode.Scalar)
extension Unicode.UTF8 : _UnicodeEncoding  {

}

----Swift.(file)..(error_type).transcode(_:FromEncoding.EncodedScalar,from:FromEncoding.Type)
extension Unicode.UTF8 : _UnicodeEncoding  {

}

----Swift.(file).UTF8.ReverseParser.Encoding
extension UTF8.ReverseParser : Unicode.Parser, _UTFParser  {

}

----Swift.(file)..(error_type).Encoding
extension Unicode.UTF8.ForwardParser : Unicode.Parser, _UTFParser  {

}

----Swift.(file).UnicodeDecodingResult.scalarValue
extension UnicodeDecodingResult {

}

----Swift.(file).UnicodeDecodingResult.emptyInput
extension UnicodeDecodingResult {

}

----Swift.(file).UnicodeDecodingResult.error
extension UnicodeDecodingResult {

}

----Swift.(file).UnicodeDecodingResult.==infix(_:UnicodeDecodingResult,_:UnicodeDecodingResult)
extension UnicodeDecodingResult {

}

----Swift.(file).UnicodeCodec.init()
extension UnicodeCodec {

}

----Swift.(file).UnicodeCodec.decode(_:I)
extension UnicodeCodec {

}

----Swift.(file).UnicodeCodec.encode(_:<<error type>>,into:<<error type>>)
extension UnicodeCodec {

}

----Swift.(file)..(error_type).init()
extension Unicode.UTF8 : UnicodeCodec  {

}

----Swift.(file)..(error_type).decode(_:I)
extension Unicode.UTF8 : UnicodeCodec  {

}

----Swift.(file)..(error_type).encode(_:<<error type>>,into:<<error type>>)
extension Unicode.UTF8 : UnicodeCodec  {

}

----Swift.(file)..(error_type).isContinuation(_:<<error type>>)
extension Unicode.UTF8 : UnicodeCodec  {

}

----Swift.(file)..(error_type).init()
extension Unicode.UTF16 : UnicodeCodec  {

}

----Swift.(file)..(error_type).decode(_:I)
extension Unicode.UTF16 : UnicodeCodec  {

}

----Swift.(file)..(error_type).encode(_:<<error type>>,into:<<error type>>)
extension Unicode.UTF16 : UnicodeCodec  {

}

----Swift.(file)..(error_type).init()
extension Unicode.UTF32 : UnicodeCodec  {

}

----Swift.(file)..(error_type).decode(_:I)
extension Unicode.UTF32 : UnicodeCodec  {

}

----Swift.(file)..(error_type).encode(_:<<error type>>,into:<<error type>>)
extension Unicode.UTF32 : UnicodeCodec  {

}

----Swift.(file).transcode(_:Input,from:InputEncoding.Type,to:OutputEncoding.Type,stoppingOnError:Bool,into:<<error type>>)


----Swift.(file).UTF16.width(_:<<error type>>)
extension UTF16  {

}

----Swift.(file).UTF16.leadSurrogate(_:<<error type>>)
extension UTF16  {

}

----Swift.(file).UTF16.trailSurrogate(_:<<error type>>)
extension UTF16  {

}

----Swift.(file).UTF16.isLeadSurrogate(_:Unicode.UTF16.CodeUnit)
extension UTF16  {

}

----Swift.(file).UTF16.isTrailSurrogate(_:Unicode.UTF16.CodeUnit)
extension UTF16  {

}

----Swift.(file)..(error_type).init(_unchecked:UInt32)
extension Unicode.Scalar  {

}

----Swift.(file).transcode(_:InputEncoding.Type,_:OutputEncoding.Type,_:Input,_:<<error type>>,stopOnError:Bool)


----Swift.(file)._UnicodeEncoding.transcode(_:<<error type>>,from:FromEncoding.Type)
extension _UnicodeEncoding  {

}

----Swift.(file).Unicode.Encoding
extension Unicode  {

}

----Swift.(file)._StringGuts.scalarAlign(_:<<error type>>)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.fastUTF8ScalarLength(startingAt:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.fastUTF8ScalarLength(endingAt:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.fastUTF8Scalar(startingAt:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.isOnUnicodeScalarBoundary(_:String.Index)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.foreignErrorCorrectedScalar(startingAt:String.Index)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.foreignErrorCorrectedScalar(endingAt:String.Index)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.foreignErrorCorrectedUTF16CodeUnit(at:String.Index)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.foreignScalarAlign(_:<<error type>>)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.foreignErrorCorrectedGrapheme(startingAt:Int,endingAt:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.errorCorrectedScalar(startingAt:Int)
extension _StringGuts  {

}

----Swift.(file)._StringGuts.errorCorrectedCharacter(startingAt:Int,endingAt:Int)
extension _StringGuts  {

}

----Swift.(file).Unicode.ParseResult.valid
extension Unicode.ParseResult {

}

----Swift.(file).Unicode.ParseResult.emptyInput
extension Unicode.ParseResult {

}

----Swift.(file).Unicode.ParseResult.error
extension Unicode.ParseResult {

}

----Swift.(file).Unicode.Parser
extension Unicode  {

}

----Swift.(file).Unicode.Scalar.init(_value:UInt32)
extension Unicode.Scalar {

}

----Swift.(file)..(error_type).value
extension Unicode.Scalar :
    _ExpressibleByBuiltinUnicodeScalarLiteral,
    ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file)..(error_type).init(_builtinUnicodeScalarLiteral:<<error type>>)
extension Unicode.Scalar :
    _ExpressibleByBuiltinUnicodeScalarLiteral,
    ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file)..(error_type).init(unicodeScalarLiteral:<<error type>>)
extension Unicode.Scalar :
    _ExpressibleByBuiltinUnicodeScalarLiteral,
    ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file)..(error_type).init(_:UInt32)
extension Unicode.Scalar :
    _ExpressibleByBuiltinUnicodeScalarLiteral,
    ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file)..(error_type).init(_:UInt16)
extension Unicode.Scalar :
    _ExpressibleByBuiltinUnicodeScalarLiteral,
    ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file)..(error_type).init(_:UInt8)
extension Unicode.Scalar :
    _ExpressibleByBuiltinUnicodeScalarLiteral,
    ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file)..(error_type).init(_:<<error type>>)
extension Unicode.Scalar :
    _ExpressibleByBuiltinUnicodeScalarLiteral,
    ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file)..(error_type).escaped(asASCII:Bool)
extension Unicode.Scalar :
    _ExpressibleByBuiltinUnicodeScalarLiteral,
    ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file)..(error_type).isASCII
extension Unicode.Scalar :
    _ExpressibleByBuiltinUnicodeScalarLiteral,
    ExpressibleByUnicodeScalarLiteral  {

}

----Swift.(file)..(error_type).description
extension Unicode.Scalar : CustomStringConvertible, CustomDebugStringConvertible  {

}

----Swift.(file)..(error_type).debugDescription
extension Unicode.Scalar : CustomStringConvertible, CustomDebugStringConvertible  {

}

----Swift.(file)..(error_type).init(_:String)
extension Unicode.Scalar : LosslessStringConvertible  {

}

----Swift.(file)..(error_type).hash(into:Hasher)
extension Unicode.Scalar : Hashable  {

}

----Swift.(file)..(error_type).init(_:Int)
extension Unicode.Scalar  {

}

----Swift.(file).UInt8.init(ascii:<<error type>>)
extension UInt8  {

}

----Swift.(file).UInt32.init(_:<<error type>>)
extension UInt32  {

}

----Swift.(file).UInt64.init(_:<<error type>>)
extension UInt64  {

}

----Swift.(file)..(error_type).==infix(_:<<error type>>,_:<<error type>>)
extension Unicode.Scalar : Equatable  {

}

----Swift.(file)..(error_type).<infix(_:<<error type>>,_:<<error type>>)
extension Unicode.Scalar : Comparable  {

}

----Swift.(file)..(error_type).UTF16View.init(value:<<error type>>)
extension  {

}

----Swift.(file)..(error_type).UTF16View.value
extension  {

}

----Swift.(file)..(error_type).utf16
extension Unicode.Scalar  {

}

----Swift.(file)..(error_type).Indices
extension Unicode.Scalar.UTF16View : RandomAccessCollection  {

}

----Swift.(file)..(error_type).startIndex
extension Unicode.Scalar.UTF16View : RandomAccessCollection  {

}

----Swift.(file)..(error_type).endIndex
extension Unicode.Scalar.UTF16View : RandomAccessCollection  {

}

----Swift.(file)..(error_type).subscript(_:Int)
extension Unicode.Scalar.UTF16View : RandomAccessCollection  {

}

----Swift.(file)..(error_type).init()
extension Unicode.Scalar  {

}

----Swift.(file)..(error_type).withUTF16CodeUnits(_:(UnsafeBufferPointer<UInt16>) throws -> Result)
extension Unicode.Scalar  {

}

----Swift.(file)..(error_type).withUTF8CodeUnits(_:(UnsafeBufferPointer<UInt8>) throws -> Result)
extension Unicode.Scalar  {

}

----Swift.(file).Unicode.Scalar.Properties.init(_:Unicode.Scalar)
extension Unicode.Scalar.Properties {

}

----Swift.(file).Unicode.Scalar.Properties.icuValue
extension Unicode.Scalar.Properties {

}

----Swift.(file).Unicode.Scalar.properties
extension Unicode.Scalar  {

}

----Swift.(file)..(error_type).isAlphabetic
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isASCIIHexDigit
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isBidiControl
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isBidiMirrored
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isDash
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isDefaultIgnorableCodePoint
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isDeprecated
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isDiacritic
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isExtender
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isFullCompositionExclusion
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isGraphemeBase
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isGraphemeExtend
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isHexDigit
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isIDContinue
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isIDStart
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isIdeographic
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isIDSBinaryOperator
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isIDSTrinaryOperator
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isJoinControl
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isLogicalOrderException
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isLowercase
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isMath
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isNoncharacterCodePoint
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isQuotationMark
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isRadical
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isSoftDotted
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isTerminalPunctuation
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isUnifiedIdeograph
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isUppercase
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isWhitespace
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isXIDContinue
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isXIDStart
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isSentenceTerminal
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isVariationSelector
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isPatternSyntax
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isPatternWhitespace
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isCased
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isCaseIgnorable
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).changesWhenLowercased
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).changesWhenUppercased
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).changesWhenTitlecased
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).changesWhenCaseFolded
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).changesWhenCaseMapped
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).changesWhenNFKCCaseFolded
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isEmoji
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isEmojiPresentation
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isEmojiModifier
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).isEmojiModifierBase
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).lowercaseMapping
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).titlecaseMapping
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).uppercaseMapping
extension Unicode.Scalar.Properties  {

}

----Swift.(file).Unicode.Version
extension Unicode  {

}

----Swift.(file)..(error_type).age
extension Unicode.Scalar.Properties  {

}

----Swift.(file).Unicode.GeneralCategory.uppercaseLetter
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.lowercaseLetter
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.titlecaseLetter
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.modifierLetter
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.otherLetter
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.nonspacingMark
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.spacingMark
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.enclosingMark
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.decimalNumber
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.letterNumber
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.otherNumber
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.connectorPunctuation
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.dashPunctuation
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.openPunctuation
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.closePunctuation
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.initialPunctuation
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.finalPunctuation
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.otherPunctuation
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.mathSymbol
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.currencySymbol
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.modifierSymbol
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.otherSymbol
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.spaceSeparator
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.lineSeparator
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.paragraphSeparator
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.control
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.format
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.surrogate
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.privateUse
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.unassigned
extension Unicode.GeneralCategory {

}

----Swift.(file).Unicode.GeneralCategory.init(rawValue:__swift_stdlib_UCharCategory)
extension Unicode.GeneralCategory {

}

----Swift.(file)..(error_type).generalCategory
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).nameAlias
extension Unicode.Scalar.Properties  {

}

----Swift.(file).Unicode.CanonicalCombiningClass.notReordered
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.overlay
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.nukta
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.kanaVoicing
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.virama
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.attachedBelowLeft
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.attachedBelow
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.attachedAbove
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.attachedAboveRight
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.belowLeft
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.below
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.belowRight
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.left
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.right
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.aboveLeft
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.above
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.aboveRight
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.doubleBelow
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.doubleAbove
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.iotaSubscript
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.rawValue
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.init(rawValue:UInt8)
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.==infix(_:<<error type>>,_:<<error type>>)
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.<infix(_:<<error type>>,_:<<error type>>)
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.hashValue
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file).Unicode.CanonicalCombiningClass.hash(into:Hasher)
extension Unicode.CanonicalCombiningClass {

}

----Swift.(file)..(error_type).canonicalCombiningClass
extension Unicode.Scalar.Properties  {

}

----Swift.(file).Unicode.NumericType.decimal
extension Unicode.NumericType {

}

----Swift.(file).Unicode.NumericType.digit
extension Unicode.NumericType {

}

----Swift.(file).Unicode.NumericType.numeric
extension Unicode.NumericType {

}

----Swift.(file).Unicode.NumericType.init(rawValue:__swift_stdlib_UNumericType)
extension Unicode.NumericType {

}

----Swift.(file)..(error_type).numericType
extension Unicode.Scalar.Properties  {

}

----Swift.(file)..(error_type).numericValue
extension Unicode.Scalar.Properties  {

}

----Swift.(file).Unmanaged.init(_private:Instance)
extension Unmanaged {

}

----Swift.(file).Unmanaged.fromOpaque(_:UnsafeRawPointer)
extension Unmanaged {

}

----Swift.(file).Unmanaged.toOpaque()
extension Unmanaged {

}

----Swift.(file).Unmanaged.passRetained(_:Instance)
extension Unmanaged {

}

----Swift.(file).Unmanaged.passUnretained(_:Instance)
extension Unmanaged {

}

----Swift.(file).Unmanaged.takeUnretainedValue()
extension Unmanaged {

}

----Swift.(file).Unmanaged.takeRetainedValue()
extension Unmanaged {

}

----Swift.(file).Unmanaged.retain()
extension Unmanaged {

}

----Swift.(file).Unmanaged.release()
extension Unmanaged {

}

----Swift.(file).Unmanaged.autorelease()
extension Unmanaged {

}

----Swift.(file).UnsafePointer.Distance
extension UnsafePointer {

}

----Swift.(file).UnsafePointer.init(_:<<error type>>)
extension UnsafePointer {

}

----Swift.(file).UnsafePointer.deallocate()
extension UnsafePointer {

}

----Swift.(file).UnsafePointer.pointee
extension UnsafePointer {

}

----Swift.(file).UnsafePointer.withMemoryRebound(to:T.Type,capacity:Int,_:(UnsafePointer<T>) throws -> Result)
extension UnsafePointer {

}

----Swift.(file).UnsafePointer.subscript(_:Int)
extension UnsafePointer {

}

----Swift.(file).UnsafeMutablePointer.Distance
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.init(_:<<error type>>)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.init(mutating:UnsafePointer<Pointee>)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.init(mutating:UnsafePointer<Pointee>?)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.allocate(capacity:Int)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.deallocate()
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.pointee
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.initialize(repeating:Pointee,count:Int)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.initialize(to:Pointee)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.move()
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.assign(repeating:Pointee,count:Int)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.assign(from:UnsafePointer<Pointee>,count:Int)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.moveInitialize(from:UnsafeMutablePointer<Pointee>,count:Int)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.initialize(from:UnsafePointer<Pointee>,count:Int)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.moveAssign(from:UnsafeMutablePointer<Pointee>,count:Int)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.deinitialize(count:Int)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.withMemoryRebound(to:T.Type,capacity:Int,_:(UnsafeMutablePointer<T>) throws -> Result)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeMutablePointer.subscript(_:Int)
extension UnsafeMutablePointer {

}

----Swift.(file).UnsafeRawPointer.Pointee
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.init(_:<<error type>>)
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.init(_:UnsafePointer<T>)
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.init(_:UnsafePointer<T>?)
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.init(_:UnsafeMutableRawPointer)
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.init(_:UnsafeMutableRawPointer?)
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.deallocate()
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.bindMemory(to:T.Type,capacity:Int)
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.assumingMemoryBound(to:T.Type)
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.load(fromByteOffset:Int,as:T.Type)
extension UnsafeRawPointer {

}

----Swift.(file).UnsafeRawPointer.advanced(by:Int)
extension UnsafeRawPointer: Strideable  {

}

----Swift.(file).UnsafeMutableRawPointer.Pointee
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.init(_:<<error type>>)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.init(_:UnsafeMutablePointer<T>)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.init(_:UnsafeMutablePointer<T>?)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.init(mutating:UnsafeRawPointer)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.init(mutating:UnsafeRawPointer?)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.allocate(byteCount:Int,alignment:Int)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.deallocate()
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.bindMemory(to:T.Type,capacity:Int)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.assumingMemoryBound(to:T.Type)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.initializeMemory(as:T.Type,repeating:T,count:Int)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.initializeMemory(as:T.Type,from:UnsafePointer<T>,count:Int)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.moveInitializeMemory(as:T.Type,from:UnsafeMutablePointer<T>,count:Int)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.load(fromByteOffset:Int,as:T.Type)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.storeBytes(of:T,toByteOffset:Int,as:T.Type)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.copyMemory(from:UnsafeRawPointer,byteCount:Int)
extension UnsafeMutableRawPointer {

}

----Swift.(file).UnsafeMutableRawPointer.advanced(by:Int)
extension UnsafeMutableRawPointer: Strideable  {

}

----Swift.(file).OpaquePointer.init(_:UnsafeMutableRawPointer)
extension OpaquePointer  {

}

----Swift.(file).OpaquePointer.init(_:UnsafeMutableRawPointer?)
extension OpaquePointer  {

}

----Swift.(file).OpaquePointer.init(_:UnsafeRawPointer)
extension OpaquePointer  {

}

----Swift.(file).OpaquePointer.init(_:UnsafeRawPointer?)
extension OpaquePointer  {

}

----Swift.(file)._ValidUTF8Buffer.SubSequence
extension _ValidUTF8Buffer : Sequence  {

}

----Swift.(file)._ValidUTF8Buffer.Iterator.init(_:_ValidUTF8Buffer)
extension _ValidUTF8Buffer.Iterator {

}

----Swift.(file)._ValidUTF8Buffer.Iterator.next()
extension _ValidUTF8Buffer.Iterator {

}

----Swift.(file)._ValidUTF8Buffer.makeIterator()
extension _ValidUTF8Buffer : Sequence  {

}

----Swift.(file)._ValidUTF8Buffer.Index.init(_biasedBits:UInt32)
extension _ValidUTF8Buffer.Index {

}

----Swift.(file)._ValidUTF8Buffer.Index.==infix(_:_ValidUTF8Buffer.Index,_:_ValidUTF8Buffer.Index)
extension _ValidUTF8Buffer.Index {

}

----Swift.(file)._ValidUTF8Buffer.Index.<infix(_:_ValidUTF8Buffer.Index,_:_ValidUTF8Buffer.Index)
extension _ValidUTF8Buffer.Index {

}

----Swift.(file)._ValidUTF8Buffer.startIndex
extension _ValidUTF8Buffer : Collection  {

}

----Swift.(file)._ValidUTF8Buffer.endIndex
extension _ValidUTF8Buffer : Collection  {

}

----Swift.(file)._ValidUTF8Buffer.count
extension _ValidUTF8Buffer : Collection  {

}

----Swift.(file)._ValidUTF8Buffer.isEmpty
extension _ValidUTF8Buffer : Collection  {

}

----Swift.(file)._ValidUTF8Buffer.index(after:_ValidUTF8Buffer.Index)
extension _ValidUTF8Buffer : Collection  {

}

----Swift.(file)._ValidUTF8Buffer.subscript(_:_ValidUTF8Buffer.Index)
extension _ValidUTF8Buffer : Collection  {

}

----Swift.(file)._ValidUTF8Buffer.index(before:_ValidUTF8Buffer.Index)
extension _ValidUTF8Buffer : BidirectionalCollection  {

}

----Swift.(file)._ValidUTF8Buffer.Indices
extension _ValidUTF8Buffer : RandomAccessCollection  {

}

----Swift.(file)._ValidUTF8Buffer.distance(from:_ValidUTF8Buffer.Index,to:_ValidUTF8Buffer.Index)
extension _ValidUTF8Buffer : RandomAccessCollection  {

}

----Swift.(file)._ValidUTF8Buffer.index(_:_ValidUTF8Buffer.Index,offsetBy:Int)
extension _ValidUTF8Buffer : RandomAccessCollection  {

}

----Swift.(file)._ValidUTF8Buffer.init()
extension _ValidUTF8Buffer : RangeReplaceableCollection  {

}

----Swift.(file)._ValidUTF8Buffer.capacity
extension _ValidUTF8Buffer : RangeReplaceableCollection  {

}

----Swift.(file)._ValidUTF8Buffer.capacity
extension _ValidUTF8Buffer : RangeReplaceableCollection  {

}

----Swift.(file)._ValidUTF8Buffer.append(_:_ValidUTF8Buffer.Element)
extension _ValidUTF8Buffer : RangeReplaceableCollection  {

}

----Swift.(file)._ValidUTF8Buffer.removeFirst()
extension _ValidUTF8Buffer : RangeReplaceableCollection  {

}

----Swift.(file)._ValidUTF8Buffer.replaceSubrange(_:Range<_ValidUTF8Buffer.Index>,with:C)
extension _ValidUTF8Buffer : RangeReplaceableCollection  {

}

----Swift.(file)._ValidUTF8Buffer.append(contentsOf:_ValidUTF8Buffer)
extension _ValidUTF8Buffer  {

}

----Swift.(file)._ValidUTF8Buffer.encodedReplacementCharacter
extension _ValidUTF8Buffer  {

}